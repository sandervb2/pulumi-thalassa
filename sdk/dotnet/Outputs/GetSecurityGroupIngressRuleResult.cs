// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa.Outputs
{

    [OutputType]
    public sealed class GetSecurityGroupIngressRuleResult
    {
        /// <summary>
        /// IP version of the rule (ipv4 or ipv6)
        /// </summary>
        public readonly string IpVersion;
        /// <summary>
        /// Name of the rule
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Policy of the rule (allow or drop)
        /// </summary>
        public readonly string Policy;
        /// <summary>
        /// Maximum port of the rule
        /// </summary>
        public readonly int PortRangeMax;
        /// <summary>
        /// Minimum port of the rule
        /// </summary>
        public readonly int PortRangeMin;
        /// <summary>
        /// Priority of the rule
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Protocol of the rule (all, tcp, udp, icmp)
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// IP address or CIDR block that the rule applies to
        /// </summary>
        public readonly string RemoteAddress;
        /// <summary>
        /// Identity of the security group that the rule applies to
        /// </summary>
        public readonly string RemoteSecurityGroupIdentity;
        /// <summary>
        /// Type of the remote address (address or securityGroup)
        /// </summary>
        public readonly string RemoteType;

        [OutputConstructor]
        private GetSecurityGroupIngressRuleResult(
            string ipVersion,

            string name,

            string policy,

            int portRangeMax,

            int portRangeMin,

            int priority,

            string protocol,

            string remoteAddress,

            string remoteSecurityGroupIdentity,

            string remoteType)
        {
            IpVersion = ipVersion;
            Name = name;
            Policy = policy;
            PortRangeMax = portRangeMax;
            PortRangeMin = portRangeMin;
            Priority = priority;
            Protocol = protocol;
            RemoteAddress = remoteAddress;
            RemoteSecurityGroupIdentity = remoteSecurityGroupIdentity;
            RemoteType = remoteType;
        }
    }
}
