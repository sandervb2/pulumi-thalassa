// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    public static class GetSecurityGroup
    {
        /// <summary>
        /// A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.
        /// </summary>
        public static Task<GetSecurityGroupResult> InvokeAsync(GetSecurityGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityGroupResult>("thalassa:index/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupArgs(), options.WithDefaults());

        /// <summary>
        /// A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.
        /// </summary>
        public static Output<GetSecurityGroupResult> Invoke(GetSecurityGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGroupResult>("thalassa:index/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.
        /// </summary>
        public static Output<GetSecurityGroupResult> Invoke(GetSecurityGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGroupResult>("thalassa:index/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identity of the security group
        /// </summary>
        [Input("identity")]
        public string? Identity { get; set; }

        /// <summary>
        /// Name of the security group
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("organisationId")]
        public string? OrganisationId { get; set; }

        /// <summary>
        /// Identity of the VPC that the security group belongs to. Required when searching by name.
        /// </summary>
        [Input("vpcIdentity")]
        public string? VpcIdentity { get; set; }

        public GetSecurityGroupArgs()
        {
        }
        public static new GetSecurityGroupArgs Empty => new GetSecurityGroupArgs();
    }

    public sealed class GetSecurityGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identity of the security group
        /// </summary>
        [Input("identity")]
        public Input<string>? Identity { get; set; }

        /// <summary>
        /// Name of the security group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Identity of the VPC that the security group belongs to. Required when searching by name.
        /// </summary>
        [Input("vpcIdentity")]
        public Input<string>? VpcIdentity { get; set; }

        public GetSecurityGroupInvokeArgs()
        {
        }
        public static new GetSecurityGroupInvokeArgs Empty => new GetSecurityGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityGroupResult
    {
        /// <summary>
        /// Flag that indicates if the security group allows traffic between instances in the same security group
        /// </summary>
        public readonly bool AllowSameGroupTraffic;
        /// <summary>
        /// Creation timestamp of the security group
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Description of the security group
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of egress rules for the security group
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGroupEgressRuleResult> EgressRules;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identity of the security group
        /// </summary>
        public readonly string? Identity;
        /// <summary>
        /// List of ingress rules for the security group
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityGroupIngressRuleResult> IngressRules;
        /// <summary>
        /// Name of the security group
        /// </summary>
        public readonly string? Name;
        public readonly string? OrganisationId;
        /// <summary>
        /// Status of the security group
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Last update timestamp of the security group
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// Identity of the VPC that the security group belongs to. Required when searching by name.
        /// </summary>
        public readonly string? VpcIdentity;

        [OutputConstructor]
        private GetSecurityGroupResult(
            bool allowSameGroupTraffic,

            string createdAt,

            string description,

            ImmutableArray<Outputs.GetSecurityGroupEgressRuleResult> egressRules,

            string id,

            string? identity,

            ImmutableArray<Outputs.GetSecurityGroupIngressRuleResult> ingressRules,

            string? name,

            string? organisationId,

            string status,

            string updatedAt,

            string? vpcIdentity)
        {
            AllowSameGroupTraffic = allowSameGroupTraffic;
            CreatedAt = createdAt;
            Description = description;
            EgressRules = egressRules;
            Id = id;
            Identity = identity;
            IngressRules = ingressRules;
            Name = name;
            OrganisationId = organisationId;
            Status = status;
            UpdatedAt = updatedAt;
            VpcIdentity = vpcIdentity;
        }
    }
}
