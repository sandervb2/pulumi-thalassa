// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Create a PostgreSQL role
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a VPC for the database cluster
    ///     var example = new Thalassa.Vpc("example", new()
    ///     {
    ///         Name = "example-vpc",
    ///         Description = "Example VPC for database cluster",
    ///         Region = "nl-01",
    ///         Cidrs = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     // Create a subnet for the database cluster
    ///     var exampleSubnet = new Thalassa.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         Description = "Example subnet for database cluster",
    ///         VpcId = example.Id,
    ///         Cidr = "10.0.1.0/24",
    ///     });
    /// 
    ///     // Create a database cluster for the PostgreSQL roles
    ///     var exampleDbaasDbCluster = new Thalassa.DbaasDbCluster("example", new()
    ///     {
    ///         Name = "example-db-cluster",
    ///         Description = "Example database cluster for PostgreSQL roles",
    ///         SubnetId = exampleSubnet.Id,
    ///         DatabaseInstanceType = "db-pgp-small",
    ///         Engine = "postgres",
    ///         EngineVersion = "15.13",
    ///         AllocatedStorage = 100,
    ///         VolumeTypeClass = "block",
    ///     });
    /// 
    ///     // Create PostgreSQL roles with Thalassa default values
    ///     var exampleDbaasPgRoles = new Thalassa.DbaasPgRoles("example", new()
    ///     {
    ///         DbClusterId = exampleDbaasDbCluster.Id,
    ///         Name = "example_role",
    ///         Password = "secure_password_123",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["pgRolesId"] = exampleDbaasPgRoles.Id,
    ///         ["pgRolesName"] = exampleDbaasPgRoles.Name,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/dbaasPgRoles:DbaasPgRoles")]
    public partial class DbaasPgRoles : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The connection limit of the role
        /// </summary>
        [Output("connectionLimit")]
        public Output<int?> ConnectionLimit { get; private set; } = null!;

        /// <summary>
        /// Whether the role can create databases
        /// </summary>
        [Output("createDb")]
        public Output<bool?> CreateDb { get; private set; } = null!;

        /// <summary>
        /// Whether the role can create roles
        /// </summary>
        [Output("createRole")]
        public Output<bool?> CreateRole { get; private set; } = null!;

        /// <summary>
        /// The ID of the database
        /// </summary>
        [Output("dbClusterId")]
        public Output<string> DbClusterId { get; private set; } = null!;

        /// <summary>
        /// Whether the role can login
        /// </summary>
        [Output("login")]
        public Output<bool?> Login { get; private set; } = null!;

        /// <summary>
        /// The name of the role
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// The password of the role
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;


        /// <summary>
        /// Create a DbaasPgRoles resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbaasPgRoles(string name, DbaasPgRolesArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/dbaasPgRoles:DbaasPgRoles", name, args ?? new DbaasPgRolesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbaasPgRoles(string name, Input<string> id, DbaasPgRolesState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/dbaasPgRoles:DbaasPgRoles", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbaasPgRoles resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbaasPgRoles Get(string name, Input<string> id, DbaasPgRolesState? state = null, CustomResourceOptions? options = null)
        {
            return new DbaasPgRoles(name, id, state, options);
        }
    }

    public sealed class DbaasPgRolesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The connection limit of the role
        /// </summary>
        [Input("connectionLimit")]
        public Input<int>? ConnectionLimit { get; set; }

        /// <summary>
        /// Whether the role can create databases
        /// </summary>
        [Input("createDb")]
        public Input<bool>? CreateDb { get; set; }

        /// <summary>
        /// Whether the role can create roles
        /// </summary>
        [Input("createRole")]
        public Input<bool>? CreateRole { get; set; }

        /// <summary>
        /// The ID of the database
        /// </summary>
        [Input("dbClusterId", required: true)]
        public Input<string> DbClusterId { get; set; } = null!;

        /// <summary>
        /// Whether the role can login
        /// </summary>
        [Input("login")]
        public Input<bool>? Login { get; set; }

        /// <summary>
        /// The name of the role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// The password of the role
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public DbaasPgRolesArgs()
        {
        }
        public static new DbaasPgRolesArgs Empty => new DbaasPgRolesArgs();
    }

    public sealed class DbaasPgRolesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The connection limit of the role
        /// </summary>
        [Input("connectionLimit")]
        public Input<int>? ConnectionLimit { get; set; }

        /// <summary>
        /// Whether the role can create databases
        /// </summary>
        [Input("createDb")]
        public Input<bool>? CreateDb { get; set; }

        /// <summary>
        /// Whether the role can create roles
        /// </summary>
        [Input("createRole")]
        public Input<bool>? CreateRole { get; set; }

        /// <summary>
        /// The ID of the database
        /// </summary>
        [Input("dbClusterId")]
        public Input<string>? DbClusterId { get; set; }

        /// <summary>
        /// Whether the role can login
        /// </summary>
        [Input("login")]
        public Input<bool>? Login { get; set; }

        /// <summary>
        /// The name of the role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of the role
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public DbaasPgRolesState()
        {
        }
        public static new DbaasPgRolesState Empty => new DbaasPgRolesState();
    }
}
