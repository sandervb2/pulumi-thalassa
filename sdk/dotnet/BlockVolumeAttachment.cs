// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Attach a block volume to a virtual machine. Volume must not be attached to another virtual machine.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a VPC for the resources
    ///     var example = new Thalassa.Vpc("example", new()
    ///     {
    ///         Name = "example-vpc",
    ///         Description = "Example VPC for block volume attachment",
    ///         Region = "nl-01",
    ///         Cidrs = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     // Create a subnet for the resources
    ///     var exampleSubnet = new Thalassa.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         Description = "Example subnet for block volume attachment",
    ///         VpcId = example.Id,
    ///         Cidr = "10.0.1.0/24",
    ///     });
    /// 
    ///     // Create a block volume
    ///     var exampleBlockVolume = new Thalassa.BlockVolume("example", new()
    ///     {
    ///         Name = "example-block-volume",
    ///         Description = "Example block volume for attachment",
    ///         Region = "nl-01",
    ///         VolumeType = "Block",
    ///         SizeGb = 50,
    ///     });
    /// 
    ///     // Create a virtual machine instance
    ///     var exampleVirtualMachineInstance = new Thalassa.VirtualMachineInstance("example", new()
    ///     {
    ///         Name = "example-instance",
    ///         SubnetId = exampleSubnet.Id,
    ///         MachineType = "pgp-small",
    ///         MachineImage = "ubuntu-22.04",
    ///         AvailabilityZone = "nl-01a",
    ///         RootVolumeSizeGb = 20,
    ///         RootVolumeType = "Block",
    ///     });
    /// 
    ///     // Create a block volume attachment with Thalassa default values
    ///     var exampleBlockVolumeAttachment = new Thalassa.BlockVolumeAttachment("example", new()
    ///     {
    ///         VolumeId = exampleBlockVolume.Id,
    ///         VmiId = exampleVirtualMachineInstance.Id,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["attachmentId"] = exampleBlockVolumeAttachment.Id,
    ///         ["deviceSerial"] = exampleBlockVolumeAttachment.Serial,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/blockVolumeAttachment:BlockVolumeAttachment")]
    public partial class BlockVolumeAttachment : global::Pulumi.CustomResource
    {
        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// The device name to use for the volume attachment (e.g., /dev/sdb)
        /// </summary>
        [Output("serial")]
        public Output<string> Serial { get; private set; } = null!;

        /// <summary>
        /// The ID of the virtual machine to attach the volume to
        /// </summary>
        [Output("vmiId")]
        public Output<string> VmiId { get; private set; } = null!;

        /// <summary>
        /// The ID of the volume to attach
        /// </summary>
        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;

        /// <summary>
        /// Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        /// </summary>
        [Output("waitForAttached")]
        public Output<bool?> WaitForAttached { get; private set; } = null!;

        /// <summary>
        /// The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        /// </summary>
        [Output("waitForAttachedTimeout")]
        public Output<int?> WaitForAttachedTimeout { get; private set; } = null!;

        /// <summary>
        /// Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        /// </summary>
        [Output("waitForDetached")]
        public Output<bool?> WaitForDetached { get; private set; } = null!;

        /// <summary>
        /// The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        /// </summary>
        [Output("waitForDetachedTimeout")]
        public Output<int?> WaitForDetachedTimeout { get; private set; } = null!;


        /// <summary>
        /// Create a BlockVolumeAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BlockVolumeAttachment(string name, BlockVolumeAttachmentArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/blockVolumeAttachment:BlockVolumeAttachment", name, args ?? new BlockVolumeAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BlockVolumeAttachment(string name, Input<string> id, BlockVolumeAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/blockVolumeAttachment:BlockVolumeAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BlockVolumeAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BlockVolumeAttachment Get(string name, Input<string> id, BlockVolumeAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new BlockVolumeAttachment(name, id, state, options);
        }
    }

    public sealed class BlockVolumeAttachmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// The ID of the virtual machine to attach the volume to
        /// </summary>
        [Input("vmiId", required: true)]
        public Input<string> VmiId { get; set; } = null!;

        /// <summary>
        /// The ID of the volume to attach
        /// </summary>
        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        /// <summary>
        /// Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        /// </summary>
        [Input("waitForAttached")]
        public Input<bool>? WaitForAttached { get; set; }

        /// <summary>
        /// The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        /// </summary>
        [Input("waitForAttachedTimeout")]
        public Input<int>? WaitForAttachedTimeout { get; set; }

        /// <summary>
        /// Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        /// </summary>
        [Input("waitForDetached")]
        public Input<bool>? WaitForDetached { get; set; }

        /// <summary>
        /// The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        /// </summary>
        [Input("waitForDetachedTimeout")]
        public Input<int>? WaitForDetachedTimeout { get; set; }

        public BlockVolumeAttachmentArgs()
        {
        }
        public static new BlockVolumeAttachmentArgs Empty => new BlockVolumeAttachmentArgs();
    }

    public sealed class BlockVolumeAttachmentState : global::Pulumi.ResourceArgs
    {
        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// The device name to use for the volume attachment (e.g., /dev/sdb)
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        /// <summary>
        /// The ID of the virtual machine to attach the volume to
        /// </summary>
        [Input("vmiId")]
        public Input<string>? VmiId { get; set; }

        /// <summary>
        /// The ID of the volume to attach
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        /// <summary>
        /// Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        /// </summary>
        [Input("waitForAttached")]
        public Input<bool>? WaitForAttached { get; set; }

        /// <summary>
        /// The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        /// </summary>
        [Input("waitForAttachedTimeout")]
        public Input<int>? WaitForAttachedTimeout { get; set; }

        /// <summary>
        /// Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        /// </summary>
        [Input("waitForDetached")]
        public Input<bool>? WaitForDetached { get; set; }

        /// <summary>
        /// The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        /// </summary>
        [Input("waitForDetachedTimeout")]
        public Input<int>? WaitForDetachedTimeout { get; set; }

        public BlockVolumeAttachmentState()
        {
        }
        public static new BlockVolumeAttachmentState Empty => new BlockVolumeAttachmentState();
    }
}
