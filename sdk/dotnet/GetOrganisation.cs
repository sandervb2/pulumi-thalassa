// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    public static class GetOrganisation
    {
        /// <summary>
        /// Get an organisation
        /// </summary>
        public static Task<GetOrganisationResult> InvokeAsync(GetOrganisationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganisationResult>("thalassa:index/getOrganisation:getOrganisation", args ?? new GetOrganisationArgs(), options.WithDefaults());

        /// <summary>
        /// Get an organisation
        /// </summary>
        public static Output<GetOrganisationResult> Invoke(GetOrganisationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganisationResult>("thalassa:index/getOrganisation:getOrganisation", args ?? new GetOrganisationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an organisation
        /// </summary>
        public static Output<GetOrganisationResult> Invoke(GetOrganisationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganisationResult>("thalassa:index/getOrganisation:getOrganisation", args ?? new GetOrganisationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganisationArgs : global::Pulumi.InvokeArgs
    {
        [Input("slug")]
        public string? Slug { get; set; }

        public GetOrganisationArgs()
        {
        }
        public static new GetOrganisationArgs Empty => new GetOrganisationArgs();
    }

    public sealed class GetOrganisationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public GetOrganisationInvokeArgs()
        {
        }
        public static new GetOrganisationInvokeArgs Empty => new GetOrganisationInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganisationResult
    {
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly string Description;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string Name;
        public readonly string? Slug;

        [OutputConstructor]
        private GetOrganisationResult(
            ImmutableDictionary<string, string> annotations,

            string description,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            string? slug)
        {
            Annotations = annotations;
            Description = description;
            Id = id;
            Labels = labels;
            Name = name;
            Slug = slug;
        }
    }
}
