// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Manages a Kubernetes cluster in the Thalassa cloud platform. This resource supports both managed clusters and hosted control plane clusters, allowing you to deploy production-ready Kubernetes environments with configurable networking, security policies, and auto-upgrade capabilities. The cluster can be customized with specific CNI plugins (Cilium or custom), network CIDRs, pod security standards, audit logging, and API server access controls.
    /// </summary>
    [ThalassaResourceType("thalassa:index/kubernetesCluster:KubernetesCluster")]
    public partial class KubernetesCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for the Kubernetes Cluster
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// API server ACLs for the Kubernetes Cluster
        /// </summary>
        [Output("apiServerAcls")]
        public Output<ImmutableArray<Outputs.KubernetesClusterApiServerAcl>> ApiServerAcls { get; private set; } = null!;

        /// <summary>
        /// Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        /// </summary>
        [Output("auditLogProfile")]
        public Output<string?> AuditLogProfile { get; private set; } = null!;

        /// <summary>
        /// Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        /// </summary>
        [Output("autoUpgradePolicy")]
        public Output<string?> AutoUpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        /// </summary>
        [Output("clusterType")]
        public Output<string?> ClusterType { get; private set; } = null!;

        /// <summary>
        /// Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        /// </summary>
        [Output("clusterVersion")]
        public Output<string> ClusterVersion { get; private set; } = null!;

        /// <summary>
        /// Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        /// </summary>
        [Output("defaultNetworkPolicy")]
        public Output<string?> DefaultNetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// Delete protection of the Kubernetes Cluster
        /// </summary>
        [Output("deleteProtection")]
        public Output<bool?> DeleteProtection { get; private set; } = null!;

        /// <summary>
        /// A human readable description about the Kubernetes Cluster
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Kubernetes API server CA certificate of the Kubernetes Cluster
        /// </summary>
        [Output("kubernetesApiServerCaCertificate")]
        public Output<string> KubernetesApiServerCaCertificate { get; private set; } = null!;

        /// <summary>
        /// Kubernetes API server endpoint of the Kubernetes Cluster
        /// </summary>
        [Output("kubernetesApiServerEndpoint")]
        public Output<string> KubernetesApiServerEndpoint { get; private set; } = null!;

        /// <summary>
        /// Labels for the Kubernetes Cluster
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        /// </summary>
        [Output("maintenanceDay")]
        public Output<int?> MaintenanceDay { get; private set; } = null!;

        /// <summary>
        /// Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        /// </summary>
        [Output("maintenanceStartAt")]
        public Output<int?> MaintenanceStartAt { get; private set; } = null!;

        /// <summary>
        /// Name of the Kubernetes Cluster
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// CNI of the Kubernetes Cluster
        /// </summary>
        [Output("networkingCni")]
        public Output<string> NetworkingCni { get; private set; } = null!;

        /// <summary>
        /// Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        /// </summary>
        [Output("networkingPodCidr")]
        public Output<string?> NetworkingPodCidr { get; private set; } = null!;

        /// <summary>
        /// Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        /// </summary>
        [Output("networkingServiceCidr")]
        public Output<string?> NetworkingServiceCidr { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        /// </summary>
        [Output("podSecurityStandardsProfile")]
        public Output<string?> PodSecurityStandardsProfile { get; private set; } = null!;

        /// <summary>
        /// Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// List identities of security group that will be attached to the Kubernetes Cluster
        /// </summary>
        [Output("securityGroupAttachments")]
        public Output<ImmutableArray<string>> SecurityGroupAttachments { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Status of the Kubernetes Cluster
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Subnet of the Kubernetes Cluster. Required for managed clusters.
        /// </summary>
        [Output("subnetId")]
        public Output<string?> SubnetId { get; private set; } = null!;

        /// <summary>
        /// VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesCluster(string name, KubernetesClusterArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/kubernetesCluster:KubernetesCluster", name, args ?? new KubernetesClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesCluster(string name, Input<string> id, KubernetesClusterState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/kubernetesCluster:KubernetesCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/sandervb2/pulumi-thalassa",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesCluster Get(string name, Input<string> id, KubernetesClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesCluster(name, id, state, options);
        }
    }

    public sealed class KubernetesClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Kubernetes Cluster
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("apiServerAcls")]
        private InputList<Inputs.KubernetesClusterApiServerAclArgs>? _apiServerAcls;

        /// <summary>
        /// API server ACLs for the Kubernetes Cluster
        /// </summary>
        public InputList<Inputs.KubernetesClusterApiServerAclArgs> ApiServerAcls
        {
            get => _apiServerAcls ?? (_apiServerAcls = new InputList<Inputs.KubernetesClusterApiServerAclArgs>());
            set => _apiServerAcls = value;
        }

        /// <summary>
        /// Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        /// </summary>
        [Input("auditLogProfile")]
        public Input<string>? AuditLogProfile { get; set; }

        /// <summary>
        /// Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        /// </summary>
        [Input("autoUpgradePolicy")]
        public Input<string>? AutoUpgradePolicy { get; set; }

        /// <summary>
        /// Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        /// </summary>
        [Input("clusterVersion", required: true)]
        public Input<string> ClusterVersion { get; set; } = null!;

        /// <summary>
        /// Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        /// </summary>
        [Input("defaultNetworkPolicy")]
        public Input<string>? DefaultNetworkPolicy { get; set; }

        /// <summary>
        /// Delete protection of the Kubernetes Cluster
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// A human readable description about the Kubernetes Cluster
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Kubernetes Cluster
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        /// </summary>
        [Input("maintenanceDay")]
        public Input<int>? MaintenanceDay { get; set; }

        /// <summary>
        /// Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        /// </summary>
        [Input("maintenanceStartAt")]
        public Input<int>? MaintenanceStartAt { get; set; }

        /// <summary>
        /// Name of the Kubernetes Cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// CNI of the Kubernetes Cluster
        /// </summary>
        [Input("networkingCni", required: true)]
        public Input<string> NetworkingCni { get; set; } = null!;

        /// <summary>
        /// Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        /// </summary>
        [Input("networkingPodCidr")]
        public Input<string>? NetworkingPodCidr { get; set; }

        /// <summary>
        /// Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        /// </summary>
        [Input("networkingServiceCidr")]
        public Input<string>? NetworkingServiceCidr { get; set; }

        [Input("organisationId", required: true)]
        public Input<string> OrganisationId { get; set; } = null!;

        /// <summary>
        /// Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        /// </summary>
        [Input("podSecurityStandardsProfile")]
        public Input<string>? PodSecurityStandardsProfile { get; set; }

        /// <summary>
        /// Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupAttachments")]
        private InputList<string>? _securityGroupAttachments;

        /// <summary>
        /// List identities of security group that will be attached to the Kubernetes Cluster
        /// </summary>
        public InputList<string> SecurityGroupAttachments
        {
            get => _securityGroupAttachments ?? (_securityGroupAttachments = new InputList<string>());
            set => _securityGroupAttachments = value;
        }

        /// <summary>
        /// Subnet of the Kubernetes Cluster. Required for managed clusters.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public KubernetesClusterArgs()
        {
        }
        public static new KubernetesClusterArgs Empty => new KubernetesClusterArgs();
    }

    public sealed class KubernetesClusterState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Kubernetes Cluster
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("apiServerAcls")]
        private InputList<Inputs.KubernetesClusterApiServerAclGetArgs>? _apiServerAcls;

        /// <summary>
        /// API server ACLs for the Kubernetes Cluster
        /// </summary>
        public InputList<Inputs.KubernetesClusterApiServerAclGetArgs> ApiServerAcls
        {
            get => _apiServerAcls ?? (_apiServerAcls = new InputList<Inputs.KubernetesClusterApiServerAclGetArgs>());
            set => _apiServerAcls = value;
        }

        /// <summary>
        /// Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        /// </summary>
        [Input("auditLogProfile")]
        public Input<string>? AuditLogProfile { get; set; }

        /// <summary>
        /// Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        /// </summary>
        [Input("autoUpgradePolicy")]
        public Input<string>? AutoUpgradePolicy { get; set; }

        /// <summary>
        /// Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        /// </summary>
        [Input("clusterVersion")]
        public Input<string>? ClusterVersion { get; set; }

        /// <summary>
        /// Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        /// </summary>
        [Input("defaultNetworkPolicy")]
        public Input<string>? DefaultNetworkPolicy { get; set; }

        /// <summary>
        /// Delete protection of the Kubernetes Cluster
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// A human readable description about the Kubernetes Cluster
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Kubernetes API server CA certificate of the Kubernetes Cluster
        /// </summary>
        [Input("kubernetesApiServerCaCertificate")]
        public Input<string>? KubernetesApiServerCaCertificate { get; set; }

        /// <summary>
        /// Kubernetes API server endpoint of the Kubernetes Cluster
        /// </summary>
        [Input("kubernetesApiServerEndpoint")]
        public Input<string>? KubernetesApiServerEndpoint { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Kubernetes Cluster
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        /// </summary>
        [Input("maintenanceDay")]
        public Input<int>? MaintenanceDay { get; set; }

        /// <summary>
        /// Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        /// </summary>
        [Input("maintenanceStartAt")]
        public Input<int>? MaintenanceStartAt { get; set; }

        /// <summary>
        /// Name of the Kubernetes Cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// CNI of the Kubernetes Cluster
        /// </summary>
        [Input("networkingCni")]
        public Input<string>? NetworkingCni { get; set; }

        /// <summary>
        /// Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        /// </summary>
        [Input("networkingPodCidr")]
        public Input<string>? NetworkingPodCidr { get; set; }

        /// <summary>
        /// Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        /// </summary>
        [Input("networkingServiceCidr")]
        public Input<string>? NetworkingServiceCidr { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        /// </summary>
        [Input("podSecurityStandardsProfile")]
        public Input<string>? PodSecurityStandardsProfile { get; set; }

        /// <summary>
        /// Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroupAttachments")]
        private InputList<string>? _securityGroupAttachments;

        /// <summary>
        /// List identities of security group that will be attached to the Kubernetes Cluster
        /// </summary>
        public InputList<string> SecurityGroupAttachments
        {
            get => _securityGroupAttachments ?? (_securityGroupAttachments = new InputList<string>());
            set => _securityGroupAttachments = value;
        }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Status of the Kubernetes Cluster
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Subnet of the Kubernetes Cluster. Required for managed clusters.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public KubernetesClusterState()
        {
        }
        public static new KubernetesClusterState Empty => new KubernetesClusterState();
    }
}
