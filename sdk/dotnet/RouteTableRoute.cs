// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Create an route table route with a destination cidr block, target gateway, target nat gateway and gateway address within a route table.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a VPC for the route table
    ///     var example = new Thalassa.Vpc("example", new()
    ///     {
    ///         Name = "example-vpc",
    ///         Description = "Example VPC for route table route",
    ///         Region = "nl-01",
    ///         Cidrs = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     // Create a subnet for the NAT gateway
    ///     var exampleSubnet = new Thalassa.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         Description = "Example subnet for NAT gateway",
    ///         VpcId = example.Id,
    ///         Cidr = "10.0.1.0/24",
    ///     });
    /// 
    ///     // Create a route table
    ///     var exampleRouteTable = new Thalassa.RouteTable("example", new()
    ///     {
    ///         Name = "example-route-table",
    ///         Description = "Example route table for route",
    ///         VpcId = example.Id,
    ///     });
    /// 
    ///     // Create a NAT gateway for the route
    ///     var exampleNatgateway = new Thalassa.Natgateway("example", new()
    ///     {
    ///         Name = "example-nat-gateway",
    ///         SubnetId = exampleSubnet.Id,
    ///     });
    /// 
    ///     // Create a route table route
    ///     var exampleRouteTableRoute = new Thalassa.RouteTableRoute("example", new()
    ///     {
    ///         RouteTableId = exampleRouteTable.Id,
    ///         DestinationCidr = "0.0.0.0/0",
    ///         TargetNatgateway = exampleNatgateway.Id,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["routeId"] = exampleRouteTableRoute.Id,
    ///         ["routeDestination"] = exampleRouteTableRoute.DestinationCidr,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/routeTableRoute:RouteTableRoute")]
    public partial class RouteTableRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Destination CIDR of the Route
        /// </summary>
        [Output("destinationCidr")]
        public Output<string> DestinationCidr { get; private set; } = null!;

        /// <summary>
        /// Gateway Address of the Route
        /// </summary>
        [Output("gatewayAddress")]
        public Output<string?> GatewayAddress { get; private set; } = null!;

        /// <summary>
        /// Notes for the Route
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// Organisation of the RouteTable
        /// </summary>
        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// RouteTable of the Route
        /// </summary>
        [Output("routeTableId")]
        public Output<string> RouteTableId { get; private set; } = null!;

        /// <summary>
        /// Target Gateway of the Route
        /// </summary>
        [Output("targetGateway")]
        public Output<string?> TargetGateway { get; private set; } = null!;

        /// <summary>
        /// Target NAT Gateway of the Route
        /// </summary>
        [Output("targetNatgateway")]
        public Output<string?> TargetNatgateway { get; private set; } = null!;


        /// <summary>
        /// Create a RouteTableRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteTableRoute(string name, RouteTableRouteArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/routeTableRoute:RouteTableRoute", name, args ?? new RouteTableRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteTableRoute(string name, Input<string> id, RouteTableRouteState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/routeTableRoute:RouteTableRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/sandervb2/pulumi-thalassa",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteTableRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteTableRoute Get(string name, Input<string> id, RouteTableRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteTableRoute(name, id, state, options);
        }
    }

    public sealed class RouteTableRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Destination CIDR of the Route
        /// </summary>
        [Input("destinationCidr", required: true)]
        public Input<string> DestinationCidr { get; set; } = null!;

        /// <summary>
        /// Gateway Address of the Route
        /// </summary>
        [Input("gatewayAddress")]
        public Input<string>? GatewayAddress { get; set; }

        /// <summary>
        /// Notes for the Route
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// Organisation of the RouteTable
        /// </summary>
        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// RouteTable of the Route
        /// </summary>
        [Input("routeTableId", required: true)]
        public Input<string> RouteTableId { get; set; } = null!;

        /// <summary>
        /// Target Gateway of the Route
        /// </summary>
        [Input("targetGateway")]
        public Input<string>? TargetGateway { get; set; }

        /// <summary>
        /// Target NAT Gateway of the Route
        /// </summary>
        [Input("targetNatgateway")]
        public Input<string>? TargetNatgateway { get; set; }

        public RouteTableRouteArgs()
        {
        }
        public static new RouteTableRouteArgs Empty => new RouteTableRouteArgs();
    }

    public sealed class RouteTableRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Destination CIDR of the Route
        /// </summary>
        [Input("destinationCidr")]
        public Input<string>? DestinationCidr { get; set; }

        /// <summary>
        /// Gateway Address of the Route
        /// </summary>
        [Input("gatewayAddress")]
        public Input<string>? GatewayAddress { get; set; }

        /// <summary>
        /// Notes for the Route
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// Organisation of the RouteTable
        /// </summary>
        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// RouteTable of the Route
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        /// <summary>
        /// Target Gateway of the Route
        /// </summary>
        [Input("targetGateway")]
        public Input<string>? TargetGateway { get; set; }

        /// <summary>
        /// Target NAT Gateway of the Route
        /// </summary>
        [Input("targetNatgateway")]
        public Input<string>? TargetNatgateway { get; set; }

        public RouteTableRouteState()
        {
        }
        public static new RouteTableRouteState Empty => new RouteTableRouteState();
    }
}
