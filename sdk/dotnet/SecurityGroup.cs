// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Thalassa.Vpc("example", new()
    ///     {
    ///         Name = "example-vpc",
    ///         Description = "Example VPC for security group",
    ///         Region = "nl-01",
    ///         Cidrs = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     // Create a security group
    ///     var exampleSecurityGroup = new Thalassa.SecurityGroup("example", new()
    ///     {
    ///         Name = "example-security-group",
    ///         Description = "Example security group for documentation",
    ///         VpcId = example.Id,
    ///         AllowSameGroupTraffic = false,
    ///         IngressRules = new[]
    ///         {
    ///             new Thalassa.Inputs.SecurityGroupIngressRuleArgs
    ///             {
    ///                 Name = "allow-http",
    ///                 IpVersion = "ipv4",
    ///                 Protocol = "tcp",
    ///                 Priority = 100,
    ///                 RemoteType = "address",
    ///                 RemoteAddress = "10.0.0.0/0",
    ///                 PortRangeMin = 80,
    ///                 PortRangeMax = 80,
    ///                 Policy = "allow",
    ///             },
    ///             new Thalassa.Inputs.SecurityGroupIngressRuleArgs
    ///             {
    ///                 Name = "allow-https",
    ///                 IpVersion = "ipv4",
    ///                 Protocol = "tcp",
    ///                 Priority = 101,
    ///                 RemoteType = "address",
    ///                 RemoteAddress = "0.0.0.0/0",
    ///                 PortRangeMin = 443,
    ///                 PortRangeMax = 443,
    ///                 Policy = "allow",
    ///             },
    ///         },
    ///         EgressRules = new[]
    ///         {
    ///             new Thalassa.Inputs.SecurityGroupEgressRuleArgs
    ///             {
    ///                 Name = "allow-all",
    ///                 IpVersion = "ipv4",
    ///                 Protocol = "all",
    ///                 Priority = 100,
    ///                 RemoteType = "address",
    ///                 RemoteAddress = "0.0.0.0/0",
    ///                 Policy = "allow",
    ///             },
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["securityGroupId"] = exampleSecurityGroup.Id,
    ///         ["securityGroupName"] = exampleSecurityGroup.Name,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/securityGroup:SecurityGroup")]
    public partial class SecurityGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Flag that indicates if the security group allows traffic between instances in the same security group
        /// </summary>
        [Output("allowSameGroupTraffic")]
        public Output<bool?> AllowSameGroupTraffic { get; private set; } = null!;

        /// <summary>
        /// Creation timestamp of the security group
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the security group
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of egress rules for the security group
        /// </summary>
        [Output("egressRules")]
        public Output<ImmutableArray<Outputs.SecurityGroupEgressRule>> EgressRules { get; private set; } = null!;

        /// <summary>
        /// Identity of the security group
        /// </summary>
        [Output("identity")]
        public Output<string> Identity { get; private set; } = null!;

        /// <summary>
        /// List of ingress rules for the security group
        /// </summary>
        [Output("ingressRules")]
        public Output<ImmutableArray<Outputs.SecurityGroupIngressRule>> IngressRules { get; private set; } = null!;

        /// <summary>
        /// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// Status of the security group
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Last update timestamp of the security group
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Identity of the VPC that the security group belongs to
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityGroup(string name, SecurityGroupArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/securityGroup:SecurityGroup", name, args ?? new SecurityGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityGroup(string name, Input<string> id, SecurityGroupState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/securityGroup:SecurityGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/sandervb2/pulumi-thalassa",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityGroup Get(string name, Input<string> id, SecurityGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityGroup(name, id, state, options);
        }
    }

    public sealed class SecurityGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag that indicates if the security group allows traffic between instances in the same security group
        /// </summary>
        [Input("allowSameGroupTraffic")]
        public Input<bool>? AllowSameGroupTraffic { get; set; }

        /// <summary>
        /// Description of the security group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("egressRules")]
        private InputList<Inputs.SecurityGroupEgressRuleArgs>? _egressRules;

        /// <summary>
        /// List of egress rules for the security group
        /// </summary>
        public InputList<Inputs.SecurityGroupEgressRuleArgs> EgressRules
        {
            get => _egressRules ?? (_egressRules = new InputList<Inputs.SecurityGroupEgressRuleArgs>());
            set => _egressRules = value;
        }

        [Input("ingressRules")]
        private InputList<Inputs.SecurityGroupIngressRuleArgs>? _ingressRules;

        /// <summary>
        /// List of ingress rules for the security group
        /// </summary>
        public InputList<Inputs.SecurityGroupIngressRuleArgs> IngressRules
        {
            get => _ingressRules ?? (_ingressRules = new InputList<Inputs.SecurityGroupIngressRuleArgs>());
            set => _ingressRules = value;
        }

        /// <summary>
        /// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Identity of the VPC that the security group belongs to
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public SecurityGroupArgs()
        {
        }
        public static new SecurityGroupArgs Empty => new SecurityGroupArgs();
    }

    public sealed class SecurityGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag that indicates if the security group allows traffic between instances in the same security group
        /// </summary>
        [Input("allowSameGroupTraffic")]
        public Input<bool>? AllowSameGroupTraffic { get; set; }

        /// <summary>
        /// Creation timestamp of the security group
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the security group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("egressRules")]
        private InputList<Inputs.SecurityGroupEgressRuleGetArgs>? _egressRules;

        /// <summary>
        /// List of egress rules for the security group
        /// </summary>
        public InputList<Inputs.SecurityGroupEgressRuleGetArgs> EgressRules
        {
            get => _egressRules ?? (_egressRules = new InputList<Inputs.SecurityGroupEgressRuleGetArgs>());
            set => _egressRules = value;
        }

        /// <summary>
        /// Identity of the security group
        /// </summary>
        [Input("identity")]
        public Input<string>? Identity { get; set; }

        [Input("ingressRules")]
        private InputList<Inputs.SecurityGroupIngressRuleGetArgs>? _ingressRules;

        /// <summary>
        /// List of ingress rules for the security group
        /// </summary>
        public InputList<Inputs.SecurityGroupIngressRuleGetArgs> IngressRules
        {
            get => _ingressRules ?? (_ingressRules = new InputList<Inputs.SecurityGroupIngressRuleGetArgs>());
            set => _ingressRules = value;
        }

        /// <summary>
        /// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Status of the security group
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Last update timestamp of the security group
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// Identity of the VPC that the security group belongs to
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public SecurityGroupState()
        {
        }
        public static new SecurityGroupState Empty => new SecurityGroupState();
    }
}
