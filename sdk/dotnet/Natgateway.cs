// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Create an NAT Gateway within a VPC
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a VPC for the NAT gateway
    ///     var example = new Thalassa.Vpc("example", new()
    ///     {
    ///         Name = "example-vpc",
    ///         Description = "Example VPC for NAT gateway",
    ///         Region = "nl-01",
    ///         Cidrs = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     // Create a subnet for the NAT gateway
    ///     var exampleSubnet = new Thalassa.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         Description = "Example subnet for NAT gateway",
    ///         VpcId = example.Id,
    ///         Cidr = "10.0.1.0/24",
    ///     });
    /// 
    ///     // Create a NAT gateway with all optional attributes
    ///     var exampleNatgateway = new Thalassa.Natgateway("example", new()
    ///     {
    ///         Name = "example-nat-gateway",
    ///         SubnetId = exampleSubnet.Id,
    ///         Description = "Example NAT gateway for documentation",
    ///         Labels = 
    ///         {
    ///             { "environment", "production" },
    ///             { "service", "networking" },
    ///             { "tier", "public" },
    ///         },
    ///         Annotations = 
    ///         {
    ///             { "cost-center", "cc-12345" },
    ///             { "backup-policy", "none" },
    ///             { "monitoring", "enabled" },
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["natGatewayId"] = exampleNatgateway.Id,
    ///         ["natGatewayEndpointIp"] = exampleNatgateway.EndpointIp,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/natgateway:Natgateway")]
    public partial class Natgateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for the NatGateway
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// A human readable description about the natGateway
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Endpoint IP of the NatGateway
        /// </summary>
        [Output("endpointIp")]
        public Output<string> EndpointIp { get; private set; } = null!;

        /// <summary>
        /// Labels for the NatGateway
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the NatGateway
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// List identities of security group that will be attached to the NAT Gateway
        /// </summary>
        [Output("securityGroupAttachments")]
        public Output<ImmutableArray<string>> SecurityGroupAttachments { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Status of the NatGateway
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Subnet of the NatGateway
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// V4 IP of the NatGateway
        /// </summary>
        [Output("v4Ip")]
        public Output<string> V4Ip { get; private set; } = null!;

        /// <summary>
        /// V6 IP of the NatGateway
        /// </summary>
        [Output("v6Ip")]
        public Output<string> V6Ip { get; private set; } = null!;

        /// <summary>
        /// VPC of the NatGateway
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a Natgateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Natgateway(string name, NatgatewayArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/natgateway:Natgateway", name, args ?? new NatgatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Natgateway(string name, Input<string> id, NatgatewayState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/natgateway:Natgateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/sandervb2/pulumi-thalassa",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Natgateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Natgateway Get(string name, Input<string> id, NatgatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new Natgateway(name, id, state, options);
        }
    }

    public sealed class NatgatewayArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the NatGateway
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// A human readable description about the natGateway
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the NatGateway
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the NatGateway
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        [Input("securityGroupAttachments")]
        private InputList<string>? _securityGroupAttachments;

        /// <summary>
        /// List identities of security group that will be attached to the NAT Gateway
        /// </summary>
        public InputList<string> SecurityGroupAttachments
        {
            get => _securityGroupAttachments ?? (_securityGroupAttachments = new InputList<string>());
            set => _securityGroupAttachments = value;
        }

        /// <summary>
        /// Subnet of the NatGateway
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public NatgatewayArgs()
        {
        }
        public static new NatgatewayArgs Empty => new NatgatewayArgs();
    }

    public sealed class NatgatewayState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the NatGateway
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// A human readable description about the natGateway
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Endpoint IP of the NatGateway
        /// </summary>
        [Input("endpointIp")]
        public Input<string>? EndpointIp { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the NatGateway
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the NatGateway
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        [Input("securityGroupAttachments")]
        private InputList<string>? _securityGroupAttachments;

        /// <summary>
        /// List identities of security group that will be attached to the NAT Gateway
        /// </summary>
        public InputList<string> SecurityGroupAttachments
        {
            get => _securityGroupAttachments ?? (_securityGroupAttachments = new InputList<string>());
            set => _securityGroupAttachments = value;
        }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Status of the NatGateway
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Subnet of the NatGateway
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// V4 IP of the NatGateway
        /// </summary>
        [Input("v4Ip")]
        public Input<string>? V4Ip { get; set; }

        /// <summary>
        /// V6 IP of the NatGateway
        /// </summary>
        [Input("v6Ip")]
        public Input<string>? V6Ip { get; set; }

        /// <summary>
        /// VPC of the NatGateway
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public NatgatewayState()
        {
        }
        public static new NatgatewayState Empty => new NatgatewayState();
    }
}
