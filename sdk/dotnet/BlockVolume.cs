// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Provides a Thalassa Cloud Block Volume resource. This can be used to create, manage, and attach a detachable storage device to a virtual machine instance.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a block volume with Thalassa default values
    ///     var example = new Thalassa.BlockVolume("example", new()
    ///     {
    ///         Name = "example-block-volume",
    ///         Description = "Example block volume for documentation",
    ///         Region = "nl-01",
    ///         VolumeType = "Block",
    ///         SizeGb = 20,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["blockVolumeId"] = example.Id,
    ///         ["blockVolumeName"] = example.Name,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/blockVolume:BlockVolume")]
    public partial class BlockVolume : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for the Block Volume
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Delete protection of the Block Volume
        /// </summary>
        [Output("deleteProtection")]
        public Output<bool?> DeleteProtection { get; private set; } = null!;

        /// <summary>
        /// A human readable description about the Block Volume
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Labels for the Block Volume
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the Block Volume
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// Region of the Block Volume.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// Size of the Block Volume in GB
        /// </summary>
        [Output("sizeGb")]
        public Output<int> SizeGb { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Status of the Block Volume
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Volume type of the Block Volume
        /// </summary>
        [Output("volumeType")]
        public Output<string> VolumeType { get; private set; } = null!;

        /// <summary>
        /// Wait until the Block Volume is ready
        /// </summary>
        [Output("waitUntilReady")]
        public Output<bool?> WaitUntilReady { get; private set; } = null!;


        /// <summary>
        /// Create a BlockVolume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BlockVolume(string name, BlockVolumeArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/blockVolume:BlockVolume", name, args ?? new BlockVolumeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BlockVolume(string name, Input<string> id, BlockVolumeState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/blockVolume:BlockVolume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/sandervb2/pulumi-thalassa",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BlockVolume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BlockVolume Get(string name, Input<string> id, BlockVolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new BlockVolume(name, id, state, options);
        }
    }

    public sealed class BlockVolumeArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Block Volume
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Delete protection of the Block Volume
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// A human readable description about the Block Volume
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Block Volume
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the Block Volume
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Region of the Block Volume.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Size of the Block Volume in GB
        /// </summary>
        [Input("sizeGb", required: true)]
        public Input<int> SizeGb { get; set; } = null!;

        /// <summary>
        /// Volume type of the Block Volume
        /// </summary>
        [Input("volumeType", required: true)]
        public Input<string> VolumeType { get; set; } = null!;

        /// <summary>
        /// Wait until the Block Volume is ready
        /// </summary>
        [Input("waitUntilReady")]
        public Input<bool>? WaitUntilReady { get; set; }

        public BlockVolumeArgs()
        {
        }
        public static new BlockVolumeArgs Empty => new BlockVolumeArgs();
    }

    public sealed class BlockVolumeState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Block Volume
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Delete protection of the Block Volume
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// A human readable description about the Block Volume
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Block Volume
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the Block Volume
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Region of the Block Volume.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Size of the Block Volume in GB
        /// </summary>
        [Input("sizeGb")]
        public Input<int>? SizeGb { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Status of the Block Volume
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Volume type of the Block Volume
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        /// <summary>
        /// Wait until the Block Volume is ready
        /// </summary>
        [Input("waitUntilReady")]
        public Input<bool>? WaitUntilReady { get; set; }

        public BlockVolumeState()
        {
        }
        public static new BlockVolumeState Empty => new BlockVolumeState();
    }
}
