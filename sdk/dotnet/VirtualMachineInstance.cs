// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Create an virtual machine instance within a subnet on the Thalassa Cloud platform
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a VPC for the virtual machine instance
    ///     var example = new Thalassa.Vpc("example", new()
    ///     {
    ///         Name = "example-vpc",
    ///         Description = "Example VPC for virtual machine instance",
    ///         Region = "nl-01",
    ///         Cidrs = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     // Create a subnet for the virtual machine instance
    ///     var exampleSubnet = new Thalassa.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         Description = "Example subnet for virtual machine instance",
    ///         VpcId = example.Id,
    ///         Cidr = "10.0.1.0/24",
    ///     });
    /// 
    ///     // Create a security group for the virtual machine instance
    ///     var exampleSecurityGroup = new Thalassa.SecurityGroup("example", new()
    ///     {
    ///         Name = "example-security-group",
    ///         Description = "Example security group for virtual machine instance",
    ///         VpcId = example.Id,
    ///     });
    /// 
    ///     // Create a cloud init template (optional)
    ///     var exampleCloudInitTemplate = new Thalassa.CloudInitTemplate("example", new()
    ///     {
    ///         Name = "example-cloud-init-template",
    ///         Content = @"#cloud-config
    /// package_update: true
    /// package_upgrade: true
    /// packages:
    ///   - nginx
    ///   - curl
    /// runcmd:
    ///   - systemctl enable nginx
    ///   - systemctl start nginx
    /// ",
    ///     });
    /// 
    ///     var block = Thalassa.GetVolumeType.Invoke(new()
    ///     {
    ///         Name = "Block",
    ///     });
    /// 
    ///     var ubuntu = Thalassa.GetMachineImage.Invoke(new()
    ///     {
    ///         Name = "ubuntu-22-04-01",
    ///     });
    /// 
    ///     // Create a virtual machine instance with Thalassa default values
    ///     var exampleVirtualMachineInstance = new Thalassa.VirtualMachineInstance("example", new()
    ///     {
    ///         Name = "example-instance",
    ///         SubnetId = exampleSubnet.Id,
    ///         MachineType = "pgp-small",
    ///         MachineImage = ubuntu.Apply(getMachineImageResult =&gt; getMachineImageResult.Name),
    ///         AvailabilityZone = "nl-01a",
    ///         RootVolumeSizeGb = 20,
    ///         RootVolumeType = block.Apply(getVolumeTypeResult =&gt; getVolumeTypeResult.Id),
    ///         CloudInitTemplateId = exampleCloudInitTemplate.Id,
    ///     });
    /// 
    ///     // Create a load balancer for the virtual machine instance
    ///     var exampleLoadbalancer = new Thalassa.Loadbalancer("example", new()
    ///     {
    ///         Name = "example-lb",
    ///         Region = "nl-01",
    ///         Description = "Example load balancer for virtual machine instance",
    ///         SubnetId = exampleSubnet.Id,
    ///     });
    /// 
    ///     // Create a load balancer target group
    ///     var exampleTargetGroup = new Thalassa.TargetGroup("example", new()
    ///     {
    ///         Name = "example-lb-target-group",
    ///         Description = "Example load balancer target group for virtual machine instance",
    ///         VpcId = example.Id,
    ///         Protocol = "tcp",
    ///         Port = 22,
    ///     });
    /// 
    ///     // Create a load balancer listener
    ///     var exampleLoadbalancerListener = new Thalassa.LoadbalancerListener("example", new()
    ///     {
    ///         Name = "example-lb-listener",
    ///         Description = "Example load balancer listener for virtual machine instance",
    ///         LoadbalancerId = exampleLoadbalancer.Id,
    ///         Protocol = "tcp",
    ///         Port = 22,
    ///         TargetGroupId = exampleTargetGroup.Id,
    ///     });
    /// 
    ///     var exampleTargetGroupAttachment = new Thalassa.TargetGroupAttachment("example", new()
    ///     {
    ///         TargetGroupId = exampleTargetGroup.Id,
    ///         VmiId = exampleVirtualMachineInstance.Id,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["instanceId"] = exampleVirtualMachineInstance.Id,
    ///         ["instanceName"] = exampleVirtualMachineInstance.Name,
    ///         ["loadBalancerIp"] = exampleLoadbalancer.IpAddress,
    ///         ["loadBalancerPort"] = exampleLoadbalancerListener.Port,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/virtualMachineInstance:VirtualMachineInstance")]
    public partial class VirtualMachineInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for the virtual machine instance
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Attached volume ids of the virtual machine instance
        /// </summary>
        [Output("attachedVolumeIds")]
        public Output<ImmutableArray<string>> AttachedVolumeIds { get; private set; } = null!;

        /// <summary>
        /// Availability zone of the virtual machine instance
        /// </summary>
        [Output("availabilityZone")]
        public Output<string?> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// Cloud init of the virtual machine instance
        /// </summary>
        [Output("cloudInit")]
        public Output<string?> CloudInit { get; private set; } = null!;

        /// <summary>
        /// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        /// </summary>
        [Output("cloudInitTemplateId")]
        public Output<string?> CloudInitTemplateId { get; private set; } = null!;

        /// <summary>
        /// Delete protection of the virtual machine instance
        /// </summary>
        [Output("deleteProtection")]
        public Output<bool?> DeleteProtection { get; private set; } = null!;

        /// <summary>
        /// A human readable description about the virtual machine instance
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// IP addresses of the virtual machine instance
        /// </summary>
        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// Labels for the virtual machine instance
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Machine image of the virtual machine instance
        /// </summary>
        [Output("machineImage")]
        public Output<string> MachineImage { get; private set; } = null!;

        /// <summary>
        /// Machine type of the virtual machine instance
        /// </summary>
        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        /// <summary>
        /// Name of the Virtual Machine Instance
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        /// </summary>
        [Output("rootVolumeId")]
        public Output<string> RootVolumeId { get; private set; } = null!;

        /// <summary>
        /// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        /// </summary>
        [Output("rootVolumeSizeGb")]
        public Output<int?> RootVolumeSizeGb { get; private set; } = null!;

        /// <summary>
        /// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        /// </summary>
        [Output("rootVolumeType")]
        public Output<string?> RootVolumeType { get; private set; } = null!;

        /// <summary>
        /// List identities of security group that will be attached to the Virtual Machine Instance
        /// </summary>
        [Output("securityGroupAttachments")]
        public Output<ImmutableArray<string>> SecurityGroupAttachments { get; private set; } = null!;

        /// <summary>
        /// Slug of the Virtual Machine Instance
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Status of the virtual machine instance
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Subnet of the Virtual Machine Instance
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachineInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachineInstance(string name, VirtualMachineInstanceArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/virtualMachineInstance:VirtualMachineInstance", name, args ?? new VirtualMachineInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachineInstance(string name, Input<string> id, VirtualMachineInstanceState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/virtualMachineInstance:VirtualMachineInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachineInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachineInstance Get(string name, Input<string> id, VirtualMachineInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualMachineInstance(name, id, state, options);
        }
    }

    public sealed class VirtualMachineInstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the virtual machine instance
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Availability zone of the virtual machine instance
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// Cloud init of the virtual machine instance
        /// </summary>
        [Input("cloudInit")]
        public Input<string>? CloudInit { get; set; }

        /// <summary>
        /// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        /// </summary>
        [Input("cloudInitTemplateId")]
        public Input<string>? CloudInitTemplateId { get; set; }

        /// <summary>
        /// Delete protection of the virtual machine instance
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// A human readable description about the virtual machine instance
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the virtual machine instance
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Machine image of the virtual machine instance
        /// </summary>
        [Input("machineImage", required: true)]
        public Input<string> MachineImage { get; set; } = null!;

        /// <summary>
        /// Machine type of the virtual machine instance
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// Name of the Virtual Machine Instance
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        /// </summary>
        [Input("rootVolumeId")]
        public Input<string>? RootVolumeId { get; set; }

        /// <summary>
        /// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        /// </summary>
        [Input("rootVolumeSizeGb")]
        public Input<int>? RootVolumeSizeGb { get; set; }

        /// <summary>
        /// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        /// </summary>
        [Input("rootVolumeType")]
        public Input<string>? RootVolumeType { get; set; }

        [Input("securityGroupAttachments")]
        private InputList<string>? _securityGroupAttachments;

        /// <summary>
        /// List identities of security group that will be attached to the Virtual Machine Instance
        /// </summary>
        public InputList<string> SecurityGroupAttachments
        {
            get => _securityGroupAttachments ?? (_securityGroupAttachments = new InputList<string>());
            set => _securityGroupAttachments = value;
        }

        /// <summary>
        /// Subnet of the Virtual Machine Instance
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public VirtualMachineInstanceArgs()
        {
        }
        public static new VirtualMachineInstanceArgs Empty => new VirtualMachineInstanceArgs();
    }

    public sealed class VirtualMachineInstanceState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the virtual machine instance
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        [Input("attachedVolumeIds")]
        private InputList<string>? _attachedVolumeIds;

        /// <summary>
        /// Attached volume ids of the virtual machine instance
        /// </summary>
        public InputList<string> AttachedVolumeIds
        {
            get => _attachedVolumeIds ?? (_attachedVolumeIds = new InputList<string>());
            set => _attachedVolumeIds = value;
        }

        /// <summary>
        /// Availability zone of the virtual machine instance
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// Cloud init of the virtual machine instance
        /// </summary>
        [Input("cloudInit")]
        public Input<string>? CloudInit { get; set; }

        /// <summary>
        /// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        /// </summary>
        [Input("cloudInitTemplateId")]
        public Input<string>? CloudInitTemplateId { get; set; }

        /// <summary>
        /// Delete protection of the virtual machine instance
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// A human readable description about the virtual machine instance
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// IP addresses of the virtual machine instance
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the virtual machine instance
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Machine image of the virtual machine instance
        /// </summary>
        [Input("machineImage")]
        public Input<string>? MachineImage { get; set; }

        /// <summary>
        /// Machine type of the virtual machine instance
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Name of the Virtual Machine Instance
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        /// </summary>
        [Input("rootVolumeId")]
        public Input<string>? RootVolumeId { get; set; }

        /// <summary>
        /// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        /// </summary>
        [Input("rootVolumeSizeGb")]
        public Input<int>? RootVolumeSizeGb { get; set; }

        /// <summary>
        /// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        /// </summary>
        [Input("rootVolumeType")]
        public Input<string>? RootVolumeType { get; set; }

        [Input("securityGroupAttachments")]
        private InputList<string>? _securityGroupAttachments;

        /// <summary>
        /// List identities of security group that will be attached to the Virtual Machine Instance
        /// </summary>
        public InputList<string> SecurityGroupAttachments
        {
            get => _securityGroupAttachments ?? (_securityGroupAttachments = new InputList<string>());
            set => _securityGroupAttachments = value;
        }

        /// <summary>
        /// Slug of the Virtual Machine Instance
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Status of the virtual machine instance
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Subnet of the Virtual Machine Instance
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public VirtualMachineInstanceState()
        {
        }
        public static new VirtualMachineInstanceState Empty => new VirtualMachineInstanceState();
    }
}
