// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Create an DB Cluster
    /// </summary>
    [ThalassaResourceType("thalassa:index/dbaasDbCluster:DbaasDbCluster")]
    public partial class DbaasDbCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Amount of storage allocated to the cluster in GB
        /// </summary>
        [Output("allocatedStorage")]
        public Output<int> AllocatedStorage { get; private set; } = null!;

        /// <summary>
        /// Annotations of the DB Cluster
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Flag indicating if the cluster should automatically upgrade to the latest minor version
        /// </summary>
        [Output("autoMinorVersionUpgrade")]
        public Output<bool?> AutoMinorVersionUpgrade { get; private set; } = null!;

        /// <summary>
        /// Database instance type of the DB Cluster
        /// </summary>
        [Output("databaseInstanceType")]
        public Output<string> DatabaseInstanceType { get; private set; } = null!;

        /// <summary>
        /// Flag indicating if the cluster should be protected from deletion
        /// </summary>
        [Output("deleteProtection")]
        public Output<bool?> DeleteProtection { get; private set; } = null!;

        /// <summary>
        /// Description of the DB Cluster
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the cluster endpoint
        /// </summary>
        [Output("endpointIpv4")]
        public Output<string> EndpointIpv4 { get; private set; } = null!;

        /// <summary>
        /// IPv6 address of the cluster endpoint
        /// </summary>
        [Output("endpointIpv6")]
        public Output<string> EndpointIpv6 { get; private set; } = null!;

        /// <summary>
        /// Database engine of the cluster
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// Version of the database engine
        /// </summary>
        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// Map of init db parameters
        /// </summary>
        [Output("initDb")]
        public Output<ImmutableDictionary<string, string>?> InitDb { get; private set; } = null!;

        /// <summary>
        /// Labels of the DB Cluster
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the DB Cluster
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// Map of parameter name to database engine specific parameter value
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// Port of the cluster endpoint
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Number of instances in the cluster
        /// </summary>
        [Output("replicas")]
        public Output<int?> Replicas { get; private set; } = null!;

        /// <summary>
        /// Identity of the backup to restore from
        /// </summary>
        [Output("restoreFromBackupIdentity")]
        public Output<string?> RestoreFromBackupIdentity { get; private set; } = null!;

        /// <summary>
        /// List of security groups associated with the cluster
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// Status of the cluster
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Subnet of the DB Cluster
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Storage type used to determine the size of the cluster storage
        /// </summary>
        [Output("volumeTypeClass")]
        public Output<string> VolumeTypeClass { get; private set; } = null!;


        /// <summary>
        /// Create a DbaasDbCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbaasDbCluster(string name, DbaasDbClusterArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/dbaasDbCluster:DbaasDbCluster", name, args ?? new DbaasDbClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbaasDbCluster(string name, Input<string> id, DbaasDbClusterState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/dbaasDbCluster:DbaasDbCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/sandervb2/pulumi-thalassa",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbaasDbCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbaasDbCluster Get(string name, Input<string> id, DbaasDbClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new DbaasDbCluster(name, id, state, options);
        }
    }

    public sealed class DbaasDbClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amount of storage allocated to the cluster in GB
        /// </summary>
        [Input("allocatedStorage", required: true)]
        public Input<int> AllocatedStorage { get; set; } = null!;

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations of the DB Cluster
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Flag indicating if the cluster should automatically upgrade to the latest minor version
        /// </summary>
        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        /// <summary>
        /// Database instance type of the DB Cluster
        /// </summary>
        [Input("databaseInstanceType", required: true)]
        public Input<string> DatabaseInstanceType { get; set; } = null!;

        /// <summary>
        /// Flag indicating if the cluster should be protected from deletion
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// Description of the DB Cluster
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Database engine of the cluster
        /// </summary>
        [Input("engine", required: true)]
        public Input<string> Engine { get; set; } = null!;

        /// <summary>
        /// Version of the database engine
        /// </summary>
        [Input("engineVersion", required: true)]
        public Input<string> EngineVersion { get; set; } = null!;

        [Input("initDb")]
        private InputMap<string>? _initDb;

        /// <summary>
        /// Map of init db parameters
        /// </summary>
        public InputMap<string> InitDb
        {
            get => _initDb ?? (_initDb = new InputMap<string>());
            set => _initDb = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels of the DB Cluster
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the DB Cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// Map of parameter name to database engine specific parameter value
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// Number of instances in the cluster
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        /// <summary>
        /// Identity of the backup to restore from
        /// </summary>
        [Input("restoreFromBackupIdentity")]
        public Input<string>? RestoreFromBackupIdentity { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// List of security groups associated with the cluster
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Subnet of the DB Cluster
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// Storage type used to determine the size of the cluster storage
        /// </summary>
        [Input("volumeTypeClass", required: true)]
        public Input<string> VolumeTypeClass { get; set; } = null!;

        public DbaasDbClusterArgs()
        {
        }
        public static new DbaasDbClusterArgs Empty => new DbaasDbClusterArgs();
    }

    public sealed class DbaasDbClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amount of storage allocated to the cluster in GB
        /// </summary>
        [Input("allocatedStorage")]
        public Input<int>? AllocatedStorage { get; set; }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations of the DB Cluster
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Flag indicating if the cluster should automatically upgrade to the latest minor version
        /// </summary>
        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        /// <summary>
        /// Database instance type of the DB Cluster
        /// </summary>
        [Input("databaseInstanceType")]
        public Input<string>? DatabaseInstanceType { get; set; }

        /// <summary>
        /// Flag indicating if the cluster should be protected from deletion
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        /// <summary>
        /// Description of the DB Cluster
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// IPv4 address of the cluster endpoint
        /// </summary>
        [Input("endpointIpv4")]
        public Input<string>? EndpointIpv4 { get; set; }

        /// <summary>
        /// IPv6 address of the cluster endpoint
        /// </summary>
        [Input("endpointIpv6")]
        public Input<string>? EndpointIpv6 { get; set; }

        /// <summary>
        /// Database engine of the cluster
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// Version of the database engine
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("initDb")]
        private InputMap<string>? _initDb;

        /// <summary>
        /// Map of init db parameters
        /// </summary>
        public InputMap<string> InitDb
        {
            get => _initDb ?? (_initDb = new InputMap<string>());
            set => _initDb = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels of the DB Cluster
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the DB Cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// Map of parameter name to database engine specific parameter value
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// Port of the cluster endpoint
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Number of instances in the cluster
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        /// <summary>
        /// Identity of the backup to restore from
        /// </summary>
        [Input("restoreFromBackupIdentity")]
        public Input<string>? RestoreFromBackupIdentity { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// List of security groups associated with the cluster
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Status of the cluster
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Subnet of the DB Cluster
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// Storage type used to determine the size of the cluster storage
        /// </summary>
        [Input("volumeTypeClass")]
        public Input<string>? VolumeTypeClass { get; set; }

        public DbaasDbClusterState()
        {
        }
        public static new DbaasDbClusterState Empty => new DbaasDbClusterState();
    }
}
