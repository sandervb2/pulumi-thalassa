// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    public static class GetVolumeType
    {
        /// <summary>
        /// Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.
        /// </summary>
        public static Task<GetVolumeTypeResult> InvokeAsync(GetVolumeTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeTypeResult>("thalassa:index/getVolumeType:getVolumeType", args ?? new GetVolumeTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.
        /// </summary>
        public static Output<GetVolumeTypeResult> Invoke(GetVolumeTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeTypeResult>("thalassa:index/getVolumeType:getVolumeType", args ?? new GetVolumeTypeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.
        /// </summary>
        public static Output<GetVolumeTypeResult> Invoke(GetVolumeTypeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeTypeResult>("thalassa:index/getVolumeType:getVolumeType", args ?? new GetVolumeTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the volume type.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("organisationId")]
        public string? OrganisationId { get; set; }

        public GetVolumeTypeArgs()
        {
        }
        public static new GetVolumeTypeArgs Empty => new GetVolumeTypeArgs();
    }

    public sealed class GetVolumeTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the volume type.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        public GetVolumeTypeInvokeArgs()
        {
        }
        public static new GetVolumeTypeInvokeArgs Empty => new GetVolumeTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeTypeResult
    {
        /// <summary>
        /// Whether the volume type allows resizing. If false, the volume size cannot be changed after creation.
        /// </summary>
        public readonly bool AllowResize;
        /// <summary>
        /// The description of the volume type.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the volume type.
        /// </summary>
        public readonly string Name;
        public readonly string? OrganisationId;
        /// <summary>
        /// The storage type of the volume type. For example: 'block'.
        /// </summary>
        public readonly string StorageType;

        [OutputConstructor]
        private GetVolumeTypeResult(
            bool allowResize,

            string description,

            string id,

            string name,

            string? organisationId,

            string storageType)
        {
            AllowResize = allowResize;
            Description = description;
            Id = id;
            Name = name;
            OrganisationId = organisationId;
            StorageType = storageType;
        }
    }
}
