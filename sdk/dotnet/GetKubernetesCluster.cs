// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    public static class GetKubernetesCluster
    {
        /// <summary>
        /// Get an Kubernetes cluster
        /// </summary>
        public static Task<GetKubernetesClusterResult> InvokeAsync(GetKubernetesClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesClusterResult>("thalassa:index/getKubernetesCluster:getKubernetesCluster", args ?? new GetKubernetesClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Get an Kubernetes cluster
        /// </summary>
        public static Output<GetKubernetesClusterResult> Invoke(GetKubernetesClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubernetesClusterResult>("thalassa:index/getKubernetesCluster:getKubernetesCluster", args ?? new GetKubernetesClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an Kubernetes cluster
        /// </summary>
        public static Output<GetKubernetesClusterResult> Invoke(GetKubernetesClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubernetesClusterResult>("thalassa:index/getKubernetesCluster:getKubernetesCluster", args ?? new GetKubernetesClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubernetesClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kubernetes version.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Organisation of the Kubernetes Cluster
        /// </summary>
        [Input("organisationId", required: true)]
        public string OrganisationId { get; set; } = null!;

        public GetKubernetesClusterArgs()
        {
        }
        public static new GetKubernetesClusterArgs Empty => new GetKubernetesClusterArgs();
    }

    public sealed class GetKubernetesClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kubernetes version.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Organisation of the Kubernetes Cluster
        /// </summary>
        [Input("organisationId", required: true)]
        public Input<string> OrganisationId { get; set; } = null!;

        public GetKubernetesClusterInvokeArgs()
        {
        }
        public static new GetKubernetesClusterInvokeArgs Empty => new GetKubernetesClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubernetesClusterResult
    {
        /// <summary>
        /// Annotations for the Kubernetes Cluster
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// API server ACLs for the Kubernetes Cluster
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterApiServerAclResult> ApiServerAcls;
        /// <summary>
        /// Audit log profile of the Kubernetes Cluster
        /// </summary>
        public readonly string AuditLogProfile;
        /// <summary>
        /// Auto upgrade policy of the Kubernetes Cluster
        /// </summary>
        public readonly string AutoUpgradePolicy;
        /// <summary>
        /// Cluster type of the Kubernetes Cluster
        /// </summary>
        public readonly string ClusterType;
        /// <summary>
        /// Cluster version of the Kubernetes Cluster
        /// </summary>
        public readonly string ClusterVersion;
        /// <summary>
        /// Default network policy of the Kubernetes Cluster
        /// </summary>
        public readonly string DefaultNetworkPolicy;
        /// <summary>
        /// Delete protection of the Kubernetes Cluster
        /// </summary>
        public readonly bool DeleteProtection;
        /// <summary>
        /// A human readable description about the Kubernetes Cluster
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kubernetes API server CA certificate of the Kubernetes Cluster
        /// </summary>
        public readonly string KubernetesApiServerCaCertificate;
        /// <summary>
        /// Kubernetes API server endpoint of the Kubernetes Cluster
        /// </summary>
        public readonly string KubernetesApiServerEndpoint;
        /// <summary>
        /// Labels for the Kubernetes Cluster
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        /// </summary>
        public readonly int MaintenanceDay;
        /// <summary>
        /// Time of day when the cluster will be upgraded in minutes from midnight
        /// </summary>
        public readonly int MaintenanceStartAt;
        /// <summary>
        /// The name of the Kubernetes version.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// CNI of the Kubernetes Cluster
        /// </summary>
        public readonly string NetworkingCni;
        /// <summary>
        /// Pod CIDR of the Kubernetes Cluster
        /// </summary>
        public readonly string NetworkingPodCidr;
        /// <summary>
        /// Service CIDR of the Kubernetes Cluster
        /// </summary>
        public readonly string NetworkingServiceCidr;
        /// <summary>
        /// Organisation of the Kubernetes Cluster
        /// </summary>
        public readonly string OrganisationId;
        /// <summary>
        /// Pod security standards profile of the Kubernetes Cluster
        /// </summary>
        public readonly string PodSecurityStandardsProfile;
        /// <summary>
        /// Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The slug of the Kubernetes version.
        /// </summary>
        public readonly string Slug;
        /// <summary>
        /// Subnet of the Kubernetes Cluster.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// VPC of the Kubernetes Cluster.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetKubernetesClusterResult(
            ImmutableDictionary<string, string> annotations,

            ImmutableArray<Outputs.GetKubernetesClusterApiServerAclResult> apiServerAcls,

            string auditLogProfile,

            string autoUpgradePolicy,

            string clusterType,

            string clusterVersion,

            string defaultNetworkPolicy,

            bool deleteProtection,

            string description,

            string id,

            string kubernetesApiServerCaCertificate,

            string kubernetesApiServerEndpoint,

            ImmutableDictionary<string, string> labels,

            int maintenanceDay,

            int maintenanceStartAt,

            string name,

            string networkingCni,

            string networkingPodCidr,

            string networkingServiceCidr,

            string organisationId,

            string podSecurityStandardsProfile,

            string region,

            string slug,

            string subnetId,

            string vpcId)
        {
            Annotations = annotations;
            ApiServerAcls = apiServerAcls;
            AuditLogProfile = auditLogProfile;
            AutoUpgradePolicy = autoUpgradePolicy;
            ClusterType = clusterType;
            ClusterVersion = clusterVersion;
            DefaultNetworkPolicy = defaultNetworkPolicy;
            DeleteProtection = deleteProtection;
            Description = description;
            Id = id;
            KubernetesApiServerCaCertificate = kubernetesApiServerCaCertificate;
            KubernetesApiServerEndpoint = kubernetesApiServerEndpoint;
            Labels = labels;
            MaintenanceDay = maintenanceDay;
            MaintenanceStartAt = maintenanceStartAt;
            Name = name;
            NetworkingCni = networkingCni;
            NetworkingPodCidr = networkingPodCidr;
            NetworkingServiceCidr = networkingServiceCidr;
            OrganisationId = organisationId;
            PodSecurityStandardsProfile = podSecurityStandardsProfile;
            Region = region;
            Slug = slug;
            SubnetId = subnetId;
            VpcId = vpcId;
        }
    }
}
