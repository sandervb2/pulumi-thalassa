// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Create and manage an object storage bucket
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a basic object storage bucket
    ///     var basic = new Thalassa.ObjectstorageBucket("basic", new()
    ///     {
    ///         Name = "my-basic-bucket",
    ///         Region = "nl-01",
    ///     });
    /// 
    ///     // Create a public object storage bucket
    ///     var @public = new Thalassa.ObjectstorageBucket("public", new()
    ///     {
    ///         Name = "my-public-bucket",
    ///         Region = "nl-01",
    ///         Public = true,
    ///     });
    /// 
    ///     // Create a bucket with a custom policy
    ///     var withPolicy = new Thalassa.ObjectstorageBucket("with_policy", new()
    ///     {
    ///         Name = "my-policy-bucket",
    ///         Region = "nl-01",
    ///         Public = false,
    ///         Policy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Sid"] = "AllowReadAccess",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Thalassa"] = "*",
    ///                     },
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "s3:GetObject",
    ///                     },
    ///                     ["Resource"] = new[]
    ///                     {
    ///                         "arn:thalassa:s3:::my-policy-bucket/*",
    ///                     },
    ///                     ["Condition"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["StringEquals"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["thalassa:User"] = "u-exampleuserid",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["basicBucketId"] = basic.Id,
    ///         ["basicBucketName"] = basic.Name,
    ///         ["basicBucketEndpoint"] = basic.Endpoint,
    ///         ["publicBucketId"] = @public.Id,
    ///         ["publicBucketName"] = @public.Name,
    ///         ["policyBucketId"] = withPolicy.Id,
    ///         ["policyBucketName"] = withPolicy.Name,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/objectstorageBucket:ObjectstorageBucket")]
    public partial class ObjectstorageBucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The endpoint URL for the bucket
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Name of the bucket
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// The bucket policy as a JSON string
        /// </summary>
        [Output("policy")]
        public Output<string?> Policy { get; private set; } = null!;

        /// <summary>
        /// Whether the bucket is publicly accessible
        /// </summary>
        [Output("public")]
        public Output<bool?> Public { get; private set; } = null!;

        /// <summary>
        /// Region of the bucket
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Status of the bucket
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a ObjectstorageBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObjectstorageBucket(string name, ObjectstorageBucketArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/objectstorageBucket:ObjectstorageBucket", name, args ?? new ObjectstorageBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObjectstorageBucket(string name, Input<string> id, ObjectstorageBucketState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/objectstorageBucket:ObjectstorageBucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObjectstorageBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObjectstorageBucket Get(string name, Input<string> id, ObjectstorageBucketState? state = null, CustomResourceOptions? options = null)
        {
            return new ObjectstorageBucket(name, id, state, options);
        }
    }

    public sealed class ObjectstorageBucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the bucket
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// The bucket policy as a JSON string
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// Whether the bucket is publicly accessible
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// Region of the bucket
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public ObjectstorageBucketArgs()
        {
        }
        public static new ObjectstorageBucketArgs Empty => new ObjectstorageBucketArgs();
    }

    public sealed class ObjectstorageBucketState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The endpoint URL for the bucket
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Name of the bucket
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// The bucket policy as a JSON string
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// Whether the bucket is publicly accessible
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// Region of the bucket
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Status of the bucket
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ObjectstorageBucketState()
        {
        }
        public static new ObjectstorageBucketState Empty => new ObjectstorageBucketState();
    }
}
