// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Create a listener for a loadbalancer
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Thalassa = Pulumi.Thalassa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a VPC for the load balancer
    ///     var example = new Thalassa.Vpc("example", new()
    ///     {
    ///         Name = "example-vpc",
    ///         Description = "Example VPC for load balancer listener",
    ///         Region = "nl-01",
    ///         Cidrs = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     // Create a subnet for the loadbalancer
    ///     var exampleSubnet = new Thalassa.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         Description = "Example subnet for loadbalancer",
    ///         VpcId = example.Id,
    ///         Cidr = "10.0.1.0/24",
    ///     });
    /// 
    ///     // Create a load balancer
    ///     var exampleLoadbalancer = new Thalassa.Loadbalancer("example", new()
    ///     {
    ///         Name = "example-loadbalancer",
    ///         Description = "Example load balancer for listener",
    ///         SubnetId = exampleSubnet.Id,
    ///         Region = "nl-01",
    ///     });
    /// 
    ///     // Create a target group for the listener
    ///     var exampleTargetGroup = new Thalassa.TargetGroup("example", new()
    ///     {
    ///         Name = "example-target-group",
    ///         Description = "Example target group for listener",
    ///         VpcId = example.Id,
    ///         Protocol = "tcp",
    ///         Port = 80,
    ///     });
    /// 
    ///     // Create a load balancer listener with all required attributes
    ///     var exampleLoadbalancerListener = new Thalassa.LoadbalancerListener("example", new()
    ///     {
    ///         LoadbalancerId = exampleLoadbalancer.Id,
    ///         Name = "example-listener",
    ///         Protocol = "tcp",
    ///         Port = 80,
    ///         TargetGroupId = exampleTargetGroup.Id,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["listenerId"] = exampleLoadbalancerListener.Id,
    ///         ["listenerName"] = exampleLoadbalancerListener.Name,
    ///     };
    /// });
    /// ```
    /// </summary>
    [ThalassaResourceType("thalassa:index/loadbalancerListener:LoadbalancerListener")]
    public partial class LoadbalancerListener : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        /// </summary>
        [Output("allowedSources")]
        public Output<ImmutableArray<string>> AllowedSources { get; private set; } = null!;

        /// <summary>
        /// Annotations for the Loadbalancer Listener
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// The amount of seconds used for configuring the idle connection timeout on a listener
        /// </summary>
        [Output("connectionIdleTimeout")]
        public Output<int?> ConnectionIdleTimeout { get; private set; } = null!;

        /// <summary>
        /// A human readable description about the loadbalancer listener
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Labels for the Loadbalancer Listener
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The ID of the loadbalancer to create the listener on
        /// </summary>
        [Output("loadbalancerId")]
        public Output<string> LoadbalancerId { get; private set; } = null!;

        /// <summary>
        /// The maximum number of connections that the listener can handle
        /// </summary>
        [Output("maxConnections")]
        public Output<int?> MaxConnections { get; private set; } = null!;

        /// <summary>
        /// Name of the Loadbalancer Listener
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// The port the listener is listening on
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The protocol the listener is using
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// The ID of the target group to attach to the listener
        /// </summary>
        [Output("targetGroupId")]
        public Output<string> TargetGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a LoadbalancerListener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadbalancerListener(string name, LoadbalancerListenerArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/loadbalancerListener:LoadbalancerListener", name, args ?? new LoadbalancerListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadbalancerListener(string name, Input<string> id, LoadbalancerListenerState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/loadbalancerListener:LoadbalancerListener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadbalancerListener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadbalancerListener Get(string name, Input<string> id, LoadbalancerListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadbalancerListener(name, id, state, options);
        }
    }

    public sealed class LoadbalancerListenerArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedSources")]
        private InputList<string>? _allowedSources;

        /// <summary>
        /// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        /// </summary>
        public InputList<string> AllowedSources
        {
            get => _allowedSources ?? (_allowedSources = new InputList<string>());
            set => _allowedSources = value;
        }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Loadbalancer Listener
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The amount of seconds used for configuring the idle connection timeout on a listener
        /// </summary>
        [Input("connectionIdleTimeout")]
        public Input<int>? ConnectionIdleTimeout { get; set; }

        /// <summary>
        /// A human readable description about the loadbalancer listener
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Loadbalancer Listener
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The ID of the loadbalancer to create the listener on
        /// </summary>
        [Input("loadbalancerId", required: true)]
        public Input<string> LoadbalancerId { get; set; } = null!;

        /// <summary>
        /// The maximum number of connections that the listener can handle
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// Name of the Loadbalancer Listener
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// The port the listener is listening on
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The protocol the listener is using
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The ID of the target group to attach to the listener
        /// </summary>
        [Input("targetGroupId", required: true)]
        public Input<string> TargetGroupId { get; set; } = null!;

        public LoadbalancerListenerArgs()
        {
        }
        public static new LoadbalancerListenerArgs Empty => new LoadbalancerListenerArgs();
    }

    public sealed class LoadbalancerListenerState : global::Pulumi.ResourceArgs
    {
        [Input("allowedSources")]
        private InputList<string>? _allowedSources;

        /// <summary>
        /// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        /// </summary>
        public InputList<string> AllowedSources
        {
            get => _allowedSources ?? (_allowedSources = new InputList<string>());
            set => _allowedSources = value;
        }

        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Loadbalancer Listener
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The amount of seconds used for configuring the idle connection timeout on a listener
        /// </summary>
        [Input("connectionIdleTimeout")]
        public Input<int>? ConnectionIdleTimeout { get; set; }

        /// <summary>
        /// A human readable description about the loadbalancer listener
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Loadbalancer Listener
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The ID of the loadbalancer to create the listener on
        /// </summary>
        [Input("loadbalancerId")]
        public Input<string>? LoadbalancerId { get; set; }

        /// <summary>
        /// The maximum number of connections that the listener can handle
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// Name of the Loadbalancer Listener
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// The port the listener is listening on
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol the listener is using
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// The ID of the target group to attach to the listener
        /// </summary>
        [Input("targetGroupId")]
        public Input<string>? TargetGroupId { get; set; }

        public LoadbalancerListenerState()
        {
        }
        public static new LoadbalancerListenerState Empty => new LoadbalancerListenerState();
    }
}
