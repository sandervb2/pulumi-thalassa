// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    public static class GetIamRole
    {
        /// <summary>
        /// Get an organisation role
        /// </summary>
        public static Task<GetIamRoleResult> InvokeAsync(GetIamRoleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIamRoleResult>("thalassa:index/getIamRole:getIamRole", args ?? new GetIamRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Get an organisation role
        /// </summary>
        public static Output<GetIamRoleResult> Invoke(GetIamRoleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamRoleResult>("thalassa:index/getIamRole:getIamRole", args ?? new GetIamRoleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an organisation role
        /// </summary>
        public static Output<GetIamRoleResult> Invoke(GetIamRoleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetIamRoleResult>("thalassa:index/getIamRole:getIamRole", args ?? new GetIamRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIamRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human readable description about the role
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Name of the Organisation Role
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("organisationId")]
        public string? OrganisationId { get; set; }

        /// <summary>
        /// Slug of the Organisation Role
        /// </summary>
        [Input("slug")]
        public string? Slug { get; set; }

        public GetIamRoleArgs()
        {
        }
        public static new GetIamRoleArgs Empty => new GetIamRoleArgs();
    }

    public sealed class GetIamRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A human readable description about the role
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the Organisation Role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Slug of the Organisation Role
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public GetIamRoleInvokeArgs()
        {
        }
        public static new GetIamRoleInvokeArgs Empty => new GetIamRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetIamRoleResult
    {
        /// <summary>
        /// Annotations for the Organisation Role
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Creation timestamp of the Organisation Role
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// A human readable description about the role
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Identity of the Organisation Role
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Labels for the Organisation Role
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Name of the Organisation Role
        /// </summary>
        public readonly string? Name;
        public readonly string? OrganisationId;
        /// <summary>
        /// Whether the role is read-only and cannot be modified.
        /// </summary>
        public readonly bool RoleIsReadOnly;
        /// <summary>
        /// Slug of the Organisation Role
        /// </summary>
        public readonly string? Slug;
        /// <summary>
        /// Whether the role is a system role
        /// </summary>
        public readonly bool System;
        /// <summary>
        /// Last update timestamp of the Organisation Role
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetIamRoleResult(
            ImmutableDictionary<string, string> annotations,

            string createdAt,

            string? description,

            string id,

            ImmutableDictionary<string, string> labels,

            string? name,

            string? organisationId,

            bool roleIsReadOnly,

            string? slug,

            bool system,

            string updatedAt)
        {
            Annotations = annotations;
            CreatedAt = createdAt;
            Description = description;
            Id = id;
            Labels = labels;
            Name = name;
            OrganisationId = organisationId;
            RoleIsReadOnly = roleIsReadOnly;
            Slug = slug;
            System = system;
            UpdatedAt = updatedAt;
        }
    }
}
