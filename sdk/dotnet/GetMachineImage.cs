// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    public static class GetMachineImage
    {
        /// <summary>
        /// Get an machine image
        /// </summary>
        public static Task<GetMachineImageResult> InvokeAsync(GetMachineImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMachineImageResult>("thalassa:index/getMachineImage:getMachineImage", args ?? new GetMachineImageArgs(), options.WithDefaults());

        /// <summary>
        /// Get an machine image
        /// </summary>
        public static Output<GetMachineImageResult> Invoke(GetMachineImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMachineImageResult>("thalassa:index/getMachineImage:getMachineImage", args ?? new GetMachineImageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an machine image
        /// </summary>
        public static Output<GetMachineImageResult> Invoke(GetMachineImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMachineImageResult>("thalassa:index/getMachineImage:getMachineImage", args ?? new GetMachineImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMachineImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the machine image
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("organisationId")]
        public string? OrganisationId { get; set; }

        /// <summary>
        /// Slug of the machine image
        /// </summary>
        [Input("slug")]
        public string? Slug { get; set; }

        public GetMachineImageArgs()
        {
        }
        public static new GetMachineImageArgs Empty => new GetMachineImageArgs();
    }

    public sealed class GetMachineImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the machine image
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Slug of the machine image
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public GetMachineImageInvokeArgs()
        {
        }
        public static new GetMachineImageInvokeArgs Empty => new GetMachineImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetMachineImageResult
    {
        /// <summary>
        /// Annotations of the machine image
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Description of the machine image
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Identity of the machine image
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Labels of the machine image
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Name of the machine image
        /// </summary>
        public readonly string Name;
        public readonly string? OrganisationId;
        /// <summary>
        /// Slug of the machine image
        /// </summary>
        public readonly string? Slug;

        [OutputConstructor]
        private GetMachineImageResult(
            ImmutableDictionary<string, string> annotations,

            string description,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            string? organisationId,

            string? slug)
        {
            Annotations = annotations;
            Description = description;
            Id = id;
            Labels = labels;
            Name = name;
            OrganisationId = organisationId;
            Slug = slug;
        }
    }
}
