// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    /// <summary>
    /// Create an Kubernetes Node Pool for a Kubernetes Cluster. This resource is only available for managed Kubernetes Clusters. A Node Pool is a group of nodes that are identically configured and are automatically joined to the Kubernetes Cluster. Node Pools can be scaled up and down as needed.
    /// </summary>
    [ThalassaResourceType("thalassa:index/kubernetesNodePool:KubernetesNodePool")]
    public partial class KubernetesNodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// Availability zone for the Kubernetes Node Pool
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// Kubernetes Cluster of the Kubernetes Node Pool
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// A human readable description about the Kubernetes Node Pool
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable autohealing for the Kubernetes Node Pool
        /// </summary>
        [Output("enableAutohealing")]
        public Output<bool?> EnableAutohealing { get; private set; } = null!;

        /// <summary>
        /// Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        /// </summary>
        [Output("kubernetesVersion")]
        public Output<string?> KubernetesVersion { get; private set; } = null!;

        /// <summary>
        /// Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Machine type for the Kubernetes Node Pool
        /// </summary>
        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        /// <summary>
        /// Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        /// </summary>
        [Output("maxReplicas")]
        public Output<int?> MaxReplicas { get; private set; } = null!;

        /// <summary>
        /// Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        /// </summary>
        [Output("minReplicas")]
        public Output<int?> MinReplicas { get; private set; } = null!;

        /// <summary>
        /// Name of the Kubernetes Node Pool
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        /// </summary>
        [Output("nodeAnnotations")]
        public Output<ImmutableDictionary<string, string>?> NodeAnnotations { get; private set; } = null!;

        /// <summary>
        /// Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        /// </summary>
        [Output("nodeLabels")]
        public Output<ImmutableDictionary<string, string>?> NodeLabels { get; private set; } = null!;

        /// <summary>
        /// Taints for the Kubernetes Node Pool
        /// </summary>
        [Output("nodeTaints")]
        public Output<ImmutableArray<Outputs.KubernetesNodePoolNodeTaint>> NodeTaints { get; private set; } = null!;

        [Output("organisationId")]
        public Output<string?> OrganisationId { get; private set; } = null!;

        /// <summary>
        /// Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        /// </summary>
        [Output("replicas")]
        public Output<int?> Replicas { get; private set; } = null!;

        /// <summary>
        /// List identities of security group that will be attached to the machines in the Node Pool
        /// </summary>
        [Output("securityGroupAttachments")]
        public Output<ImmutableArray<string>> SecurityGroupAttachments { get; private set; } = null!;

        /// <summary>
        /// Slug of the Kubernetes Node Pool
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Status of the Kubernetes Node Pool
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        /// </summary>
        [Output("subnetId")]
        public Output<string?> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Upgrade strategy for the Kubernetes Node Pool
        /// </summary>
        [Output("upgradeStrategy")]
        public Output<string?> UpgradeStrategy { get; private set; } = null!;


        /// <summary>
        /// Create a KubernetesNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KubernetesNodePool(string name, KubernetesNodePoolArgs args, CustomResourceOptions? options = null)
            : base("thalassa:index/kubernetesNodePool:KubernetesNodePool", name, args ?? new KubernetesNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KubernetesNodePool(string name, Input<string> id, KubernetesNodePoolState? state = null, CustomResourceOptions? options = null)
            : base("thalassa:index/kubernetesNodePool:KubernetesNodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KubernetesNodePool Get(string name, Input<string> id, KubernetesNodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new KubernetesNodePool(name, id, state, options);
        }
    }

    public sealed class KubernetesNodePoolArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Availability zone for the Kubernetes Node Pool
        /// </summary>
        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        /// <summary>
        /// Kubernetes Cluster of the Kubernetes Node Pool
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// A human readable description about the Kubernetes Node Pool
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable autohealing for the Kubernetes Node Pool
        /// </summary>
        [Input("enableAutohealing")]
        public Input<bool>? EnableAutohealing { get; set; }

        /// <summary>
        /// Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Machine type for the Kubernetes Node Pool
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        /// </summary>
        [Input("maxReplicas")]
        public Input<int>? MaxReplicas { get; set; }

        /// <summary>
        /// Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        /// </summary>
        [Input("minReplicas")]
        public Input<int>? MinReplicas { get; set; }

        /// <summary>
        /// Name of the Kubernetes Node Pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeAnnotations")]
        private InputMap<string>? _nodeAnnotations;

        /// <summary>
        /// Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        /// </summary>
        public InputMap<string> NodeAnnotations
        {
            get => _nodeAnnotations ?? (_nodeAnnotations = new InputMap<string>());
            set => _nodeAnnotations = value;
        }

        [Input("nodeLabels")]
        private InputMap<string>? _nodeLabels;

        /// <summary>
        /// Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        /// </summary>
        public InputMap<string> NodeLabels
        {
            get => _nodeLabels ?? (_nodeLabels = new InputMap<string>());
            set => _nodeLabels = value;
        }

        [Input("nodeTaints")]
        private InputList<Inputs.KubernetesNodePoolNodeTaintArgs>? _nodeTaints;

        /// <summary>
        /// Taints for the Kubernetes Node Pool
        /// </summary>
        public InputList<Inputs.KubernetesNodePoolNodeTaintArgs> NodeTaints
        {
            get => _nodeTaints ?? (_nodeTaints = new InputList<Inputs.KubernetesNodePoolNodeTaintArgs>());
            set => _nodeTaints = value;
        }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        [Input("securityGroupAttachments")]
        private InputList<string>? _securityGroupAttachments;

        /// <summary>
        /// List identities of security group that will be attached to the machines in the Node Pool
        /// </summary>
        public InputList<string> SecurityGroupAttachments
        {
            get => _securityGroupAttachments ?? (_securityGroupAttachments = new InputList<string>());
            set => _securityGroupAttachments = value;
        }

        /// <summary>
        /// Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// Upgrade strategy for the Kubernetes Node Pool
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<string>? UpgradeStrategy { get; set; }

        public KubernetesNodePoolArgs()
        {
        }
        public static new KubernetesNodePoolArgs Empty => new KubernetesNodePoolArgs();
    }

    public sealed class KubernetesNodePoolState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Availability zone for the Kubernetes Node Pool
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// Kubernetes Cluster of the Kubernetes Node Pool
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// A human readable description about the Kubernetes Node Pool
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable autohealing for the Kubernetes Node Pool
        /// </summary>
        [Input("enableAutohealing")]
        public Input<bool>? EnableAutohealing { get; set; }

        /// <summary>
        /// Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Machine type for the Kubernetes Node Pool
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        /// </summary>
        [Input("maxReplicas")]
        public Input<int>? MaxReplicas { get; set; }

        /// <summary>
        /// Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        /// </summary>
        [Input("minReplicas")]
        public Input<int>? MinReplicas { get; set; }

        /// <summary>
        /// Name of the Kubernetes Node Pool
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeAnnotations")]
        private InputMap<string>? _nodeAnnotations;

        /// <summary>
        /// Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        /// </summary>
        public InputMap<string> NodeAnnotations
        {
            get => _nodeAnnotations ?? (_nodeAnnotations = new InputMap<string>());
            set => _nodeAnnotations = value;
        }

        [Input("nodeLabels")]
        private InputMap<string>? _nodeLabels;

        /// <summary>
        /// Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        /// </summary>
        public InputMap<string> NodeLabels
        {
            get => _nodeLabels ?? (_nodeLabels = new InputMap<string>());
            set => _nodeLabels = value;
        }

        [Input("nodeTaints")]
        private InputList<Inputs.KubernetesNodePoolNodeTaintGetArgs>? _nodeTaints;

        /// <summary>
        /// Taints for the Kubernetes Node Pool
        /// </summary>
        public InputList<Inputs.KubernetesNodePoolNodeTaintGetArgs> NodeTaints
        {
            get => _nodeTaints ?? (_nodeTaints = new InputList<Inputs.KubernetesNodePoolNodeTaintGetArgs>());
            set => _nodeTaints = value;
        }

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        [Input("securityGroupAttachments")]
        private InputList<string>? _securityGroupAttachments;

        /// <summary>
        /// List identities of security group that will be attached to the machines in the Node Pool
        /// </summary>
        public InputList<string> SecurityGroupAttachments
        {
            get => _securityGroupAttachments ?? (_securityGroupAttachments = new InputList<string>());
            set => _securityGroupAttachments = value;
        }

        /// <summary>
        /// Slug of the Kubernetes Node Pool
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Status of the Kubernetes Node Pool
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// Upgrade strategy for the Kubernetes Node Pool
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<string>? UpgradeStrategy { get; set; }

        public KubernetesNodePoolState()
        {
        }
        public static new KubernetesNodePoolState Empty => new KubernetesNodePoolState();
    }
}
