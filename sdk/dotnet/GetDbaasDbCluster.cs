// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Thalassa
{
    public static class GetDbaasDbCluster
    {
        /// <summary>
        /// Get an DB Cluster
        /// </summary>
        public static Task<GetDbaasDbClusterResult> InvokeAsync(GetDbaasDbClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDbaasDbClusterResult>("thalassa:index/getDbaasDbCluster:getDbaasDbCluster", args ?? new GetDbaasDbClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Get an DB Cluster
        /// </summary>
        public static Output<GetDbaasDbClusterResult> Invoke(GetDbaasDbClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbaasDbClusterResult>("thalassa:index/getDbaasDbCluster:getDbaasDbCluster", args ?? new GetDbaasDbClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get an DB Cluster
        /// </summary>
        public static Output<GetDbaasDbClusterResult> Invoke(GetDbaasDbClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbaasDbClusterResult>("thalassa:index/getDbaasDbCluster:getDbaasDbCluster", args ?? new GetDbaasDbClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDbaasDbClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the DB Cluster
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("organisationId")]
        public string? OrganisationId { get; set; }

        /// <summary>
        /// Slug of the DB Cluster
        /// </summary>
        [Input("slug")]
        public string? Slug { get; set; }

        public GetDbaasDbClusterArgs()
        {
        }
        public static new GetDbaasDbClusterArgs Empty => new GetDbaasDbClusterArgs();
    }

    public sealed class GetDbaasDbClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the DB Cluster
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("organisationId")]
        public Input<string>? OrganisationId { get; set; }

        /// <summary>
        /// Slug of the DB Cluster
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public GetDbaasDbClusterInvokeArgs()
        {
        }
        public static new GetDbaasDbClusterInvokeArgs Empty => new GetDbaasDbClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetDbaasDbClusterResult
    {
        /// <summary>
        /// Amount of storage allocated to the cluster in GB
        /// </summary>
        public readonly int AllocatedStorage;
        /// <summary>
        /// Annotations of the DB Cluster
        /// </summary>
        public readonly ImmutableDictionary<string, string> Annotations;
        /// <summary>
        /// Flag indicating if the cluster should automatically upgrade to the latest minor version
        /// </summary>
        public readonly bool AutoMinorVersionUpgrade;
        /// <summary>
        /// Database instance type of the DB Cluster
        /// </summary>
        public readonly string DatabaseInstanceType;
        /// <summary>
        /// Name of the database on the cluster
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// Flag indicating if the cluster should be protected from deletion
        /// </summary>
        public readonly bool DeleteProtection;
        /// <summary>
        /// Description of the DB Cluster
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// IPv4 address of the cluster endpoint
        /// </summary>
        public readonly string EndpointIpv4;
        /// <summary>
        /// IPv6 address of the cluster endpoint
        /// </summary>
        public readonly string EndpointIpv6;
        /// <summary>
        /// Database engine of the cluster
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// Version of the database engine
        /// </summary>
        public readonly string EngineVersion;
        /// <summary>
        /// Identity of the DB Cluster
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Labels of the DB Cluster
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Name of the DB Cluster
        /// </summary>
        public readonly string Name;
        public readonly string? OrganisationId;
        /// <summary>
        /// Map of parameter name to database engine specific parameter value
        /// </summary>
        public readonly ImmutableDictionary<string, string> Parameters;
        /// <summary>
        /// Port of the cluster endpoint
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Number of instances in the cluster
        /// </summary>
        public readonly int Replicas;
        /// <summary>
        /// List of security groups associated with the cluster
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// Slug of the DB Cluster
        /// </summary>
        public readonly string Slug;
        /// <summary>
        /// Status of the cluster
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Subnet of the DB Cluster
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// Storage type used to determine the size of the cluster storage
        /// </summary>
        public readonly string VolumeTypeClass;

        [OutputConstructor]
        private GetDbaasDbClusterResult(
            int allocatedStorage,

            ImmutableDictionary<string, string> annotations,

            bool autoMinorVersionUpgrade,

            string databaseInstanceType,

            string databaseName,

            bool deleteProtection,

            string description,

            string endpointIpv4,

            string endpointIpv6,

            string engine,

            string engineVersion,

            string id,

            ImmutableDictionary<string, string> labels,

            string name,

            string? organisationId,

            ImmutableDictionary<string, string> parameters,

            int port,

            int replicas,

            ImmutableArray<string> securityGroups,

            string slug,

            string status,

            string subnetId,

            string volumeTypeClass)
        {
            AllocatedStorage = allocatedStorage;
            Annotations = annotations;
            AutoMinorVersionUpgrade = autoMinorVersionUpgrade;
            DatabaseInstanceType = databaseInstanceType;
            DatabaseName = databaseName;
            DeleteProtection = deleteProtection;
            Description = description;
            EndpointIpv4 = endpointIpv4;
            EndpointIpv6 = endpointIpv6;
            Engine = engine;
            EngineVersion = engineVersion;
            Id = id;
            Labels = labels;
            Name = name;
            OrganisationId = organisationId;
            Parameters = parameters;
            Port = port;
            Replicas = replicas;
            SecurityGroups = securityGroups;
            Slug = slug;
            Status = status;
            SubnetId = subnetId;
            VolumeTypeClass = volumeTypeClass;
        }
    }
}
