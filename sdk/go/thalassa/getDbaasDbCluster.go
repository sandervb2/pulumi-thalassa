// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Get an DB Cluster
func LookupDbaasDbCluster(ctx *pulumi.Context, args *LookupDbaasDbClusterArgs, opts ...pulumi.InvokeOption) (*LookupDbaasDbClusterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDbaasDbClusterResult
	err := ctx.Invoke("thalassa:index/getDbaasDbCluster:getDbaasDbCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbaasDbCluster.
type LookupDbaasDbClusterArgs struct {
	// Name of the DB Cluster
	Name           string  `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Slug of the DB Cluster
	Slug *string `pulumi:"slug"`
}

// A collection of values returned by getDbaasDbCluster.
type LookupDbaasDbClusterResult struct {
	// Amount of storage allocated to the cluster in GB
	AllocatedStorage int `pulumi:"allocatedStorage"`
	// Annotations of the DB Cluster
	Annotations map[string]string `pulumi:"annotations"`
	// Flag indicating if the cluster should automatically upgrade to the latest minor version
	AutoMinorVersionUpgrade bool `pulumi:"autoMinorVersionUpgrade"`
	// Database instance type of the DB Cluster
	DatabaseInstanceType string `pulumi:"databaseInstanceType"`
	// Name of the database on the cluster
	DatabaseName string `pulumi:"databaseName"`
	// Flag indicating if the cluster should be protected from deletion
	DeleteProtection bool `pulumi:"deleteProtection"`
	// Description of the DB Cluster
	Description string `pulumi:"description"`
	// IPv4 address of the cluster endpoint
	EndpointIpv4 string `pulumi:"endpointIpv4"`
	// IPv6 address of the cluster endpoint
	EndpointIpv6 string `pulumi:"endpointIpv6"`
	// Database engine of the cluster
	Engine string `pulumi:"engine"`
	// Version of the database engine
	EngineVersion string `pulumi:"engineVersion"`
	// Identity of the DB Cluster
	Id string `pulumi:"id"`
	// Labels of the DB Cluster
	Labels map[string]string `pulumi:"labels"`
	// Name of the DB Cluster
	Name           string  `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Map of parameter name to database engine specific parameter value
	Parameters map[string]string `pulumi:"parameters"`
	// Port of the cluster endpoint
	Port int `pulumi:"port"`
	// Number of instances in the cluster
	Replicas int `pulumi:"replicas"`
	// List of security groups associated with the cluster
	SecurityGroups []string `pulumi:"securityGroups"`
	// Slug of the DB Cluster
	Slug string `pulumi:"slug"`
	// Status of the cluster
	Status string `pulumi:"status"`
	// Subnet of the DB Cluster
	SubnetId string `pulumi:"subnetId"`
	// Storage type used to determine the size of the cluster storage
	VolumeTypeClass string `pulumi:"volumeTypeClass"`
}

func LookupDbaasDbClusterOutput(ctx *pulumi.Context, args LookupDbaasDbClusterOutputArgs, opts ...pulumi.InvokeOption) LookupDbaasDbClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDbaasDbClusterResultOutput, error) {
			args := v.(LookupDbaasDbClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("thalassa:index/getDbaasDbCluster:getDbaasDbCluster", args, LookupDbaasDbClusterResultOutput{}, options).(LookupDbaasDbClusterResultOutput), nil
		}).(LookupDbaasDbClusterResultOutput)
}

// A collection of arguments for invoking getDbaasDbCluster.
type LookupDbaasDbClusterOutputArgs struct {
	// Name of the DB Cluster
	Name           pulumi.StringInput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrInput `pulumi:"organisationId"`
	// Slug of the DB Cluster
	Slug pulumi.StringPtrInput `pulumi:"slug"`
}

func (LookupDbaasDbClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbaasDbClusterArgs)(nil)).Elem()
}

// A collection of values returned by getDbaasDbCluster.
type LookupDbaasDbClusterResultOutput struct{ *pulumi.OutputState }

func (LookupDbaasDbClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbaasDbClusterResult)(nil)).Elem()
}

func (o LookupDbaasDbClusterResultOutput) ToLookupDbaasDbClusterResultOutput() LookupDbaasDbClusterResultOutput {
	return o
}

func (o LookupDbaasDbClusterResultOutput) ToLookupDbaasDbClusterResultOutputWithContext(ctx context.Context) LookupDbaasDbClusterResultOutput {
	return o
}

// Amount of storage allocated to the cluster in GB
func (o LookupDbaasDbClusterResultOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) int { return v.AllocatedStorage }).(pulumi.IntOutput)
}

// Annotations of the DB Cluster
func (o LookupDbaasDbClusterResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Flag indicating if the cluster should automatically upgrade to the latest minor version
func (o LookupDbaasDbClusterResultOutput) AutoMinorVersionUpgrade() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) bool { return v.AutoMinorVersionUpgrade }).(pulumi.BoolOutput)
}

// Database instance type of the DB Cluster
func (o LookupDbaasDbClusterResultOutput) DatabaseInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.DatabaseInstanceType }).(pulumi.StringOutput)
}

// Name of the database on the cluster
func (o LookupDbaasDbClusterResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Flag indicating if the cluster should be protected from deletion
func (o LookupDbaasDbClusterResultOutput) DeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) bool { return v.DeleteProtection }).(pulumi.BoolOutput)
}

// Description of the DB Cluster
func (o LookupDbaasDbClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// IPv4 address of the cluster endpoint
func (o LookupDbaasDbClusterResultOutput) EndpointIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.EndpointIpv4 }).(pulumi.StringOutput)
}

// IPv6 address of the cluster endpoint
func (o LookupDbaasDbClusterResultOutput) EndpointIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.EndpointIpv6 }).(pulumi.StringOutput)
}

// Database engine of the cluster
func (o LookupDbaasDbClusterResultOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.Engine }).(pulumi.StringOutput)
}

// Version of the database engine
func (o LookupDbaasDbClusterResultOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.EngineVersion }).(pulumi.StringOutput)
}

// Identity of the DB Cluster
func (o LookupDbaasDbClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Labels of the DB Cluster
func (o LookupDbaasDbClusterResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the DB Cluster
func (o LookupDbaasDbClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDbaasDbClusterResultOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) *string { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Map of parameter name to database engine specific parameter value
func (o LookupDbaasDbClusterResultOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// Port of the cluster endpoint
func (o LookupDbaasDbClusterResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) int { return v.Port }).(pulumi.IntOutput)
}

// Number of instances in the cluster
func (o LookupDbaasDbClusterResultOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) int { return v.Replicas }).(pulumi.IntOutput)
}

// List of security groups associated with the cluster
func (o LookupDbaasDbClusterResultOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Slug of the DB Cluster
func (o LookupDbaasDbClusterResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.Slug }).(pulumi.StringOutput)
}

// Status of the cluster
func (o LookupDbaasDbClusterResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.Status }).(pulumi.StringOutput)
}

// Subnet of the DB Cluster
func (o LookupDbaasDbClusterResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Storage type used to determine the size of the cluster storage
func (o LookupDbaasDbClusterResultOutput) VolumeTypeClass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasDbClusterResult) string { return v.VolumeTypeClass }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDbaasDbClusterResultOutput{})
}
