// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.
func GetVolumeType(ctx *pulumi.Context, args *GetVolumeTypeArgs, opts ...pulumi.InvokeOption) (*GetVolumeTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVolumeTypeResult
	err := ctx.Invoke("thalassa:index/getVolumeType:getVolumeType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumeType.
type GetVolumeTypeArgs struct {
	// The name of the volume type.
	Name           string  `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
}

// A collection of values returned by getVolumeType.
type GetVolumeTypeResult struct {
	// Whether the volume type allows resizing. If false, the volume size cannot be changed after creation.
	AllowResize bool `pulumi:"allowResize"`
	// The description of the volume type.
	Description string `pulumi:"description"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The name of the volume type.
	Name           string  `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The storage type of the volume type. For example: 'block'.
	StorageType string `pulumi:"storageType"`
}

func GetVolumeTypeOutput(ctx *pulumi.Context, args GetVolumeTypeOutputArgs, opts ...pulumi.InvokeOption) GetVolumeTypeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVolumeTypeResultOutput, error) {
			args := v.(GetVolumeTypeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("thalassa:index/getVolumeType:getVolumeType", args, GetVolumeTypeResultOutput{}, options).(GetVolumeTypeResultOutput), nil
		}).(GetVolumeTypeResultOutput)
}

// A collection of arguments for invoking getVolumeType.
type GetVolumeTypeOutputArgs struct {
	// The name of the volume type.
	Name           pulumi.StringInput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrInput `pulumi:"organisationId"`
}

func (GetVolumeTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeTypeArgs)(nil)).Elem()
}

// A collection of values returned by getVolumeType.
type GetVolumeTypeResultOutput struct{ *pulumi.OutputState }

func (GetVolumeTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeTypeResult)(nil)).Elem()
}

func (o GetVolumeTypeResultOutput) ToGetVolumeTypeResultOutput() GetVolumeTypeResultOutput {
	return o
}

func (o GetVolumeTypeResultOutput) ToGetVolumeTypeResultOutputWithContext(ctx context.Context) GetVolumeTypeResultOutput {
	return o
}

// Whether the volume type allows resizing. If false, the volume size cannot be changed after creation.
func (o GetVolumeTypeResultOutput) AllowResize() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumeTypeResult) bool { return v.AllowResize }).(pulumi.BoolOutput)
}

// The description of the volume type.
func (o GetVolumeTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetVolumeTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the volume type.
func (o GetVolumeTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetVolumeTypeResultOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumeTypeResult) *string { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// The storage type of the volume type. For example: 'block'.
func (o GetVolumeTypeResultOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeTypeResult) string { return v.StorageType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVolumeTypeResultOutput{})
}
