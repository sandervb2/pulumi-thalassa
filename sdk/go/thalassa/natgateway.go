// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create an NAT Gateway within a VPC
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the NAT gateway
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for NAT gateway"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the NAT gateway
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for NAT gateway"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a NAT gateway with all optional attributes
//			exampleNatgateway, err := thalassa.NewNatgateway(ctx, "example", &thalassa.NatgatewayArgs{
//				Name:        pulumi.String("example-nat-gateway"),
//				SubnetId:    exampleSubnet.ID(),
//				Description: pulumi.String("Example NAT gateway for documentation"),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("production"),
//					"service":     pulumi.String("networking"),
//					"tier":        pulumi.String("public"),
//				},
//				Annotations: pulumi.StringMap{
//					"cost-center":   pulumi.String("cc-12345"),
//					"backup-policy": pulumi.String("none"),
//					"monitoring":    pulumi.String("enabled"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("natGatewayId", exampleNatgateway.ID())
//			ctx.Export("natGatewayEndpointIp", exampleNatgateway.EndpointIp)
//			return nil
//		})
//	}
//
// ```
type Natgateway struct {
	pulumi.CustomResourceState

	// Annotations for the NatGateway
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// A human readable description about the natGateway
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Endpoint IP of the NatGateway
	EndpointIp pulumi.StringOutput `pulumi:"endpointIp"`
	// Labels for the NatGateway
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the NatGateway
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// List identities of security group that will be attached to the NAT Gateway
	SecurityGroupAttachments pulumi.StringArrayOutput `pulumi:"securityGroupAttachments"`
	Slug                     pulumi.StringOutput      `pulumi:"slug"`
	// Status of the NatGateway
	Status pulumi.StringOutput `pulumi:"status"`
	// Subnet of the NatGateway
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// V4 IP of the NatGateway
	V4Ip pulumi.StringOutput `pulumi:"v4Ip"`
	// V6 IP of the NatGateway
	V6Ip pulumi.StringOutput `pulumi:"v6Ip"`
	// VPC of the NatGateway
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNatgateway registers a new resource with the given unique name, arguments, and options.
func NewNatgateway(ctx *pulumi.Context,
	name string, args *NatgatewayArgs, opts ...pulumi.ResourceOption) (*Natgateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Natgateway
	err := ctx.RegisterResource("thalassa:index/natgateway:Natgateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatgateway gets an existing Natgateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatgateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatgatewayState, opts ...pulumi.ResourceOption) (*Natgateway, error) {
	var resource Natgateway
	err := ctx.ReadResource("thalassa:index/natgateway:Natgateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Natgateway resources.
type natgatewayState struct {
	// Annotations for the NatGateway
	Annotations map[string]string `pulumi:"annotations"`
	// A human readable description about the natGateway
	Description *string `pulumi:"description"`
	// Endpoint IP of the NatGateway
	EndpointIp *string `pulumi:"endpointIp"`
	// Labels for the NatGateway
	Labels map[string]string `pulumi:"labels"`
	// Name of the NatGateway
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// List identities of security group that will be attached to the NAT Gateway
	SecurityGroupAttachments []string `pulumi:"securityGroupAttachments"`
	Slug                     *string  `pulumi:"slug"`
	// Status of the NatGateway
	Status *string `pulumi:"status"`
	// Subnet of the NatGateway
	SubnetId *string `pulumi:"subnetId"`
	// V4 IP of the NatGateway
	V4Ip *string `pulumi:"v4Ip"`
	// V6 IP of the NatGateway
	V6Ip *string `pulumi:"v6Ip"`
	// VPC of the NatGateway
	VpcId *string `pulumi:"vpcId"`
}

type NatgatewayState struct {
	// Annotations for the NatGateway
	Annotations pulumi.StringMapInput
	// A human readable description about the natGateway
	Description pulumi.StringPtrInput
	// Endpoint IP of the NatGateway
	EndpointIp pulumi.StringPtrInput
	// Labels for the NatGateway
	Labels pulumi.StringMapInput
	// Name of the NatGateway
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// List identities of security group that will be attached to the NAT Gateway
	SecurityGroupAttachments pulumi.StringArrayInput
	Slug                     pulumi.StringPtrInput
	// Status of the NatGateway
	Status pulumi.StringPtrInput
	// Subnet of the NatGateway
	SubnetId pulumi.StringPtrInput
	// V4 IP of the NatGateway
	V4Ip pulumi.StringPtrInput
	// V6 IP of the NatGateway
	V6Ip pulumi.StringPtrInput
	// VPC of the NatGateway
	VpcId pulumi.StringPtrInput
}

func (NatgatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*natgatewayState)(nil)).Elem()
}

type natgatewayArgs struct {
	// Annotations for the NatGateway
	Annotations map[string]string `pulumi:"annotations"`
	// A human readable description about the natGateway
	Description *string `pulumi:"description"`
	// Labels for the NatGateway
	Labels map[string]string `pulumi:"labels"`
	// Name of the NatGateway
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// List identities of security group that will be attached to the NAT Gateway
	SecurityGroupAttachments []string `pulumi:"securityGroupAttachments"`
	// Subnet of the NatGateway
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a Natgateway resource.
type NatgatewayArgs struct {
	// Annotations for the NatGateway
	Annotations pulumi.StringMapInput
	// A human readable description about the natGateway
	Description pulumi.StringPtrInput
	// Labels for the NatGateway
	Labels pulumi.StringMapInput
	// Name of the NatGateway
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// List identities of security group that will be attached to the NAT Gateway
	SecurityGroupAttachments pulumi.StringArrayInput
	// Subnet of the NatGateway
	SubnetId pulumi.StringInput
}

func (NatgatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natgatewayArgs)(nil)).Elem()
}

type NatgatewayInput interface {
	pulumi.Input

	ToNatgatewayOutput() NatgatewayOutput
	ToNatgatewayOutputWithContext(ctx context.Context) NatgatewayOutput
}

func (*Natgateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Natgateway)(nil)).Elem()
}

func (i *Natgateway) ToNatgatewayOutput() NatgatewayOutput {
	return i.ToNatgatewayOutputWithContext(context.Background())
}

func (i *Natgateway) ToNatgatewayOutputWithContext(ctx context.Context) NatgatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatgatewayOutput)
}

// NatgatewayArrayInput is an input type that accepts NatgatewayArray and NatgatewayArrayOutput values.
// You can construct a concrete instance of `NatgatewayArrayInput` via:
//
//	NatgatewayArray{ NatgatewayArgs{...} }
type NatgatewayArrayInput interface {
	pulumi.Input

	ToNatgatewayArrayOutput() NatgatewayArrayOutput
	ToNatgatewayArrayOutputWithContext(context.Context) NatgatewayArrayOutput
}

type NatgatewayArray []NatgatewayInput

func (NatgatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Natgateway)(nil)).Elem()
}

func (i NatgatewayArray) ToNatgatewayArrayOutput() NatgatewayArrayOutput {
	return i.ToNatgatewayArrayOutputWithContext(context.Background())
}

func (i NatgatewayArray) ToNatgatewayArrayOutputWithContext(ctx context.Context) NatgatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatgatewayArrayOutput)
}

// NatgatewayMapInput is an input type that accepts NatgatewayMap and NatgatewayMapOutput values.
// You can construct a concrete instance of `NatgatewayMapInput` via:
//
//	NatgatewayMap{ "key": NatgatewayArgs{...} }
type NatgatewayMapInput interface {
	pulumi.Input

	ToNatgatewayMapOutput() NatgatewayMapOutput
	ToNatgatewayMapOutputWithContext(context.Context) NatgatewayMapOutput
}

type NatgatewayMap map[string]NatgatewayInput

func (NatgatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Natgateway)(nil)).Elem()
}

func (i NatgatewayMap) ToNatgatewayMapOutput() NatgatewayMapOutput {
	return i.ToNatgatewayMapOutputWithContext(context.Background())
}

func (i NatgatewayMap) ToNatgatewayMapOutputWithContext(ctx context.Context) NatgatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatgatewayMapOutput)
}

type NatgatewayOutput struct{ *pulumi.OutputState }

func (NatgatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Natgateway)(nil)).Elem()
}

func (o NatgatewayOutput) ToNatgatewayOutput() NatgatewayOutput {
	return o
}

func (o NatgatewayOutput) ToNatgatewayOutputWithContext(ctx context.Context) NatgatewayOutput {
	return o
}

// Annotations for the NatGateway
func (o NatgatewayOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// A human readable description about the natGateway
func (o NatgatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Endpoint IP of the NatGateway
func (o NatgatewayOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringOutput { return v.EndpointIp }).(pulumi.StringOutput)
}

// Labels for the NatGateway
func (o NatgatewayOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the NatGateway
func (o NatgatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NatgatewayOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// List identities of security group that will be attached to the NAT Gateway
func (o NatgatewayOutput) SecurityGroupAttachments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringArrayOutput { return v.SecurityGroupAttachments }).(pulumi.StringArrayOutput)
}

func (o NatgatewayOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Status of the NatGateway
func (o NatgatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Subnet of the NatGateway
func (o NatgatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// V4 IP of the NatGateway
func (o NatgatewayOutput) V4Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringOutput { return v.V4Ip }).(pulumi.StringOutput)
}

// V6 IP of the NatGateway
func (o NatgatewayOutput) V6Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringOutput { return v.V6Ip }).(pulumi.StringOutput)
}

// VPC of the NatGateway
func (o NatgatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Natgateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type NatgatewayArrayOutput struct{ *pulumi.OutputState }

func (NatgatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Natgateway)(nil)).Elem()
}

func (o NatgatewayArrayOutput) ToNatgatewayArrayOutput() NatgatewayArrayOutput {
	return o
}

func (o NatgatewayArrayOutput) ToNatgatewayArrayOutputWithContext(ctx context.Context) NatgatewayArrayOutput {
	return o
}

func (o NatgatewayArrayOutput) Index(i pulumi.IntInput) NatgatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Natgateway {
		return vs[0].([]*Natgateway)[vs[1].(int)]
	}).(NatgatewayOutput)
}

type NatgatewayMapOutput struct{ *pulumi.OutputState }

func (NatgatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Natgateway)(nil)).Elem()
}

func (o NatgatewayMapOutput) ToNatgatewayMapOutput() NatgatewayMapOutput {
	return o
}

func (o NatgatewayMapOutput) ToNatgatewayMapOutputWithContext(ctx context.Context) NatgatewayMapOutput {
	return o
}

func (o NatgatewayMapOutput) MapIndex(k pulumi.StringInput) NatgatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Natgateway {
		return vs[0].(map[string]*Natgateway)[vs[1].(string)]
	}).(NatgatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatgatewayInput)(nil)).Elem(), &Natgateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatgatewayArrayInput)(nil)).Elem(), NatgatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatgatewayMapInput)(nil)).Elem(), NatgatewayMap{})
	pulumi.RegisterOutputType(NatgatewayOutput{})
	pulumi.RegisterOutputType(NatgatewayArrayOutput{})
	pulumi.RegisterOutputType(NatgatewayMapOutput{})
}
