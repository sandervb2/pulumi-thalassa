// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Get an organisation role
func LookupIamRole(ctx *pulumi.Context, args *LookupIamRoleArgs, opts ...pulumi.InvokeOption) (*LookupIamRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIamRoleResult
	err := ctx.Invoke("thalassa:index/getIamRole:getIamRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIamRole.
type LookupIamRoleArgs struct {
	// A human readable description about the role
	Description *string `pulumi:"description"`
	// Name of the Organisation Role
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Slug of the Organisation Role
	Slug *string `pulumi:"slug"`
}

// A collection of values returned by getIamRole.
type LookupIamRoleResult struct {
	// Annotations for the Organisation Role
	Annotations map[string]string `pulumi:"annotations"`
	// Creation timestamp of the Organisation Role
	CreatedAt string `pulumi:"createdAt"`
	// A human readable description about the role
	Description *string `pulumi:"description"`
	// Identity of the Organisation Role
	Id string `pulumi:"id"`
	// Labels for the Organisation Role
	Labels map[string]string `pulumi:"labels"`
	// Name of the Organisation Role
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Whether the role is read-only and cannot be modified.
	RoleIsReadOnly bool `pulumi:"roleIsReadOnly"`
	// Slug of the Organisation Role
	Slug *string `pulumi:"slug"`
	// Whether the role is a system role
	System bool `pulumi:"system"`
	// Last update timestamp of the Organisation Role
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupIamRoleOutput(ctx *pulumi.Context, args LookupIamRoleOutputArgs, opts ...pulumi.InvokeOption) LookupIamRoleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupIamRoleResultOutput, error) {
			args := v.(LookupIamRoleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("thalassa:index/getIamRole:getIamRole", args, LookupIamRoleResultOutput{}, options).(LookupIamRoleResultOutput), nil
		}).(LookupIamRoleResultOutput)
}

// A collection of arguments for invoking getIamRole.
type LookupIamRoleOutputArgs struct {
	// A human readable description about the role
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Name of the Organisation Role
	Name           pulumi.StringPtrInput `pulumi:"name"`
	OrganisationId pulumi.StringPtrInput `pulumi:"organisationId"`
	// Slug of the Organisation Role
	Slug pulumi.StringPtrInput `pulumi:"slug"`
}

func (LookupIamRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIamRoleArgs)(nil)).Elem()
}

// A collection of values returned by getIamRole.
type LookupIamRoleResultOutput struct{ *pulumi.OutputState }

func (LookupIamRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIamRoleResult)(nil)).Elem()
}

func (o LookupIamRoleResultOutput) ToLookupIamRoleResultOutput() LookupIamRoleResultOutput {
	return o
}

func (o LookupIamRoleResultOutput) ToLookupIamRoleResultOutputWithContext(ctx context.Context) LookupIamRoleResultOutput {
	return o
}

// Annotations for the Organisation Role
func (o LookupIamRoleResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIamRoleResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Creation timestamp of the Organisation Role
func (o LookupIamRoleResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamRoleResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// A human readable description about the role
func (o LookupIamRoleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIamRoleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Identity of the Organisation Role
func (o LookupIamRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Labels for the Organisation Role
func (o LookupIamRoleResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupIamRoleResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the Organisation Role
func (o LookupIamRoleResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIamRoleResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupIamRoleResultOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIamRoleResult) *string { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Whether the role is read-only and cannot be modified.
func (o LookupIamRoleResultOutput) RoleIsReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIamRoleResult) bool { return v.RoleIsReadOnly }).(pulumi.BoolOutput)
}

// Slug of the Organisation Role
func (o LookupIamRoleResultOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIamRoleResult) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

// Whether the role is a system role
func (o LookupIamRoleResultOutput) System() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIamRoleResult) bool { return v.System }).(pulumi.BoolOutput)
}

// Last update timestamp of the Organisation Role
func (o LookupIamRoleResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIamRoleResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIamRoleResultOutput{})
}
