// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create a team in the Thalassa Cloud platform
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a team
//			example, err := thalassa.NewIamTeam(ctx, "example", &thalassa.IamTeamArgs{
//				Name:        pulumi.String("example-team"),
//				Description: pulumi.String("An example team for demonstration purposes"),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("development"),
//					"project":     pulumi.String("example"),
//				},
//				Annotations: pulumi.StringMap{
//					"contact": pulumi.String("team@example.com"),
//					"owner":   pulumi.String("devops"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("teamId", example.ID())
//			ctx.Export("teamName", example.Name)
//			ctx.Export("teamSlug", example.Slug)
//			ctx.Export("teamDescription", example.Description)
//			return nil
//		})
//	}
//
// ```
type IamTeam struct {
	pulumi.CustomResourceState

	// Annotations for the Team
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Creation timestamp of the Team
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A human readable description about the team
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels for the Team
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the Team
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// Slug of the Team
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Last update timestamp of the Team
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIamTeam registers a new resource with the given unique name, arguments, and options.
func NewIamTeam(ctx *pulumi.Context,
	name string, args *IamTeamArgs, opts ...pulumi.ResourceOption) (*IamTeam, error) {
	if args == nil {
		args = &IamTeamArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamTeam
	err := ctx.RegisterResource("thalassa:index/iamTeam:IamTeam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamTeam gets an existing IamTeam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamTeamState, opts ...pulumi.ResourceOption) (*IamTeam, error) {
	var resource IamTeam
	err := ctx.ReadResource("thalassa:index/iamTeam:IamTeam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamTeam resources.
type iamTeamState struct {
	// Annotations for the Team
	Annotations map[string]string `pulumi:"annotations"`
	// Creation timestamp of the Team
	CreatedAt *string `pulumi:"createdAt"`
	// A human readable description about the team
	Description *string `pulumi:"description"`
	// Labels for the Team
	Labels map[string]string `pulumi:"labels"`
	// Name of the Team
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Slug of the Team
	Slug *string `pulumi:"slug"`
	// Last update timestamp of the Team
	UpdatedAt *string `pulumi:"updatedAt"`
}

type IamTeamState struct {
	// Annotations for the Team
	Annotations pulumi.StringMapInput
	// Creation timestamp of the Team
	CreatedAt pulumi.StringPtrInput
	// A human readable description about the team
	Description pulumi.StringPtrInput
	// Labels for the Team
	Labels pulumi.StringMapInput
	// Name of the Team
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Slug of the Team
	Slug pulumi.StringPtrInput
	// Last update timestamp of the Team
	UpdatedAt pulumi.StringPtrInput
}

func (IamTeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamTeamState)(nil)).Elem()
}

type iamTeamArgs struct {
	// Annotations for the Team
	Annotations map[string]string `pulumi:"annotations"`
	// A human readable description about the team
	Description *string `pulumi:"description"`
	// Labels for the Team
	Labels map[string]string `pulumi:"labels"`
	// Name of the Team
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
}

// The set of arguments for constructing a IamTeam resource.
type IamTeamArgs struct {
	// Annotations for the Team
	Annotations pulumi.StringMapInput
	// A human readable description about the team
	Description pulumi.StringPtrInput
	// Labels for the Team
	Labels pulumi.StringMapInput
	// Name of the Team
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
}

func (IamTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamTeamArgs)(nil)).Elem()
}

type IamTeamInput interface {
	pulumi.Input

	ToIamTeamOutput() IamTeamOutput
	ToIamTeamOutputWithContext(ctx context.Context) IamTeamOutput
}

func (*IamTeam) ElementType() reflect.Type {
	return reflect.TypeOf((**IamTeam)(nil)).Elem()
}

func (i *IamTeam) ToIamTeamOutput() IamTeamOutput {
	return i.ToIamTeamOutputWithContext(context.Background())
}

func (i *IamTeam) ToIamTeamOutputWithContext(ctx context.Context) IamTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamTeamOutput)
}

// IamTeamArrayInput is an input type that accepts IamTeamArray and IamTeamArrayOutput values.
// You can construct a concrete instance of `IamTeamArrayInput` via:
//
//	IamTeamArray{ IamTeamArgs{...} }
type IamTeamArrayInput interface {
	pulumi.Input

	ToIamTeamArrayOutput() IamTeamArrayOutput
	ToIamTeamArrayOutputWithContext(context.Context) IamTeamArrayOutput
}

type IamTeamArray []IamTeamInput

func (IamTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamTeam)(nil)).Elem()
}

func (i IamTeamArray) ToIamTeamArrayOutput() IamTeamArrayOutput {
	return i.ToIamTeamArrayOutputWithContext(context.Background())
}

func (i IamTeamArray) ToIamTeamArrayOutputWithContext(ctx context.Context) IamTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamTeamArrayOutput)
}

// IamTeamMapInput is an input type that accepts IamTeamMap and IamTeamMapOutput values.
// You can construct a concrete instance of `IamTeamMapInput` via:
//
//	IamTeamMap{ "key": IamTeamArgs{...} }
type IamTeamMapInput interface {
	pulumi.Input

	ToIamTeamMapOutput() IamTeamMapOutput
	ToIamTeamMapOutputWithContext(context.Context) IamTeamMapOutput
}

type IamTeamMap map[string]IamTeamInput

func (IamTeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamTeam)(nil)).Elem()
}

func (i IamTeamMap) ToIamTeamMapOutput() IamTeamMapOutput {
	return i.ToIamTeamMapOutputWithContext(context.Background())
}

func (i IamTeamMap) ToIamTeamMapOutputWithContext(ctx context.Context) IamTeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamTeamMapOutput)
}

type IamTeamOutput struct{ *pulumi.OutputState }

func (IamTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamTeam)(nil)).Elem()
}

func (o IamTeamOutput) ToIamTeamOutput() IamTeamOutput {
	return o
}

func (o IamTeamOutput) ToIamTeamOutputWithContext(ctx context.Context) IamTeamOutput {
	return o
}

// Annotations for the Team
func (o IamTeamOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IamTeam) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Creation timestamp of the Team
func (o IamTeamOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamTeam) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A human readable description about the team
func (o IamTeamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamTeam) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Labels for the Team
func (o IamTeamOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IamTeam) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the Team
func (o IamTeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamTeam) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IamTeamOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamTeam) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Slug of the Team
func (o IamTeamOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *IamTeam) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Last update timestamp of the Team
func (o IamTeamOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamTeam) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type IamTeamArrayOutput struct{ *pulumi.OutputState }

func (IamTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamTeam)(nil)).Elem()
}

func (o IamTeamArrayOutput) ToIamTeamArrayOutput() IamTeamArrayOutput {
	return o
}

func (o IamTeamArrayOutput) ToIamTeamArrayOutputWithContext(ctx context.Context) IamTeamArrayOutput {
	return o
}

func (o IamTeamArrayOutput) Index(i pulumi.IntInput) IamTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamTeam {
		return vs[0].([]*IamTeam)[vs[1].(int)]
	}).(IamTeamOutput)
}

type IamTeamMapOutput struct{ *pulumi.OutputState }

func (IamTeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamTeam)(nil)).Elem()
}

func (o IamTeamMapOutput) ToIamTeamMapOutput() IamTeamMapOutput {
	return o
}

func (o IamTeamMapOutput) ToIamTeamMapOutputWithContext(ctx context.Context) IamTeamMapOutput {
	return o
}

func (o IamTeamMapOutput) MapIndex(k pulumi.StringInput) IamTeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamTeam {
		return vs[0].(map[string]*IamTeam)[vs[1].(string)]
	}).(IamTeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamTeamInput)(nil)).Elem(), &IamTeam{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamTeamArrayInput)(nil)).Elem(), IamTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamTeamMapInput)(nil)).Elem(), IamTeamMap{})
	pulumi.RegisterOutputType(IamTeamOutput{})
	pulumi.RegisterOutputType(IamTeamArrayOutput{})
	pulumi.RegisterOutputType(IamTeamMapOutput{})
}
