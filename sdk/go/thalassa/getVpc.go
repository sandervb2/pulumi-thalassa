// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Get an vpc
func LookupVpc(ctx *pulumi.Context, args *LookupVpcArgs, opts ...pulumi.InvokeOption) (*LookupVpcResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcResult
	err := ctx.Invoke("thalassa:index/getVpc:getVpc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpc.
type LookupVpcArgs struct {
	// A human readable description about the vpc
	Description *string `pulumi:"description"`
	// Name of the Vpc
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
	Region *string `pulumi:"region"`
	// Slug of the Vpc
	Slug *string `pulumi:"slug"`
}

// A collection of values returned by getVpc.
type LookupVpcResult struct {
	// Annotations for the Vpc
	Annotations map[string]string `pulumi:"annotations"`
	// List of CIDRs for the Vpc
	Cidrs []string `pulumi:"cidrs"`
	// A human readable description about the vpc
	Description *string `pulumi:"description"`
	// Identity of the Vpc
	Id string `pulumi:"id"`
	// Labels for the Vpc
	Labels map[string]string `pulumi:"labels"`
	// Name of the Vpc
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
	Region *string `pulumi:"region"`
	// Slug of the Vpc
	Slug *string `pulumi:"slug"`
	// Status of the Vpc
	Status string `pulumi:"status"`
}

func LookupVpcOutput(ctx *pulumi.Context, args LookupVpcOutputArgs, opts ...pulumi.InvokeOption) LookupVpcResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVpcResultOutput, error) {
			args := v.(LookupVpcArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("thalassa:index/getVpc:getVpc", args, LookupVpcResultOutput{}, options).(LookupVpcResultOutput), nil
		}).(LookupVpcResultOutput)
}

// A collection of arguments for invoking getVpc.
type LookupVpcOutputArgs struct {
	// A human readable description about the vpc
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Name of the Vpc
	Name           pulumi.StringPtrInput `pulumi:"name"`
	OrganisationId pulumi.StringPtrInput `pulumi:"organisationId"`
	// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Slug of the Vpc
	Slug pulumi.StringPtrInput `pulumi:"slug"`
}

func (LookupVpcOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcArgs)(nil)).Elem()
}

// A collection of values returned by getVpc.
type LookupVpcResultOutput struct{ *pulumi.OutputState }

func (LookupVpcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcResult)(nil)).Elem()
}

func (o LookupVpcResultOutput) ToLookupVpcResultOutput() LookupVpcResultOutput {
	return o
}

func (o LookupVpcResultOutput) ToLookupVpcResultOutputWithContext(ctx context.Context) LookupVpcResultOutput {
	return o
}

// Annotations for the Vpc
func (o LookupVpcResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVpcResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// List of CIDRs for the Vpc
func (o LookupVpcResultOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []string { return v.Cidrs }).(pulumi.StringArrayOutput)
}

// A human readable description about the vpc
func (o LookupVpcResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Identity of the Vpc
func (o LookupVpcResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Id }).(pulumi.StringOutput)
}

// Labels for the Vpc
func (o LookupVpcResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVpcResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the Vpc
func (o LookupVpcResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupVpcResultOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcResult) *string { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
func (o LookupVpcResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Slug of the Vpc
func (o LookupVpcResultOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcResult) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

// Status of the Vpc
func (o LookupVpcResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpcResultOutput{})
}
