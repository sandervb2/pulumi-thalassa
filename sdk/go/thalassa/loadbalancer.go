// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create an loadbalancer within a VPC
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the loadbalancer
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for loadbalancer"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the loadbalancer
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for loadbalancer"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a loadbalancer with all optional attributes
//			exampleLoadbalancer, err := thalassa.NewLoadbalancer(ctx, "example", &thalassa.LoadbalancerArgs{
//				Name:        pulumi.String("example-loadbalancer"),
//				SubnetId:    exampleSubnet.ID(),
//				Region:      example.Region,
//				Description: pulumi.String("Example loadbalancer for documentation with optional attributes"),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("production"),
//					"service":     pulumi.String("web"),
//					"tier":        pulumi.String("frontend"),
//				},
//				Annotations: pulumi.StringMap{
//					"cost-center":  pulumi.String("cc-12345"),
//					"ssl-cert":     pulumi.String("wildcard.example.com"),
//					"health-check": pulumi.String("enabled"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("loadbalancerId", exampleLoadbalancer.ID())
//			return nil
//		})
//	}
//
// ```
type Loadbalancer struct {
	pulumi.CustomResourceState

	// Annotations for the Loadbalancer
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Delete protection for the Loadbalancer
	DeleteProtection pulumi.BoolPtrOutput `pulumi:"deleteProtection"`
	// A human readable description about the loadbalancer
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The external IP addresses of the loadbalancer
	ExternalIpAddresses pulumi.StringArrayOutput `pulumi:"externalIpAddresses"`
	// Internal loadbalancer
	Internal pulumi.BoolPtrOutput `pulumi:"internal"`
	// The IP address of the loadbalancer
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Labels for the Loadbalancer
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the Loadbalancer
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// Region of the Loadbalancer
	Region pulumi.StringOutput `pulumi:"region"`
	// List identities of security group that will be attached to the Loadbalancer
	SecurityGroupAttachments pulumi.StringArrayOutput `pulumi:"securityGroupAttachments"`
	Slug                     pulumi.StringOutput      `pulumi:"slug"`
	// Subnet of the Loadbalancer
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// VPC of the Loadbalancer
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewLoadbalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancer(ctx *pulumi.Context,
	name string, args *LoadbalancerArgs, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Loadbalancer
	err := ctx.RegisterResource("thalassa:index/loadbalancer:Loadbalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancer gets an existing Loadbalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerState, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	var resource Loadbalancer
	err := ctx.ReadResource("thalassa:index/loadbalancer:Loadbalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Loadbalancer resources.
type loadbalancerState struct {
	// Annotations for the Loadbalancer
	Annotations map[string]string `pulumi:"annotations"`
	// Delete protection for the Loadbalancer
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// A human readable description about the loadbalancer
	Description *string `pulumi:"description"`
	// The external IP addresses of the loadbalancer
	ExternalIpAddresses []string `pulumi:"externalIpAddresses"`
	// Internal loadbalancer
	Internal *bool `pulumi:"internal"`
	// The IP address of the loadbalancer
	IpAddress *string `pulumi:"ipAddress"`
	// Labels for the Loadbalancer
	Labels map[string]string `pulumi:"labels"`
	// Name of the Loadbalancer
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Region of the Loadbalancer
	Region *string `pulumi:"region"`
	// List identities of security group that will be attached to the Loadbalancer
	SecurityGroupAttachments []string `pulumi:"securityGroupAttachments"`
	Slug                     *string  `pulumi:"slug"`
	// Subnet of the Loadbalancer
	SubnetId *string `pulumi:"subnetId"`
	// VPC of the Loadbalancer
	VpcId *string `pulumi:"vpcId"`
}

type LoadbalancerState struct {
	// Annotations for the Loadbalancer
	Annotations pulumi.StringMapInput
	// Delete protection for the Loadbalancer
	DeleteProtection pulumi.BoolPtrInput
	// A human readable description about the loadbalancer
	Description pulumi.StringPtrInput
	// The external IP addresses of the loadbalancer
	ExternalIpAddresses pulumi.StringArrayInput
	// Internal loadbalancer
	Internal pulumi.BoolPtrInput
	// The IP address of the loadbalancer
	IpAddress pulumi.StringPtrInput
	// Labels for the Loadbalancer
	Labels pulumi.StringMapInput
	// Name of the Loadbalancer
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Region of the Loadbalancer
	Region pulumi.StringPtrInput
	// List identities of security group that will be attached to the Loadbalancer
	SecurityGroupAttachments pulumi.StringArrayInput
	Slug                     pulumi.StringPtrInput
	// Subnet of the Loadbalancer
	SubnetId pulumi.StringPtrInput
	// VPC of the Loadbalancer
	VpcId pulumi.StringPtrInput
}

func (LoadbalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerState)(nil)).Elem()
}

type loadbalancerArgs struct {
	// Annotations for the Loadbalancer
	Annotations map[string]string `pulumi:"annotations"`
	// Delete protection for the Loadbalancer
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// A human readable description about the loadbalancer
	Description *string `pulumi:"description"`
	// Internal loadbalancer
	Internal *bool `pulumi:"internal"`
	// Labels for the Loadbalancer
	Labels map[string]string `pulumi:"labels"`
	// Name of the Loadbalancer
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Region of the Loadbalancer
	Region string `pulumi:"region"`
	// List identities of security group that will be attached to the Loadbalancer
	SecurityGroupAttachments []string `pulumi:"securityGroupAttachments"`
	// Subnet of the Loadbalancer
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a Loadbalancer resource.
type LoadbalancerArgs struct {
	// Annotations for the Loadbalancer
	Annotations pulumi.StringMapInput
	// Delete protection for the Loadbalancer
	DeleteProtection pulumi.BoolPtrInput
	// A human readable description about the loadbalancer
	Description pulumi.StringPtrInput
	// Internal loadbalancer
	Internal pulumi.BoolPtrInput
	// Labels for the Loadbalancer
	Labels pulumi.StringMapInput
	// Name of the Loadbalancer
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Region of the Loadbalancer
	Region pulumi.StringInput
	// List identities of security group that will be attached to the Loadbalancer
	SecurityGroupAttachments pulumi.StringArrayInput
	// Subnet of the Loadbalancer
	SubnetId pulumi.StringInput
}

func (LoadbalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerArgs)(nil)).Elem()
}

type LoadbalancerInput interface {
	pulumi.Input

	ToLoadbalancerOutput() LoadbalancerOutput
	ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput
}

func (*Loadbalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (i *Loadbalancer) ToLoadbalancerOutput() LoadbalancerOutput {
	return i.ToLoadbalancerOutputWithContext(context.Background())
}

func (i *Loadbalancer) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOutput)
}

// LoadbalancerArrayInput is an input type that accepts LoadbalancerArray and LoadbalancerArrayOutput values.
// You can construct a concrete instance of `LoadbalancerArrayInput` via:
//
//	LoadbalancerArray{ LoadbalancerArgs{...} }
type LoadbalancerArrayInput interface {
	pulumi.Input

	ToLoadbalancerArrayOutput() LoadbalancerArrayOutput
	ToLoadbalancerArrayOutputWithContext(context.Context) LoadbalancerArrayOutput
}

type LoadbalancerArray []LoadbalancerInput

func (LoadbalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Loadbalancer)(nil)).Elem()
}

func (i LoadbalancerArray) ToLoadbalancerArrayOutput() LoadbalancerArrayOutput {
	return i.ToLoadbalancerArrayOutputWithContext(context.Background())
}

func (i LoadbalancerArray) ToLoadbalancerArrayOutputWithContext(ctx context.Context) LoadbalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerArrayOutput)
}

// LoadbalancerMapInput is an input type that accepts LoadbalancerMap and LoadbalancerMapOutput values.
// You can construct a concrete instance of `LoadbalancerMapInput` via:
//
//	LoadbalancerMap{ "key": LoadbalancerArgs{...} }
type LoadbalancerMapInput interface {
	pulumi.Input

	ToLoadbalancerMapOutput() LoadbalancerMapOutput
	ToLoadbalancerMapOutputWithContext(context.Context) LoadbalancerMapOutput
}

type LoadbalancerMap map[string]LoadbalancerInput

func (LoadbalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Loadbalancer)(nil)).Elem()
}

func (i LoadbalancerMap) ToLoadbalancerMapOutput() LoadbalancerMapOutput {
	return i.ToLoadbalancerMapOutputWithContext(context.Background())
}

func (i LoadbalancerMap) ToLoadbalancerMapOutputWithContext(ctx context.Context) LoadbalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerMapOutput)
}

type LoadbalancerOutput struct{ *pulumi.OutputState }

func (LoadbalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerOutput) ToLoadbalancerOutput() LoadbalancerOutput {
	return o
}

func (o LoadbalancerOutput) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return o
}

// Annotations for the Loadbalancer
func (o LoadbalancerOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Delete protection for the Loadbalancer
func (o LoadbalancerOutput) DeleteProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.BoolPtrOutput { return v.DeleteProtection }).(pulumi.BoolPtrOutput)
}

// A human readable description about the loadbalancer
func (o LoadbalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The external IP addresses of the loadbalancer
func (o LoadbalancerOutput) ExternalIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringArrayOutput { return v.ExternalIpAddresses }).(pulumi.StringArrayOutput)
}

// Internal loadbalancer
func (o LoadbalancerOutput) Internal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.BoolPtrOutput { return v.Internal }).(pulumi.BoolPtrOutput)
}

// The IP address of the loadbalancer
func (o LoadbalancerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Labels for the Loadbalancer
func (o LoadbalancerOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the Loadbalancer
func (o LoadbalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LoadbalancerOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Region of the Loadbalancer
func (o LoadbalancerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// List identities of security group that will be attached to the Loadbalancer
func (o LoadbalancerOutput) SecurityGroupAttachments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringArrayOutput { return v.SecurityGroupAttachments }).(pulumi.StringArrayOutput)
}

func (o LoadbalancerOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Subnet of the Loadbalancer
func (o LoadbalancerOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// VPC of the Loadbalancer
func (o LoadbalancerOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type LoadbalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerArrayOutput) ToLoadbalancerArrayOutput() LoadbalancerArrayOutput {
	return o
}

func (o LoadbalancerArrayOutput) ToLoadbalancerArrayOutputWithContext(ctx context.Context) LoadbalancerArrayOutput {
	return o
}

func (o LoadbalancerArrayOutput) Index(i pulumi.IntInput) LoadbalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Loadbalancer {
		return vs[0].([]*Loadbalancer)[vs[1].(int)]
	}).(LoadbalancerOutput)
}

type LoadbalancerMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerMapOutput) ToLoadbalancerMapOutput() LoadbalancerMapOutput {
	return o
}

func (o LoadbalancerMapOutput) ToLoadbalancerMapOutputWithContext(ctx context.Context) LoadbalancerMapOutput {
	return o
}

func (o LoadbalancerMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Loadbalancer {
		return vs[0].(map[string]*Loadbalancer)[vs[1].(string)]
	}).(LoadbalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerInput)(nil)).Elem(), &Loadbalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerArrayInput)(nil)).Elem(), LoadbalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerMapInput)(nil)).Elem(), LoadbalancerMap{})
	pulumi.RegisterOutputType(LoadbalancerOutput{})
	pulumi.RegisterOutputType(LoadbalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerMapOutput{})
}
