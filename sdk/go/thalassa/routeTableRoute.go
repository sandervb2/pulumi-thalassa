// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create an route table route with a destination cidr block, target gateway, target nat gateway and gateway address within a route table.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the route table
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for route table route"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the NAT gateway
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for NAT gateway"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a route table
//			exampleRouteTable, err := thalassa.NewRouteTable(ctx, "example", &thalassa.RouteTableArgs{
//				Name:        pulumi.String("example-route-table"),
//				Description: pulumi.String("Example route table for route"),
//				VpcId:       example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a NAT gateway for the route
//			exampleNatgateway, err := thalassa.NewNatgateway(ctx, "example", &thalassa.NatgatewayArgs{
//				Name:     pulumi.String("example-nat-gateway"),
//				SubnetId: exampleSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a route table route
//			exampleRouteTableRoute, err := thalassa.NewRouteTableRoute(ctx, "example", &thalassa.RouteTableRouteArgs{
//				RouteTableId:     exampleRouteTable.ID(),
//				DestinationCidr:  pulumi.String("0.0.0.0/0"),
//				TargetNatgateway: exampleNatgateway.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("routeId", exampleRouteTableRoute.ID())
//			ctx.Export("routeDestination", exampleRouteTableRoute.DestinationCidr)
//			return nil
//		})
//	}
//
// ```
type RouteTableRoute struct {
	pulumi.CustomResourceState

	// Destination CIDR of the Route
	DestinationCidr pulumi.StringOutput `pulumi:"destinationCidr"`
	// Gateway Address of the Route
	GatewayAddress pulumi.StringPtrOutput `pulumi:"gatewayAddress"`
	// Notes for the Route
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// Organisation of the RouteTable
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// RouteTable of the Route
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// Target Gateway of the Route
	TargetGateway pulumi.StringPtrOutput `pulumi:"targetGateway"`
	// Target NAT Gateway of the Route
	TargetNatgateway pulumi.StringPtrOutput `pulumi:"targetNatgateway"`
}

// NewRouteTableRoute registers a new resource with the given unique name, arguments, and options.
func NewRouteTableRoute(ctx *pulumi.Context,
	name string, args *RouteTableRouteArgs, opts ...pulumi.ResourceOption) (*RouteTableRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidr == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidr'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTableRoute
	err := ctx.RegisterResource("thalassa:index/routeTableRoute:RouteTableRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTableRoute gets an existing RouteTableRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTableRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableRouteState, opts ...pulumi.ResourceOption) (*RouteTableRoute, error) {
	var resource RouteTableRoute
	err := ctx.ReadResource("thalassa:index/routeTableRoute:RouteTableRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTableRoute resources.
type routeTableRouteState struct {
	// Destination CIDR of the Route
	DestinationCidr *string `pulumi:"destinationCidr"`
	// Gateway Address of the Route
	GatewayAddress *string `pulumi:"gatewayAddress"`
	// Notes for the Route
	Notes *string `pulumi:"notes"`
	// Organisation of the RouteTable
	OrganisationId *string `pulumi:"organisationId"`
	// RouteTable of the Route
	RouteTableId *string `pulumi:"routeTableId"`
	// Target Gateway of the Route
	TargetGateway *string `pulumi:"targetGateway"`
	// Target NAT Gateway of the Route
	TargetNatgateway *string `pulumi:"targetNatgateway"`
}

type RouteTableRouteState struct {
	// Destination CIDR of the Route
	DestinationCidr pulumi.StringPtrInput
	// Gateway Address of the Route
	GatewayAddress pulumi.StringPtrInput
	// Notes for the Route
	Notes pulumi.StringPtrInput
	// Organisation of the RouteTable
	OrganisationId pulumi.StringPtrInput
	// RouteTable of the Route
	RouteTableId pulumi.StringPtrInput
	// Target Gateway of the Route
	TargetGateway pulumi.StringPtrInput
	// Target NAT Gateway of the Route
	TargetNatgateway pulumi.StringPtrInput
}

func (RouteTableRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableRouteState)(nil)).Elem()
}

type routeTableRouteArgs struct {
	// Destination CIDR of the Route
	DestinationCidr string `pulumi:"destinationCidr"`
	// Gateway Address of the Route
	GatewayAddress *string `pulumi:"gatewayAddress"`
	// Notes for the Route
	Notes *string `pulumi:"notes"`
	// Organisation of the RouteTable
	OrganisationId *string `pulumi:"organisationId"`
	// RouteTable of the Route
	RouteTableId string `pulumi:"routeTableId"`
	// Target Gateway of the Route
	TargetGateway *string `pulumi:"targetGateway"`
	// Target NAT Gateway of the Route
	TargetNatgateway *string `pulumi:"targetNatgateway"`
}

// The set of arguments for constructing a RouteTableRoute resource.
type RouteTableRouteArgs struct {
	// Destination CIDR of the Route
	DestinationCidr pulumi.StringInput
	// Gateway Address of the Route
	GatewayAddress pulumi.StringPtrInput
	// Notes for the Route
	Notes pulumi.StringPtrInput
	// Organisation of the RouteTable
	OrganisationId pulumi.StringPtrInput
	// RouteTable of the Route
	RouteTableId pulumi.StringInput
	// Target Gateway of the Route
	TargetGateway pulumi.StringPtrInput
	// Target NAT Gateway of the Route
	TargetNatgateway pulumi.StringPtrInput
}

func (RouteTableRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableRouteArgs)(nil)).Elem()
}

type RouteTableRouteInput interface {
	pulumi.Input

	ToRouteTableRouteOutput() RouteTableRouteOutput
	ToRouteTableRouteOutputWithContext(ctx context.Context) RouteTableRouteOutput
}

func (*RouteTableRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableRoute)(nil)).Elem()
}

func (i *RouteTableRoute) ToRouteTableRouteOutput() RouteTableRouteOutput {
	return i.ToRouteTableRouteOutputWithContext(context.Background())
}

func (i *RouteTableRoute) ToRouteTableRouteOutputWithContext(ctx context.Context) RouteTableRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableRouteOutput)
}

// RouteTableRouteArrayInput is an input type that accepts RouteTableRouteArray and RouteTableRouteArrayOutput values.
// You can construct a concrete instance of `RouteTableRouteArrayInput` via:
//
//	RouteTableRouteArray{ RouteTableRouteArgs{...} }
type RouteTableRouteArrayInput interface {
	pulumi.Input

	ToRouteTableRouteArrayOutput() RouteTableRouteArrayOutput
	ToRouteTableRouteArrayOutputWithContext(context.Context) RouteTableRouteArrayOutput
}

type RouteTableRouteArray []RouteTableRouteInput

func (RouteTableRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableRoute)(nil)).Elem()
}

func (i RouteTableRouteArray) ToRouteTableRouteArrayOutput() RouteTableRouteArrayOutput {
	return i.ToRouteTableRouteArrayOutputWithContext(context.Background())
}

func (i RouteTableRouteArray) ToRouteTableRouteArrayOutputWithContext(ctx context.Context) RouteTableRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableRouteArrayOutput)
}

// RouteTableRouteMapInput is an input type that accepts RouteTableRouteMap and RouteTableRouteMapOutput values.
// You can construct a concrete instance of `RouteTableRouteMapInput` via:
//
//	RouteTableRouteMap{ "key": RouteTableRouteArgs{...} }
type RouteTableRouteMapInput interface {
	pulumi.Input

	ToRouteTableRouteMapOutput() RouteTableRouteMapOutput
	ToRouteTableRouteMapOutputWithContext(context.Context) RouteTableRouteMapOutput
}

type RouteTableRouteMap map[string]RouteTableRouteInput

func (RouteTableRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableRoute)(nil)).Elem()
}

func (i RouteTableRouteMap) ToRouteTableRouteMapOutput() RouteTableRouteMapOutput {
	return i.ToRouteTableRouteMapOutputWithContext(context.Background())
}

func (i RouteTableRouteMap) ToRouteTableRouteMapOutputWithContext(ctx context.Context) RouteTableRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableRouteMapOutput)
}

type RouteTableRouteOutput struct{ *pulumi.OutputState }

func (RouteTableRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableRoute)(nil)).Elem()
}

func (o RouteTableRouteOutput) ToRouteTableRouteOutput() RouteTableRouteOutput {
	return o
}

func (o RouteTableRouteOutput) ToRouteTableRouteOutputWithContext(ctx context.Context) RouteTableRouteOutput {
	return o
}

// Destination CIDR of the Route
func (o RouteTableRouteOutput) DestinationCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableRoute) pulumi.StringOutput { return v.DestinationCidr }).(pulumi.StringOutput)
}

// Gateway Address of the Route
func (o RouteTableRouteOutput) GatewayAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteTableRoute) pulumi.StringPtrOutput { return v.GatewayAddress }).(pulumi.StringPtrOutput)
}

// Notes for the Route
func (o RouteTableRouteOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteTableRoute) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// Organisation of the RouteTable
func (o RouteTableRouteOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteTableRoute) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// RouteTable of the Route
func (o RouteTableRouteOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableRoute) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// Target Gateway of the Route
func (o RouteTableRouteOutput) TargetGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteTableRoute) pulumi.StringPtrOutput { return v.TargetGateway }).(pulumi.StringPtrOutput)
}

// Target NAT Gateway of the Route
func (o RouteTableRouteOutput) TargetNatgateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteTableRoute) pulumi.StringPtrOutput { return v.TargetNatgateway }).(pulumi.StringPtrOutput)
}

type RouteTableRouteArrayOutput struct{ *pulumi.OutputState }

func (RouteTableRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableRoute)(nil)).Elem()
}

func (o RouteTableRouteArrayOutput) ToRouteTableRouteArrayOutput() RouteTableRouteArrayOutput {
	return o
}

func (o RouteTableRouteArrayOutput) ToRouteTableRouteArrayOutputWithContext(ctx context.Context) RouteTableRouteArrayOutput {
	return o
}

func (o RouteTableRouteArrayOutput) Index(i pulumi.IntInput) RouteTableRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTableRoute {
		return vs[0].([]*RouteTableRoute)[vs[1].(int)]
	}).(RouteTableRouteOutput)
}

type RouteTableRouteMapOutput struct{ *pulumi.OutputState }

func (RouteTableRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableRoute)(nil)).Elem()
}

func (o RouteTableRouteMapOutput) ToRouteTableRouteMapOutput() RouteTableRouteMapOutput {
	return o
}

func (o RouteTableRouteMapOutput) ToRouteTableRouteMapOutputWithContext(ctx context.Context) RouteTableRouteMapOutput {
	return o
}

func (o RouteTableRouteMapOutput) MapIndex(k pulumi.StringInput) RouteTableRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTableRoute {
		return vs[0].(map[string]*RouteTableRoute)[vs[1].(string)]
	}).(RouteTableRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableRouteInput)(nil)).Elem(), &RouteTableRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableRouteArrayInput)(nil)).Elem(), RouteTableRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableRouteMapInput)(nil)).Elem(), RouteTableRouteMap{})
	pulumi.RegisterOutputType(RouteTableRouteOutput{})
	pulumi.RegisterOutputType(RouteTableRouteArrayOutput{})
	pulumi.RegisterOutputType(RouteTableRouteMapOutput{})
}
