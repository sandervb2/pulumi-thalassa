// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for security group"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a security group
//			exampleSecurityGroup, err := thalassa.NewSecurityGroup(ctx, "example", &thalassa.SecurityGroupArgs{
//				Name:                  pulumi.String("example-security-group"),
//				Description:           pulumi.String("Example security group for documentation"),
//				VpcId:                 example.ID(),
//				AllowSameGroupTraffic: pulumi.Bool(false),
//				IngressRules: thalassa.SecurityGroupIngressRuleArray{
//					&thalassa.SecurityGroupIngressRuleArgs{
//						Name:          pulumi.String("allow-http"),
//						IpVersion:     pulumi.String("ipv4"),
//						Protocol:      pulumi.String("tcp"),
//						Priority:      pulumi.Int(100),
//						RemoteType:    pulumi.String("address"),
//						RemoteAddress: pulumi.String("10.0.0.0/0"),
//						PortRangeMin:  pulumi.Int(80),
//						PortRangeMax:  pulumi.Int(80),
//						Policy:        pulumi.String("allow"),
//					},
//					&thalassa.SecurityGroupIngressRuleArgs{
//						Name:          pulumi.String("allow-https"),
//						IpVersion:     pulumi.String("ipv4"),
//						Protocol:      pulumi.String("tcp"),
//						Priority:      pulumi.Int(101),
//						RemoteType:    pulumi.String("address"),
//						RemoteAddress: pulumi.String("0.0.0.0/0"),
//						PortRangeMin:  pulumi.Int(443),
//						PortRangeMax:  pulumi.Int(443),
//						Policy:        pulumi.String("allow"),
//					},
//				},
//				EgressRules: thalassa.SecurityGroupEgressRuleArray{
//					&thalassa.SecurityGroupEgressRuleArgs{
//						Name:          pulumi.String("allow-all"),
//						IpVersion:     pulumi.String("ipv4"),
//						Protocol:      pulumi.String("all"),
//						Priority:      pulumi.Int(100),
//						RemoteType:    pulumi.String("address"),
//						RemoteAddress: pulumi.String("0.0.0.0/0"),
//						Policy:        pulumi.String("allow"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("securityGroupId", exampleSecurityGroup.ID())
//			ctx.Export("securityGroupName", exampleSecurityGroup.Name)
//			return nil
//		})
//	}
//
// ```
type SecurityGroup struct {
	pulumi.CustomResourceState

	// Flag that indicates if the security group allows traffic between instances in the same security group
	AllowSameGroupTraffic pulumi.BoolPtrOutput `pulumi:"allowSameGroupTraffic"`
	// Creation timestamp of the security group
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the security group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of egress rules for the security group
	EgressRules SecurityGroupEgressRuleArrayOutput `pulumi:"egressRules"`
	// Identity of the security group
	Identity pulumi.StringOutput `pulumi:"identity"`
	// List of ingress rules for the security group
	IngressRules SecurityGroupIngressRuleArrayOutput `pulumi:"ingressRules"`
	// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// Status of the security group
	Status pulumi.StringOutput `pulumi:"status"`
	// Last update timestamp of the security group
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Identity of the VPC that the security group belongs to
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroup(ctx *pulumi.Context,
	name string, args *SecurityGroupArgs, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroup
	err := ctx.RegisterResource("thalassa:index/securityGroup:SecurityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroup gets an existing SecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupState, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	var resource SecurityGroup
	err := ctx.ReadResource("thalassa:index/securityGroup:SecurityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroup resources.
type securityGroupState struct {
	// Flag that indicates if the security group allows traffic between instances in the same security group
	AllowSameGroupTraffic *bool `pulumi:"allowSameGroupTraffic"`
	// Creation timestamp of the security group
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the security group
	Description *string `pulumi:"description"`
	// List of egress rules for the security group
	EgressRules []SecurityGroupEgressRule `pulumi:"egressRules"`
	// Identity of the security group
	Identity *string `pulumi:"identity"`
	// List of ingress rules for the security group
	IngressRules []SecurityGroupIngressRule `pulumi:"ingressRules"`
	// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Status of the security group
	Status *string `pulumi:"status"`
	// Last update timestamp of the security group
	UpdatedAt *string `pulumi:"updatedAt"`
	// Identity of the VPC that the security group belongs to
	VpcId *string `pulumi:"vpcId"`
}

type SecurityGroupState struct {
	// Flag that indicates if the security group allows traffic between instances in the same security group
	AllowSameGroupTraffic pulumi.BoolPtrInput
	// Creation timestamp of the security group
	CreatedAt pulumi.StringPtrInput
	// Description of the security group
	Description pulumi.StringPtrInput
	// List of egress rules for the security group
	EgressRules SecurityGroupEgressRuleArrayInput
	// Identity of the security group
	Identity pulumi.StringPtrInput
	// List of ingress rules for the security group
	IngressRules SecurityGroupIngressRuleArrayInput
	// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Status of the security group
	Status pulumi.StringPtrInput
	// Last update timestamp of the security group
	UpdatedAt pulumi.StringPtrInput
	// Identity of the VPC that the security group belongs to
	VpcId pulumi.StringPtrInput
}

func (SecurityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupState)(nil)).Elem()
}

type securityGroupArgs struct {
	// Flag that indicates if the security group allows traffic between instances in the same security group
	AllowSameGroupTraffic *bool `pulumi:"allowSameGroupTraffic"`
	// Description of the security group
	Description *string `pulumi:"description"`
	// List of egress rules for the security group
	EgressRules []SecurityGroupEgressRule `pulumi:"egressRules"`
	// List of ingress rules for the security group
	IngressRules []SecurityGroupIngressRule `pulumi:"ingressRules"`
	// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Identity of the VPC that the security group belongs to
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a SecurityGroup resource.
type SecurityGroupArgs struct {
	// Flag that indicates if the security group allows traffic between instances in the same security group
	AllowSameGroupTraffic pulumi.BoolPtrInput
	// Description of the security group
	Description pulumi.StringPtrInput
	// List of egress rules for the security group
	EgressRules SecurityGroupEgressRuleArrayInput
	// List of ingress rules for the security group
	IngressRules SecurityGroupIngressRuleArrayInput
	// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Identity of the VPC that the security group belongs to
	VpcId pulumi.StringInput
}

func (SecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupArgs)(nil)).Elem()
}

type SecurityGroupInput interface {
	pulumi.Input

	ToSecurityGroupOutput() SecurityGroupOutput
	ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput
}

func (*SecurityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (i *SecurityGroup) ToSecurityGroupOutput() SecurityGroupOutput {
	return i.ToSecurityGroupOutputWithContext(context.Background())
}

func (i *SecurityGroup) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupOutput)
}

// SecurityGroupArrayInput is an input type that accepts SecurityGroupArray and SecurityGroupArrayOutput values.
// You can construct a concrete instance of `SecurityGroupArrayInput` via:
//
//	SecurityGroupArray{ SecurityGroupArgs{...} }
type SecurityGroupArrayInput interface {
	pulumi.Input

	ToSecurityGroupArrayOutput() SecurityGroupArrayOutput
	ToSecurityGroupArrayOutputWithContext(context.Context) SecurityGroupArrayOutput
}

type SecurityGroupArray []SecurityGroupInput

func (SecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroup)(nil)).Elem()
}

func (i SecurityGroupArray) ToSecurityGroupArrayOutput() SecurityGroupArrayOutput {
	return i.ToSecurityGroupArrayOutputWithContext(context.Background())
}

func (i SecurityGroupArray) ToSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupArrayOutput)
}

// SecurityGroupMapInput is an input type that accepts SecurityGroupMap and SecurityGroupMapOutput values.
// You can construct a concrete instance of `SecurityGroupMapInput` via:
//
//	SecurityGroupMap{ "key": SecurityGroupArgs{...} }
type SecurityGroupMapInput interface {
	pulumi.Input

	ToSecurityGroupMapOutput() SecurityGroupMapOutput
	ToSecurityGroupMapOutputWithContext(context.Context) SecurityGroupMapOutput
}

type SecurityGroupMap map[string]SecurityGroupInput

func (SecurityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroup)(nil)).Elem()
}

func (i SecurityGroupMap) ToSecurityGroupMapOutput() SecurityGroupMapOutput {
	return i.ToSecurityGroupMapOutputWithContext(context.Background())
}

func (i SecurityGroupMap) ToSecurityGroupMapOutputWithContext(ctx context.Context) SecurityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupMapOutput)
}

type SecurityGroupOutput struct{ *pulumi.OutputState }

func (SecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupOutput) ToSecurityGroupOutput() SecurityGroupOutput {
	return o
}

func (o SecurityGroupOutput) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return o
}

// Flag that indicates if the security group allows traffic between instances in the same security group
func (o SecurityGroupOutput) AllowSameGroupTraffic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.BoolPtrOutput { return v.AllowSameGroupTraffic }).(pulumi.BoolPtrOutput)
}

// Creation timestamp of the security group
func (o SecurityGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the security group
func (o SecurityGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of egress rules for the security group
func (o SecurityGroupOutput) EgressRules() SecurityGroupEgressRuleArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupEgressRuleArrayOutput { return v.EgressRules }).(SecurityGroupEgressRuleArrayOutput)
}

// Identity of the security group
func (o SecurityGroupOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

// List of ingress rules for the security group
func (o SecurityGroupOutput) IngressRules() SecurityGroupIngressRuleArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupIngressRuleArrayOutput { return v.IngressRules }).(SecurityGroupIngressRuleArrayOutput)
}

// Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
func (o SecurityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SecurityGroupOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Status of the security group
func (o SecurityGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Last update timestamp of the security group
func (o SecurityGroupOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Identity of the VPC that the security group belongs to
func (o SecurityGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type SecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupArrayOutput) ToSecurityGroupArrayOutput() SecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupArrayOutput) ToSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupArrayOutput) Index(i pulumi.IntInput) SecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroup {
		return vs[0].([]*SecurityGroup)[vs[1].(int)]
	}).(SecurityGroupOutput)
}

type SecurityGroupMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupMapOutput) ToSecurityGroupMapOutput() SecurityGroupMapOutput {
	return o
}

func (o SecurityGroupMapOutput) ToSecurityGroupMapOutputWithContext(ctx context.Context) SecurityGroupMapOutput {
	return o
}

func (o SecurityGroupMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroup {
		return vs[0].(map[string]*SecurityGroup)[vs[1].(string)]
	}).(SecurityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupInput)(nil)).Elem(), &SecurityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupArrayInput)(nil)).Elem(), SecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupMapInput)(nil)).Elem(), SecurityGroupMap{})
	pulumi.RegisterOutputType(SecurityGroupOutput{})
	pulumi.RegisterOutputType(SecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupMapOutput{})
}
