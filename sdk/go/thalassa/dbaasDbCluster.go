// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create an DB Cluster
type DbaasDbCluster struct {
	pulumi.CustomResourceState

	// Amount of storage allocated to the cluster in GB
	AllocatedStorage pulumi.IntOutput `pulumi:"allocatedStorage"`
	// Annotations of the DB Cluster
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Flag indicating if the cluster should automatically upgrade to the latest minor version
	AutoMinorVersionUpgrade pulumi.BoolPtrOutput `pulumi:"autoMinorVersionUpgrade"`
	// Database instance type of the DB Cluster
	DatabaseInstanceType pulumi.StringOutput `pulumi:"databaseInstanceType"`
	// Flag indicating if the cluster should be protected from deletion
	DeleteProtection pulumi.BoolPtrOutput `pulumi:"deleteProtection"`
	// Description of the DB Cluster
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// IPv4 address of the cluster endpoint
	EndpointIpv4 pulumi.StringOutput `pulumi:"endpointIpv4"`
	// IPv6 address of the cluster endpoint
	EndpointIpv6 pulumi.StringOutput `pulumi:"endpointIpv6"`
	// Database engine of the cluster
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Version of the database engine
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// Map of init db parameters
	InitDb pulumi.StringMapOutput `pulumi:"initDb"`
	// Labels of the DB Cluster
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the DB Cluster
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// Map of parameter name to database engine specific parameter value
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// Port of the cluster endpoint
	Port pulumi.IntOutput `pulumi:"port"`
	// Number of instances in the cluster
	Replicas pulumi.IntPtrOutput `pulumi:"replicas"`
	// Identity of the backup to restore from
	RestoreFromBackupIdentity pulumi.StringPtrOutput `pulumi:"restoreFromBackupIdentity"`
	// List of security groups associated with the cluster
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Status of the cluster
	Status pulumi.StringOutput `pulumi:"status"`
	// Subnet of the DB Cluster
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Storage type used to determine the size of the cluster storage
	VolumeTypeClass pulumi.StringOutput `pulumi:"volumeTypeClass"`
}

// NewDbaasDbCluster registers a new resource with the given unique name, arguments, and options.
func NewDbaasDbCluster(ctx *pulumi.Context,
	name string, args *DbaasDbClusterArgs, opts ...pulumi.ResourceOption) (*DbaasDbCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocatedStorage == nil {
		return nil, errors.New("invalid value for required argument 'AllocatedStorage'")
	}
	if args.DatabaseInstanceType == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseInstanceType'")
	}
	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.EngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'EngineVersion'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VolumeTypeClass == nil {
		return nil, errors.New("invalid value for required argument 'VolumeTypeClass'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasDbCluster
	err := ctx.RegisterResource("thalassa:index/dbaasDbCluster:DbaasDbCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasDbCluster gets an existing DbaasDbCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasDbCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasDbClusterState, opts ...pulumi.ResourceOption) (*DbaasDbCluster, error) {
	var resource DbaasDbCluster
	err := ctx.ReadResource("thalassa:index/dbaasDbCluster:DbaasDbCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasDbCluster resources.
type dbaasDbClusterState struct {
	// Amount of storage allocated to the cluster in GB
	AllocatedStorage *int `pulumi:"allocatedStorage"`
	// Annotations of the DB Cluster
	Annotations map[string]string `pulumi:"annotations"`
	// Flag indicating if the cluster should automatically upgrade to the latest minor version
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// Database instance type of the DB Cluster
	DatabaseInstanceType *string `pulumi:"databaseInstanceType"`
	// Flag indicating if the cluster should be protected from deletion
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// Description of the DB Cluster
	Description *string `pulumi:"description"`
	// IPv4 address of the cluster endpoint
	EndpointIpv4 *string `pulumi:"endpointIpv4"`
	// IPv6 address of the cluster endpoint
	EndpointIpv6 *string `pulumi:"endpointIpv6"`
	// Database engine of the cluster
	Engine *string `pulumi:"engine"`
	// Version of the database engine
	EngineVersion *string `pulumi:"engineVersion"`
	// Map of init db parameters
	InitDb map[string]string `pulumi:"initDb"`
	// Labels of the DB Cluster
	Labels map[string]string `pulumi:"labels"`
	// Name of the DB Cluster
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Map of parameter name to database engine specific parameter value
	Parameters map[string]string `pulumi:"parameters"`
	// Port of the cluster endpoint
	Port *int `pulumi:"port"`
	// Number of instances in the cluster
	Replicas *int `pulumi:"replicas"`
	// Identity of the backup to restore from
	RestoreFromBackupIdentity *string `pulumi:"restoreFromBackupIdentity"`
	// List of security groups associated with the cluster
	SecurityGroups []string `pulumi:"securityGroups"`
	// Status of the cluster
	Status *string `pulumi:"status"`
	// Subnet of the DB Cluster
	SubnetId *string `pulumi:"subnetId"`
	// Storage type used to determine the size of the cluster storage
	VolumeTypeClass *string `pulumi:"volumeTypeClass"`
}

type DbaasDbClusterState struct {
	// Amount of storage allocated to the cluster in GB
	AllocatedStorage pulumi.IntPtrInput
	// Annotations of the DB Cluster
	Annotations pulumi.StringMapInput
	// Flag indicating if the cluster should automatically upgrade to the latest minor version
	AutoMinorVersionUpgrade pulumi.BoolPtrInput
	// Database instance type of the DB Cluster
	DatabaseInstanceType pulumi.StringPtrInput
	// Flag indicating if the cluster should be protected from deletion
	DeleteProtection pulumi.BoolPtrInput
	// Description of the DB Cluster
	Description pulumi.StringPtrInput
	// IPv4 address of the cluster endpoint
	EndpointIpv4 pulumi.StringPtrInput
	// IPv6 address of the cluster endpoint
	EndpointIpv6 pulumi.StringPtrInput
	// Database engine of the cluster
	Engine pulumi.StringPtrInput
	// Version of the database engine
	EngineVersion pulumi.StringPtrInput
	// Map of init db parameters
	InitDb pulumi.StringMapInput
	// Labels of the DB Cluster
	Labels pulumi.StringMapInput
	// Name of the DB Cluster
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Map of parameter name to database engine specific parameter value
	Parameters pulumi.StringMapInput
	// Port of the cluster endpoint
	Port pulumi.IntPtrInput
	// Number of instances in the cluster
	Replicas pulumi.IntPtrInput
	// Identity of the backup to restore from
	RestoreFromBackupIdentity pulumi.StringPtrInput
	// List of security groups associated with the cluster
	SecurityGroups pulumi.StringArrayInput
	// Status of the cluster
	Status pulumi.StringPtrInput
	// Subnet of the DB Cluster
	SubnetId pulumi.StringPtrInput
	// Storage type used to determine the size of the cluster storage
	VolumeTypeClass pulumi.StringPtrInput
}

func (DbaasDbClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasDbClusterState)(nil)).Elem()
}

type dbaasDbClusterArgs struct {
	// Amount of storage allocated to the cluster in GB
	AllocatedStorage int `pulumi:"allocatedStorage"`
	// Annotations of the DB Cluster
	Annotations map[string]string `pulumi:"annotations"`
	// Flag indicating if the cluster should automatically upgrade to the latest minor version
	AutoMinorVersionUpgrade *bool `pulumi:"autoMinorVersionUpgrade"`
	// Database instance type of the DB Cluster
	DatabaseInstanceType string `pulumi:"databaseInstanceType"`
	// Flag indicating if the cluster should be protected from deletion
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// Description of the DB Cluster
	Description *string `pulumi:"description"`
	// Database engine of the cluster
	Engine string `pulumi:"engine"`
	// Version of the database engine
	EngineVersion string `pulumi:"engineVersion"`
	// Map of init db parameters
	InitDb map[string]string `pulumi:"initDb"`
	// Labels of the DB Cluster
	Labels map[string]string `pulumi:"labels"`
	// Name of the DB Cluster
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Map of parameter name to database engine specific parameter value
	Parameters map[string]string `pulumi:"parameters"`
	// Number of instances in the cluster
	Replicas *int `pulumi:"replicas"`
	// Identity of the backup to restore from
	RestoreFromBackupIdentity *string `pulumi:"restoreFromBackupIdentity"`
	// List of security groups associated with the cluster
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnet of the DB Cluster
	SubnetId string `pulumi:"subnetId"`
	// Storage type used to determine the size of the cluster storage
	VolumeTypeClass string `pulumi:"volumeTypeClass"`
}

// The set of arguments for constructing a DbaasDbCluster resource.
type DbaasDbClusterArgs struct {
	// Amount of storage allocated to the cluster in GB
	AllocatedStorage pulumi.IntInput
	// Annotations of the DB Cluster
	Annotations pulumi.StringMapInput
	// Flag indicating if the cluster should automatically upgrade to the latest minor version
	AutoMinorVersionUpgrade pulumi.BoolPtrInput
	// Database instance type of the DB Cluster
	DatabaseInstanceType pulumi.StringInput
	// Flag indicating if the cluster should be protected from deletion
	DeleteProtection pulumi.BoolPtrInput
	// Description of the DB Cluster
	Description pulumi.StringPtrInput
	// Database engine of the cluster
	Engine pulumi.StringInput
	// Version of the database engine
	EngineVersion pulumi.StringInput
	// Map of init db parameters
	InitDb pulumi.StringMapInput
	// Labels of the DB Cluster
	Labels pulumi.StringMapInput
	// Name of the DB Cluster
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Map of parameter name to database engine specific parameter value
	Parameters pulumi.StringMapInput
	// Number of instances in the cluster
	Replicas pulumi.IntPtrInput
	// Identity of the backup to restore from
	RestoreFromBackupIdentity pulumi.StringPtrInput
	// List of security groups associated with the cluster
	SecurityGroups pulumi.StringArrayInput
	// Subnet of the DB Cluster
	SubnetId pulumi.StringInput
	// Storage type used to determine the size of the cluster storage
	VolumeTypeClass pulumi.StringInput
}

func (DbaasDbClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasDbClusterArgs)(nil)).Elem()
}

type DbaasDbClusterInput interface {
	pulumi.Input

	ToDbaasDbClusterOutput() DbaasDbClusterOutput
	ToDbaasDbClusterOutputWithContext(ctx context.Context) DbaasDbClusterOutput
}

func (*DbaasDbCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasDbCluster)(nil)).Elem()
}

func (i *DbaasDbCluster) ToDbaasDbClusterOutput() DbaasDbClusterOutput {
	return i.ToDbaasDbClusterOutputWithContext(context.Background())
}

func (i *DbaasDbCluster) ToDbaasDbClusterOutputWithContext(ctx context.Context) DbaasDbClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasDbClusterOutput)
}

// DbaasDbClusterArrayInput is an input type that accepts DbaasDbClusterArray and DbaasDbClusterArrayOutput values.
// You can construct a concrete instance of `DbaasDbClusterArrayInput` via:
//
//	DbaasDbClusterArray{ DbaasDbClusterArgs{...} }
type DbaasDbClusterArrayInput interface {
	pulumi.Input

	ToDbaasDbClusterArrayOutput() DbaasDbClusterArrayOutput
	ToDbaasDbClusterArrayOutputWithContext(context.Context) DbaasDbClusterArrayOutput
}

type DbaasDbClusterArray []DbaasDbClusterInput

func (DbaasDbClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasDbCluster)(nil)).Elem()
}

func (i DbaasDbClusterArray) ToDbaasDbClusterArrayOutput() DbaasDbClusterArrayOutput {
	return i.ToDbaasDbClusterArrayOutputWithContext(context.Background())
}

func (i DbaasDbClusterArray) ToDbaasDbClusterArrayOutputWithContext(ctx context.Context) DbaasDbClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasDbClusterArrayOutput)
}

// DbaasDbClusterMapInput is an input type that accepts DbaasDbClusterMap and DbaasDbClusterMapOutput values.
// You can construct a concrete instance of `DbaasDbClusterMapInput` via:
//
//	DbaasDbClusterMap{ "key": DbaasDbClusterArgs{...} }
type DbaasDbClusterMapInput interface {
	pulumi.Input

	ToDbaasDbClusterMapOutput() DbaasDbClusterMapOutput
	ToDbaasDbClusterMapOutputWithContext(context.Context) DbaasDbClusterMapOutput
}

type DbaasDbClusterMap map[string]DbaasDbClusterInput

func (DbaasDbClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasDbCluster)(nil)).Elem()
}

func (i DbaasDbClusterMap) ToDbaasDbClusterMapOutput() DbaasDbClusterMapOutput {
	return i.ToDbaasDbClusterMapOutputWithContext(context.Background())
}

func (i DbaasDbClusterMap) ToDbaasDbClusterMapOutputWithContext(ctx context.Context) DbaasDbClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasDbClusterMapOutput)
}

type DbaasDbClusterOutput struct{ *pulumi.OutputState }

func (DbaasDbClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasDbCluster)(nil)).Elem()
}

func (o DbaasDbClusterOutput) ToDbaasDbClusterOutput() DbaasDbClusterOutput {
	return o
}

func (o DbaasDbClusterOutput) ToDbaasDbClusterOutputWithContext(ctx context.Context) DbaasDbClusterOutput {
	return o
}

// Amount of storage allocated to the cluster in GB
func (o DbaasDbClusterOutput) AllocatedStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.IntOutput { return v.AllocatedStorage }).(pulumi.IntOutput)
}

// Annotations of the DB Cluster
func (o DbaasDbClusterOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Flag indicating if the cluster should automatically upgrade to the latest minor version
func (o DbaasDbClusterOutput) AutoMinorVersionUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.BoolPtrOutput { return v.AutoMinorVersionUpgrade }).(pulumi.BoolPtrOutput)
}

// Database instance type of the DB Cluster
func (o DbaasDbClusterOutput) DatabaseInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.DatabaseInstanceType }).(pulumi.StringOutput)
}

// Flag indicating if the cluster should be protected from deletion
func (o DbaasDbClusterOutput) DeleteProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.BoolPtrOutput { return v.DeleteProtection }).(pulumi.BoolPtrOutput)
}

// Description of the DB Cluster
func (o DbaasDbClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// IPv4 address of the cluster endpoint
func (o DbaasDbClusterOutput) EndpointIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.EndpointIpv4 }).(pulumi.StringOutput)
}

// IPv6 address of the cluster endpoint
func (o DbaasDbClusterOutput) EndpointIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.EndpointIpv6 }).(pulumi.StringOutput)
}

// Database engine of the cluster
func (o DbaasDbClusterOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Version of the database engine
func (o DbaasDbClusterOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// Map of init db parameters
func (o DbaasDbClusterOutput) InitDb() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringMapOutput { return v.InitDb }).(pulumi.StringMapOutput)
}

// Labels of the DB Cluster
func (o DbaasDbClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the DB Cluster
func (o DbaasDbClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DbaasDbClusterOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Map of parameter name to database engine specific parameter value
func (o DbaasDbClusterOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// Port of the cluster endpoint
func (o DbaasDbClusterOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Number of instances in the cluster
func (o DbaasDbClusterOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.IntPtrOutput { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Identity of the backup to restore from
func (o DbaasDbClusterOutput) RestoreFromBackupIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringPtrOutput { return v.RestoreFromBackupIdentity }).(pulumi.StringPtrOutput)
}

// List of security groups associated with the cluster
func (o DbaasDbClusterOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Status of the cluster
func (o DbaasDbClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Subnet of the DB Cluster
func (o DbaasDbClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Storage type used to determine the size of the cluster storage
func (o DbaasDbClusterOutput) VolumeTypeClass() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbCluster) pulumi.StringOutput { return v.VolumeTypeClass }).(pulumi.StringOutput)
}

type DbaasDbClusterArrayOutput struct{ *pulumi.OutputState }

func (DbaasDbClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasDbCluster)(nil)).Elem()
}

func (o DbaasDbClusterArrayOutput) ToDbaasDbClusterArrayOutput() DbaasDbClusterArrayOutput {
	return o
}

func (o DbaasDbClusterArrayOutput) ToDbaasDbClusterArrayOutputWithContext(ctx context.Context) DbaasDbClusterArrayOutput {
	return o
}

func (o DbaasDbClusterArrayOutput) Index(i pulumi.IntInput) DbaasDbClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasDbCluster {
		return vs[0].([]*DbaasDbCluster)[vs[1].(int)]
	}).(DbaasDbClusterOutput)
}

type DbaasDbClusterMapOutput struct{ *pulumi.OutputState }

func (DbaasDbClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasDbCluster)(nil)).Elem()
}

func (o DbaasDbClusterMapOutput) ToDbaasDbClusterMapOutput() DbaasDbClusterMapOutput {
	return o
}

func (o DbaasDbClusterMapOutput) ToDbaasDbClusterMapOutputWithContext(ctx context.Context) DbaasDbClusterMapOutput {
	return o
}

func (o DbaasDbClusterMapOutput) MapIndex(k pulumi.StringInput) DbaasDbClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasDbCluster {
		return vs[0].(map[string]*DbaasDbCluster)[vs[1].(string)]
	}).(DbaasDbClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasDbClusterInput)(nil)).Elem(), &DbaasDbCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasDbClusterArrayInput)(nil)).Elem(), DbaasDbClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasDbClusterMapInput)(nil)).Elem(), DbaasDbClusterMap{})
	pulumi.RegisterOutputType(DbaasDbClusterOutput{})
	pulumi.RegisterOutputType(DbaasDbClusterArrayOutput{})
	pulumi.RegisterOutputType(DbaasDbClusterMapOutput{})
}
