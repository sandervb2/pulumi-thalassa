// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create and manage an object storage bucket
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a basic object storage bucket
//			basic, err := thalassa.NewObjectstorageBucket(ctx, "basic", &thalassa.ObjectstorageBucketArgs{
//				Name:   pulumi.String("my-basic-bucket"),
//				Region: pulumi.String("nl-01"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a public object storage bucket
//			public, err := thalassa.NewObjectstorageBucket(ctx, "public", &thalassa.ObjectstorageBucketArgs{
//				Name:   pulumi.String("my-public-bucket"),
//				Region: pulumi.String("nl-01"),
//				Public: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					map[string]interface{}{
//						"Sid":    "AllowReadAccess",
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Thalassa": "*",
//						},
//						"Action": []string{
//							"s3:GetObject",
//						},
//						"Resource": []string{
//							"arn:thalassa:s3:::my-policy-bucket/*",
//						},
//						"Condition": map[string]interface{}{
//							"StringEquals": map[string]interface{}{
//								"thalassa:User": "u-exampleuserid",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			// Create a bucket with a custom policy
//			withPolicy, err := thalassa.NewObjectstorageBucket(ctx, "with_policy", &thalassa.ObjectstorageBucketArgs{
//				Name:   pulumi.String("my-policy-bucket"),
//				Region: pulumi.String("nl-01"),
//				Public: pulumi.Bool(false),
//				Policy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("basicBucketId", basic.ID())
//			ctx.Export("basicBucketName", basic.Name)
//			ctx.Export("basicBucketEndpoint", basic.Endpoint)
//			ctx.Export("publicBucketId", public.ID())
//			ctx.Export("publicBucketName", public.Name)
//			ctx.Export("policyBucketId", withPolicy.ID())
//			ctx.Export("policyBucketName", withPolicy.Name)
//			return nil
//		})
//	}
//
// ```
type ObjectstorageBucket struct {
	pulumi.CustomResourceState

	// The endpoint URL for the bucket
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Name of the bucket
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// The bucket policy as a JSON string
	Policy pulumi.StringPtrOutput `pulumi:"policy"`
	// Whether the bucket is publicly accessible
	Public pulumi.BoolPtrOutput `pulumi:"public"`
	// Region of the bucket
	Region pulumi.StringOutput `pulumi:"region"`
	// Status of the bucket
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewObjectstorageBucket registers a new resource with the given unique name, arguments, and options.
func NewObjectstorageBucket(ctx *pulumi.Context,
	name string, args *ObjectstorageBucketArgs, opts ...pulumi.ResourceOption) (*ObjectstorageBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObjectstorageBucket
	err := ctx.RegisterResource("thalassa:index/objectstorageBucket:ObjectstorageBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectstorageBucket gets an existing ObjectstorageBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectstorageBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectstorageBucketState, opts ...pulumi.ResourceOption) (*ObjectstorageBucket, error) {
	var resource ObjectstorageBucket
	err := ctx.ReadResource("thalassa:index/objectstorageBucket:ObjectstorageBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectstorageBucket resources.
type objectstorageBucketState struct {
	// The endpoint URL for the bucket
	Endpoint *string `pulumi:"endpoint"`
	// Name of the bucket
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The bucket policy as a JSON string
	Policy *string `pulumi:"policy"`
	// Whether the bucket is publicly accessible
	Public *bool `pulumi:"public"`
	// Region of the bucket
	Region *string `pulumi:"region"`
	// Status of the bucket
	Status *string `pulumi:"status"`
}

type ObjectstorageBucketState struct {
	// The endpoint URL for the bucket
	Endpoint pulumi.StringPtrInput
	// Name of the bucket
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The bucket policy as a JSON string
	Policy pulumi.StringPtrInput
	// Whether the bucket is publicly accessible
	Public pulumi.BoolPtrInput
	// Region of the bucket
	Region pulumi.StringPtrInput
	// Status of the bucket
	Status pulumi.StringPtrInput
}

func (ObjectstorageBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectstorageBucketState)(nil)).Elem()
}

type objectstorageBucketArgs struct {
	// Name of the bucket
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The bucket policy as a JSON string
	Policy *string `pulumi:"policy"`
	// Whether the bucket is publicly accessible
	Public *bool `pulumi:"public"`
	// Region of the bucket
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a ObjectstorageBucket resource.
type ObjectstorageBucketArgs struct {
	// Name of the bucket
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The bucket policy as a JSON string
	Policy pulumi.StringPtrInput
	// Whether the bucket is publicly accessible
	Public pulumi.BoolPtrInput
	// Region of the bucket
	Region pulumi.StringInput
}

func (ObjectstorageBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectstorageBucketArgs)(nil)).Elem()
}

type ObjectstorageBucketInput interface {
	pulumi.Input

	ToObjectstorageBucketOutput() ObjectstorageBucketOutput
	ToObjectstorageBucketOutputWithContext(ctx context.Context) ObjectstorageBucketOutput
}

func (*ObjectstorageBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectstorageBucket)(nil)).Elem()
}

func (i *ObjectstorageBucket) ToObjectstorageBucketOutput() ObjectstorageBucketOutput {
	return i.ToObjectstorageBucketOutputWithContext(context.Background())
}

func (i *ObjectstorageBucket) ToObjectstorageBucketOutputWithContext(ctx context.Context) ObjectstorageBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageBucketOutput)
}

// ObjectstorageBucketArrayInput is an input type that accepts ObjectstorageBucketArray and ObjectstorageBucketArrayOutput values.
// You can construct a concrete instance of `ObjectstorageBucketArrayInput` via:
//
//	ObjectstorageBucketArray{ ObjectstorageBucketArgs{...} }
type ObjectstorageBucketArrayInput interface {
	pulumi.Input

	ToObjectstorageBucketArrayOutput() ObjectstorageBucketArrayOutput
	ToObjectstorageBucketArrayOutputWithContext(context.Context) ObjectstorageBucketArrayOutput
}

type ObjectstorageBucketArray []ObjectstorageBucketInput

func (ObjectstorageBucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectstorageBucket)(nil)).Elem()
}

func (i ObjectstorageBucketArray) ToObjectstorageBucketArrayOutput() ObjectstorageBucketArrayOutput {
	return i.ToObjectstorageBucketArrayOutputWithContext(context.Background())
}

func (i ObjectstorageBucketArray) ToObjectstorageBucketArrayOutputWithContext(ctx context.Context) ObjectstorageBucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageBucketArrayOutput)
}

// ObjectstorageBucketMapInput is an input type that accepts ObjectstorageBucketMap and ObjectstorageBucketMapOutput values.
// You can construct a concrete instance of `ObjectstorageBucketMapInput` via:
//
//	ObjectstorageBucketMap{ "key": ObjectstorageBucketArgs{...} }
type ObjectstorageBucketMapInput interface {
	pulumi.Input

	ToObjectstorageBucketMapOutput() ObjectstorageBucketMapOutput
	ToObjectstorageBucketMapOutputWithContext(context.Context) ObjectstorageBucketMapOutput
}

type ObjectstorageBucketMap map[string]ObjectstorageBucketInput

func (ObjectstorageBucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectstorageBucket)(nil)).Elem()
}

func (i ObjectstorageBucketMap) ToObjectstorageBucketMapOutput() ObjectstorageBucketMapOutput {
	return i.ToObjectstorageBucketMapOutputWithContext(context.Background())
}

func (i ObjectstorageBucketMap) ToObjectstorageBucketMapOutputWithContext(ctx context.Context) ObjectstorageBucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectstorageBucketMapOutput)
}

type ObjectstorageBucketOutput struct{ *pulumi.OutputState }

func (ObjectstorageBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectstorageBucket)(nil)).Elem()
}

func (o ObjectstorageBucketOutput) ToObjectstorageBucketOutput() ObjectstorageBucketOutput {
	return o
}

func (o ObjectstorageBucketOutput) ToObjectstorageBucketOutputWithContext(ctx context.Context) ObjectstorageBucketOutput {
	return o
}

// The endpoint URL for the bucket
func (o ObjectstorageBucketOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Name of the bucket
func (o ObjectstorageBucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ObjectstorageBucketOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// The bucket policy as a JSON string
func (o ObjectstorageBucketOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringPtrOutput { return v.Policy }).(pulumi.StringPtrOutput)
}

// Whether the bucket is publicly accessible
func (o ObjectstorageBucketOutput) Public() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.BoolPtrOutput { return v.Public }).(pulumi.BoolPtrOutput)
}

// Region of the bucket
func (o ObjectstorageBucketOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Status of the bucket
func (o ObjectstorageBucketOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectstorageBucket) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ObjectstorageBucketArrayOutput struct{ *pulumi.OutputState }

func (ObjectstorageBucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectstorageBucket)(nil)).Elem()
}

func (o ObjectstorageBucketArrayOutput) ToObjectstorageBucketArrayOutput() ObjectstorageBucketArrayOutput {
	return o
}

func (o ObjectstorageBucketArrayOutput) ToObjectstorageBucketArrayOutputWithContext(ctx context.Context) ObjectstorageBucketArrayOutput {
	return o
}

func (o ObjectstorageBucketArrayOutput) Index(i pulumi.IntInput) ObjectstorageBucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectstorageBucket {
		return vs[0].([]*ObjectstorageBucket)[vs[1].(int)]
	}).(ObjectstorageBucketOutput)
}

type ObjectstorageBucketMapOutput struct{ *pulumi.OutputState }

func (ObjectstorageBucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectstorageBucket)(nil)).Elem()
}

func (o ObjectstorageBucketMapOutput) ToObjectstorageBucketMapOutput() ObjectstorageBucketMapOutput {
	return o
}

func (o ObjectstorageBucketMapOutput) ToObjectstorageBucketMapOutputWithContext(ctx context.Context) ObjectstorageBucketMapOutput {
	return o
}

func (o ObjectstorageBucketMapOutput) MapIndex(k pulumi.StringInput) ObjectstorageBucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectstorageBucket {
		return vs[0].(map[string]*ObjectstorageBucket)[vs[1].(string)]
	}).(ObjectstorageBucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageBucketInput)(nil)).Elem(), &ObjectstorageBucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageBucketArrayInput)(nil)).Elem(), ObjectstorageBucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectstorageBucketMapInput)(nil)).Elem(), ObjectstorageBucketMap{})
	pulumi.RegisterOutputType(ObjectstorageBucketOutput{})
	pulumi.RegisterOutputType(ObjectstorageBucketArrayOutput{})
	pulumi.RegisterOutputType(ObjectstorageBucketMapOutput{})
}
