// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create a listener for a loadbalancer
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the load balancer
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for load balancer listener"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the loadbalancer
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for loadbalancer"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a load balancer
//			exampleLoadbalancer, err := thalassa.NewLoadbalancer(ctx, "example", &thalassa.LoadbalancerArgs{
//				Name:        pulumi.String("example-loadbalancer"),
//				Description: pulumi.String("Example load balancer for listener"),
//				SubnetId:    exampleSubnet.ID(),
//				Region:      pulumi.String("nl-01"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a target group for the listener
//			exampleTargetGroup, err := thalassa.NewTargetGroup(ctx, "example", &thalassa.TargetGroupArgs{
//				Name:        pulumi.String("example-target-group"),
//				Description: pulumi.String("Example target group for listener"),
//				VpcId:       example.ID(),
//				Protocol:    pulumi.String("tcp"),
//				Port:        pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a load balancer listener with all required attributes
//			exampleLoadbalancerListener, err := thalassa.NewLoadbalancerListener(ctx, "example", &thalassa.LoadbalancerListenerArgs{
//				LoadbalancerId: exampleLoadbalancer.ID(),
//				Name:           pulumi.String("example-listener"),
//				Protocol:       pulumi.String("tcp"),
//				Port:           pulumi.Int(80),
//				TargetGroupId:  exampleTargetGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("listenerId", exampleLoadbalancerListener.ID())
//			ctx.Export("listenerName", exampleLoadbalancerListener.Name)
//			return nil
//		})
//	}
//
// ```
type LoadbalancerListener struct {
	pulumi.CustomResourceState

	// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
	AllowedSources pulumi.StringArrayOutput `pulumi:"allowedSources"`
	// Annotations for the Loadbalancer Listener
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The amount of seconds used for configuring the idle connection timeout on a listener
	ConnectionIdleTimeout pulumi.IntPtrOutput `pulumi:"connectionIdleTimeout"`
	// A human readable description about the loadbalancer listener
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels for the Loadbalancer Listener
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The ID of the loadbalancer to create the listener on
	LoadbalancerId pulumi.StringOutput `pulumi:"loadbalancerId"`
	// The maximum number of connections that the listener can handle
	MaxConnections pulumi.IntPtrOutput `pulumi:"maxConnections"`
	// Name of the Loadbalancer Listener
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// The port the listener is listening on
	Port pulumi.IntOutput `pulumi:"port"`
	// The protocol the listener is using
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	Slug     pulumi.StringOutput `pulumi:"slug"`
	// The ID of the target group to attach to the listener
	TargetGroupId pulumi.StringOutput `pulumi:"targetGroupId"`
}

// NewLoadbalancerListener registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancerListener(ctx *pulumi.Context,
	name string, args *LoadbalancerListenerArgs, opts ...pulumi.ResourceOption) (*LoadbalancerListener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadbalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadbalancerId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.TargetGroupId == nil {
		return nil, errors.New("invalid value for required argument 'TargetGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadbalancerListener
	err := ctx.RegisterResource("thalassa:index/loadbalancerListener:LoadbalancerListener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancerListener gets an existing LoadbalancerListener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancerListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerListenerState, opts ...pulumi.ResourceOption) (*LoadbalancerListener, error) {
	var resource LoadbalancerListener
	err := ctx.ReadResource("thalassa:index/loadbalancerListener:LoadbalancerListener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadbalancerListener resources.
type loadbalancerListenerState struct {
	// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
	AllowedSources []string `pulumi:"allowedSources"`
	// Annotations for the Loadbalancer Listener
	Annotations map[string]string `pulumi:"annotations"`
	// The amount of seconds used for configuring the idle connection timeout on a listener
	ConnectionIdleTimeout *int `pulumi:"connectionIdleTimeout"`
	// A human readable description about the loadbalancer listener
	Description *string `pulumi:"description"`
	// Labels for the Loadbalancer Listener
	Labels map[string]string `pulumi:"labels"`
	// The ID of the loadbalancer to create the listener on
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// The maximum number of connections that the listener can handle
	MaxConnections *int `pulumi:"maxConnections"`
	// Name of the Loadbalancer Listener
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The port the listener is listening on
	Port *int `pulumi:"port"`
	// The protocol the listener is using
	Protocol *string `pulumi:"protocol"`
	Slug     *string `pulumi:"slug"`
	// The ID of the target group to attach to the listener
	TargetGroupId *string `pulumi:"targetGroupId"`
}

type LoadbalancerListenerState struct {
	// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
	AllowedSources pulumi.StringArrayInput
	// Annotations for the Loadbalancer Listener
	Annotations pulumi.StringMapInput
	// The amount of seconds used for configuring the idle connection timeout on a listener
	ConnectionIdleTimeout pulumi.IntPtrInput
	// A human readable description about the loadbalancer listener
	Description pulumi.StringPtrInput
	// Labels for the Loadbalancer Listener
	Labels pulumi.StringMapInput
	// The ID of the loadbalancer to create the listener on
	LoadbalancerId pulumi.StringPtrInput
	// The maximum number of connections that the listener can handle
	MaxConnections pulumi.IntPtrInput
	// Name of the Loadbalancer Listener
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The port the listener is listening on
	Port pulumi.IntPtrInput
	// The protocol the listener is using
	Protocol pulumi.StringPtrInput
	Slug     pulumi.StringPtrInput
	// The ID of the target group to attach to the listener
	TargetGroupId pulumi.StringPtrInput
}

func (LoadbalancerListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerListenerState)(nil)).Elem()
}

type loadbalancerListenerArgs struct {
	// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
	AllowedSources []string `pulumi:"allowedSources"`
	// Annotations for the Loadbalancer Listener
	Annotations map[string]string `pulumi:"annotations"`
	// The amount of seconds used for configuring the idle connection timeout on a listener
	ConnectionIdleTimeout *int `pulumi:"connectionIdleTimeout"`
	// A human readable description about the loadbalancer listener
	Description *string `pulumi:"description"`
	// Labels for the Loadbalancer Listener
	Labels map[string]string `pulumi:"labels"`
	// The ID of the loadbalancer to create the listener on
	LoadbalancerId string `pulumi:"loadbalancerId"`
	// The maximum number of connections that the listener can handle
	MaxConnections *int `pulumi:"maxConnections"`
	// Name of the Loadbalancer Listener
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The port the listener is listening on
	Port int `pulumi:"port"`
	// The protocol the listener is using
	Protocol string `pulumi:"protocol"`
	// The ID of the target group to attach to the listener
	TargetGroupId string `pulumi:"targetGroupId"`
}

// The set of arguments for constructing a LoadbalancerListener resource.
type LoadbalancerListenerArgs struct {
	// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
	AllowedSources pulumi.StringArrayInput
	// Annotations for the Loadbalancer Listener
	Annotations pulumi.StringMapInput
	// The amount of seconds used for configuring the idle connection timeout on a listener
	ConnectionIdleTimeout pulumi.IntPtrInput
	// A human readable description about the loadbalancer listener
	Description pulumi.StringPtrInput
	// Labels for the Loadbalancer Listener
	Labels pulumi.StringMapInput
	// The ID of the loadbalancer to create the listener on
	LoadbalancerId pulumi.StringInput
	// The maximum number of connections that the listener can handle
	MaxConnections pulumi.IntPtrInput
	// Name of the Loadbalancer Listener
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The port the listener is listening on
	Port pulumi.IntInput
	// The protocol the listener is using
	Protocol pulumi.StringInput
	// The ID of the target group to attach to the listener
	TargetGroupId pulumi.StringInput
}

func (LoadbalancerListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerListenerArgs)(nil)).Elem()
}

type LoadbalancerListenerInput interface {
	pulumi.Input

	ToLoadbalancerListenerOutput() LoadbalancerListenerOutput
	ToLoadbalancerListenerOutputWithContext(ctx context.Context) LoadbalancerListenerOutput
}

func (*LoadbalancerListener) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerListener)(nil)).Elem()
}

func (i *LoadbalancerListener) ToLoadbalancerListenerOutput() LoadbalancerListenerOutput {
	return i.ToLoadbalancerListenerOutputWithContext(context.Background())
}

func (i *LoadbalancerListener) ToLoadbalancerListenerOutputWithContext(ctx context.Context) LoadbalancerListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerListenerOutput)
}

// LoadbalancerListenerArrayInput is an input type that accepts LoadbalancerListenerArray and LoadbalancerListenerArrayOutput values.
// You can construct a concrete instance of `LoadbalancerListenerArrayInput` via:
//
//	LoadbalancerListenerArray{ LoadbalancerListenerArgs{...} }
type LoadbalancerListenerArrayInput interface {
	pulumi.Input

	ToLoadbalancerListenerArrayOutput() LoadbalancerListenerArrayOutput
	ToLoadbalancerListenerArrayOutputWithContext(context.Context) LoadbalancerListenerArrayOutput
}

type LoadbalancerListenerArray []LoadbalancerListenerInput

func (LoadbalancerListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerListener)(nil)).Elem()
}

func (i LoadbalancerListenerArray) ToLoadbalancerListenerArrayOutput() LoadbalancerListenerArrayOutput {
	return i.ToLoadbalancerListenerArrayOutputWithContext(context.Background())
}

func (i LoadbalancerListenerArray) ToLoadbalancerListenerArrayOutputWithContext(ctx context.Context) LoadbalancerListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerListenerArrayOutput)
}

// LoadbalancerListenerMapInput is an input type that accepts LoadbalancerListenerMap and LoadbalancerListenerMapOutput values.
// You can construct a concrete instance of `LoadbalancerListenerMapInput` via:
//
//	LoadbalancerListenerMap{ "key": LoadbalancerListenerArgs{...} }
type LoadbalancerListenerMapInput interface {
	pulumi.Input

	ToLoadbalancerListenerMapOutput() LoadbalancerListenerMapOutput
	ToLoadbalancerListenerMapOutputWithContext(context.Context) LoadbalancerListenerMapOutput
}

type LoadbalancerListenerMap map[string]LoadbalancerListenerInput

func (LoadbalancerListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerListener)(nil)).Elem()
}

func (i LoadbalancerListenerMap) ToLoadbalancerListenerMapOutput() LoadbalancerListenerMapOutput {
	return i.ToLoadbalancerListenerMapOutputWithContext(context.Background())
}

func (i LoadbalancerListenerMap) ToLoadbalancerListenerMapOutputWithContext(ctx context.Context) LoadbalancerListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerListenerMapOutput)
}

type LoadbalancerListenerOutput struct{ *pulumi.OutputState }

func (LoadbalancerListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadbalancerListener)(nil)).Elem()
}

func (o LoadbalancerListenerOutput) ToLoadbalancerListenerOutput() LoadbalancerListenerOutput {
	return o
}

func (o LoadbalancerListenerOutput) ToLoadbalancerListenerOutputWithContext(ctx context.Context) LoadbalancerListenerOutput {
	return o
}

// A list of CIDR blocks or IP addresses that are allowed to connect to the listener
func (o LoadbalancerListenerOutput) AllowedSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringArrayOutput { return v.AllowedSources }).(pulumi.StringArrayOutput)
}

// Annotations for the Loadbalancer Listener
func (o LoadbalancerListenerOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The amount of seconds used for configuring the idle connection timeout on a listener
func (o LoadbalancerListenerOutput) ConnectionIdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.IntPtrOutput { return v.ConnectionIdleTimeout }).(pulumi.IntPtrOutput)
}

// A human readable description about the loadbalancer listener
func (o LoadbalancerListenerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Labels for the Loadbalancer Listener
func (o LoadbalancerListenerOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The ID of the loadbalancer to create the listener on
func (o LoadbalancerListenerOutput) LoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringOutput { return v.LoadbalancerId }).(pulumi.StringOutput)
}

// The maximum number of connections that the listener can handle
func (o LoadbalancerListenerOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.IntPtrOutput { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// Name of the Loadbalancer Listener
func (o LoadbalancerListenerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LoadbalancerListenerOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// The port the listener is listening on
func (o LoadbalancerListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The protocol the listener is using
func (o LoadbalancerListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o LoadbalancerListenerOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The ID of the target group to attach to the listener
func (o LoadbalancerListenerOutput) TargetGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadbalancerListener) pulumi.StringOutput { return v.TargetGroupId }).(pulumi.StringOutput)
}

type LoadbalancerListenerArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadbalancerListener)(nil)).Elem()
}

func (o LoadbalancerListenerArrayOutput) ToLoadbalancerListenerArrayOutput() LoadbalancerListenerArrayOutput {
	return o
}

func (o LoadbalancerListenerArrayOutput) ToLoadbalancerListenerArrayOutputWithContext(ctx context.Context) LoadbalancerListenerArrayOutput {
	return o
}

func (o LoadbalancerListenerArrayOutput) Index(i pulumi.IntInput) LoadbalancerListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadbalancerListener {
		return vs[0].([]*LoadbalancerListener)[vs[1].(int)]
	}).(LoadbalancerListenerOutput)
}

type LoadbalancerListenerMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadbalancerListener)(nil)).Elem()
}

func (o LoadbalancerListenerMapOutput) ToLoadbalancerListenerMapOutput() LoadbalancerListenerMapOutput {
	return o
}

func (o LoadbalancerListenerMapOutput) ToLoadbalancerListenerMapOutputWithContext(ctx context.Context) LoadbalancerListenerMapOutput {
	return o
}

func (o LoadbalancerListenerMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadbalancerListener {
		return vs[0].(map[string]*LoadbalancerListener)[vs[1].(string)]
	}).(LoadbalancerListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerListenerInput)(nil)).Elem(), &LoadbalancerListener{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerListenerArrayInput)(nil)).Elem(), LoadbalancerListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerListenerMapInput)(nil)).Elem(), LoadbalancerListenerMap{})
	pulumi.RegisterOutputType(LoadbalancerListenerOutput{})
	pulumi.RegisterOutputType(LoadbalancerListenerArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerListenerMapOutput{})
}
