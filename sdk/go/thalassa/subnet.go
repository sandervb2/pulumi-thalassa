// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create an subnet in a VPC. Subnets are used to create a network for your resources. A VPC can have multiple subnets, and each subnet must have a different CIDR block. IPv4, IPv6 and Dual-stack subnets are supported. After creationg the CIDR cannot be changed.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the subnet
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for subnet"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a route table for the subnet (optional)
//			exampleRouteTable, err := thalassa.NewRouteTable(ctx, "example", &thalassa.RouteTableArgs{
//				Name:        pulumi.String("example-route-table"),
//				Description: pulumi.String("Example route table for subnet"),
//				VpcId:       example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet with all optional attributes
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//				Description: pulumi.String("Example subnet for documentation with all optional attributes"),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("production"),
//					"tier":        pulumi.String("web"),
//					"network":     pulumi.String("private"),
//				},
//				Annotations: pulumi.StringMap{
//					"cost-center":   pulumi.String("cc-12345"),
//					"backup-policy": pulumi.String("none"),
//					"monitoring":    pulumi.String("enabled"),
//				},
//				RouteTableId: exampleRouteTable.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("subnetId", exampleSubnet.ID())
//			return nil
//		})
//	}
//
// ```
type Subnet struct {
	pulumi.CustomResourceState

	// Annotations for the Subnet
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// CIDR of the Subnet
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// A human readable description about the subnet
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Number of IPv4 addresses available in the Subnet
	Ipv4AddressesAvailable pulumi.IntOutput `pulumi:"ipv4AddressesAvailable"`
	// Number of IPv4 addresses used in the Subnet
	Ipv4AddressesUsed pulumi.IntOutput `pulumi:"ipv4AddressesUsed"`
	// Number of IPv6 addresses available in the Subnet
	Ipv6AddressesAvailable pulumi.IntOutput `pulumi:"ipv6AddressesAvailable"`
	// Number of IPv6 addresses used in the Subnet
	Ipv6AddressesUsed pulumi.IntOutput `pulumi:"ipv6AddressesUsed"`
	// Labels for the Subnet
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the Subnet
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// Route Table of the Subnet
	RouteTableId pulumi.StringPtrOutput `pulumi:"routeTableId"`
	// Slug of the Subnet
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Status of the Subnet
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of the Subnet
	Type pulumi.StringOutput `pulumi:"type"`
	// VPC of the Subnet
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("thalassa:index/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("thalassa:index/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// Annotations for the Subnet
	Annotations map[string]string `pulumi:"annotations"`
	// CIDR of the Subnet
	Cidr *string `pulumi:"cidr"`
	// A human readable description about the subnet
	Description *string `pulumi:"description"`
	// Number of IPv4 addresses available in the Subnet
	Ipv4AddressesAvailable *int `pulumi:"ipv4AddressesAvailable"`
	// Number of IPv4 addresses used in the Subnet
	Ipv4AddressesUsed *int `pulumi:"ipv4AddressesUsed"`
	// Number of IPv6 addresses available in the Subnet
	Ipv6AddressesAvailable *int `pulumi:"ipv6AddressesAvailable"`
	// Number of IPv6 addresses used in the Subnet
	Ipv6AddressesUsed *int `pulumi:"ipv6AddressesUsed"`
	// Labels for the Subnet
	Labels map[string]string `pulumi:"labels"`
	// Name of the Subnet
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Route Table of the Subnet
	RouteTableId *string `pulumi:"routeTableId"`
	// Slug of the Subnet
	Slug *string `pulumi:"slug"`
	// Status of the Subnet
	Status *string `pulumi:"status"`
	// Type of the Subnet
	Type *string `pulumi:"type"`
	// VPC of the Subnet
	VpcId *string `pulumi:"vpcId"`
}

type SubnetState struct {
	// Annotations for the Subnet
	Annotations pulumi.StringMapInput
	// CIDR of the Subnet
	Cidr pulumi.StringPtrInput
	// A human readable description about the subnet
	Description pulumi.StringPtrInput
	// Number of IPv4 addresses available in the Subnet
	Ipv4AddressesAvailable pulumi.IntPtrInput
	// Number of IPv4 addresses used in the Subnet
	Ipv4AddressesUsed pulumi.IntPtrInput
	// Number of IPv6 addresses available in the Subnet
	Ipv6AddressesAvailable pulumi.IntPtrInput
	// Number of IPv6 addresses used in the Subnet
	Ipv6AddressesUsed pulumi.IntPtrInput
	// Labels for the Subnet
	Labels pulumi.StringMapInput
	// Name of the Subnet
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Route Table of the Subnet
	RouteTableId pulumi.StringPtrInput
	// Slug of the Subnet
	Slug pulumi.StringPtrInput
	// Status of the Subnet
	Status pulumi.StringPtrInput
	// Type of the Subnet
	Type pulumi.StringPtrInput
	// VPC of the Subnet
	VpcId pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// Annotations for the Subnet
	Annotations map[string]string `pulumi:"annotations"`
	// CIDR of the Subnet
	Cidr string `pulumi:"cidr"`
	// A human readable description about the subnet
	Description *string `pulumi:"description"`
	// Labels for the Subnet
	Labels map[string]string `pulumi:"labels"`
	// Name of the Subnet
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Route Table of the Subnet
	RouteTableId *string `pulumi:"routeTableId"`
	// VPC of the Subnet
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// Annotations for the Subnet
	Annotations pulumi.StringMapInput
	// CIDR of the Subnet
	Cidr pulumi.StringInput
	// A human readable description about the subnet
	Description pulumi.StringPtrInput
	// Labels for the Subnet
	Labels pulumi.StringMapInput
	// Name of the Subnet
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Route Table of the Subnet
	RouteTableId pulumi.StringPtrInput
	// VPC of the Subnet
	VpcId pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// Annotations for the Subnet
func (o SubnetOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// CIDR of the Subnet
func (o SubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// A human readable description about the subnet
func (o SubnetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of IPv4 addresses available in the Subnet
func (o SubnetOutput) Ipv4AddressesAvailable() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.Ipv4AddressesAvailable }).(pulumi.IntOutput)
}

// Number of IPv4 addresses used in the Subnet
func (o SubnetOutput) Ipv4AddressesUsed() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.Ipv4AddressesUsed }).(pulumi.IntOutput)
}

// Number of IPv6 addresses available in the Subnet
func (o SubnetOutput) Ipv6AddressesAvailable() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.Ipv6AddressesAvailable }).(pulumi.IntOutput)
}

// Number of IPv6 addresses used in the Subnet
func (o SubnetOutput) Ipv6AddressesUsed() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.Ipv6AddressesUsed }).(pulumi.IntOutput)
}

// Labels for the Subnet
func (o SubnetOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the Subnet
func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SubnetOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Route Table of the Subnet
func (o SubnetOutput) RouteTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.RouteTableId }).(pulumi.StringPtrOutput)
}

// Slug of the Subnet
func (o SubnetOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Status of the Subnet
func (o SubnetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Type of the Subnet
func (o SubnetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// VPC of the Subnet
func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
