// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create an vpc
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC with all optional attributes
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:   pulumi.String("example-vpc"),
//				Region: pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//					pulumi.String("10.2.0.0/16"),
//					pulumi.String("10.3.0.0/16"),
//				},
//				Description: pulumi.String("Example VPC for documentation with all optional attributes"),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("production"),
//					"project":     pulumi.String("example-project"),
//					"owner":       pulumi.String("team-a"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet within the VPC
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for documentation"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("vpcId", example.ID())
//			ctx.Export("subnetId", exampleSubnet.ID())
//			return nil
//		})
//	}
//
// ```
type Vpc struct {
	pulumi.CustomResourceState

	// Annotations for the Vpc
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// List of CIDRs for the Vpc
	Cidrs pulumi.StringArrayOutput `pulumi:"cidrs"`
	// A human readable description about the vpc
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels for the Vpc
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the Vpc
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
	Region pulumi.StringOutput `pulumi:"region"`
	// Slug of the Vpc
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Status of the Vpc
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewVpc registers a new resource with the given unique name, arguments, and options.
func NewVpc(ctx *pulumi.Context,
	name string, args *VpcArgs, opts ...pulumi.ResourceOption) (*Vpc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidrs == nil {
		return nil, errors.New("invalid value for required argument 'Cidrs'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vpc
	err := ctx.RegisterResource("thalassa:index/vpc:Vpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpc gets an existing Vpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcState, opts ...pulumi.ResourceOption) (*Vpc, error) {
	var resource Vpc
	err := ctx.ReadResource("thalassa:index/vpc:Vpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpc resources.
type vpcState struct {
	// Annotations for the Vpc
	Annotations map[string]string `pulumi:"annotations"`
	// List of CIDRs for the Vpc
	Cidrs []string `pulumi:"cidrs"`
	// A human readable description about the vpc
	Description *string `pulumi:"description"`
	// Labels for the Vpc
	Labels map[string]string `pulumi:"labels"`
	// Name of the Vpc
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
	Region *string `pulumi:"region"`
	// Slug of the Vpc
	Slug *string `pulumi:"slug"`
	// Status of the Vpc
	Status *string `pulumi:"status"`
}

type VpcState struct {
	// Annotations for the Vpc
	Annotations pulumi.StringMapInput
	// List of CIDRs for the Vpc
	Cidrs pulumi.StringArrayInput
	// A human readable description about the vpc
	Description pulumi.StringPtrInput
	// Labels for the Vpc
	Labels pulumi.StringMapInput
	// Name of the Vpc
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
	Region pulumi.StringPtrInput
	// Slug of the Vpc
	Slug pulumi.StringPtrInput
	// Status of the Vpc
	Status pulumi.StringPtrInput
}

func (VpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	// Annotations for the Vpc
	Annotations map[string]string `pulumi:"annotations"`
	// List of CIDRs for the Vpc
	Cidrs []string `pulumi:"cidrs"`
	// A human readable description about the vpc
	Description *string `pulumi:"description"`
	// Labels for the Vpc
	Labels map[string]string `pulumi:"labels"`
	// Name of the Vpc
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a Vpc resource.
type VpcArgs struct {
	// Annotations for the Vpc
	Annotations pulumi.StringMapInput
	// List of CIDRs for the Vpc
	Cidrs pulumi.StringArrayInput
	// A human readable description about the vpc
	Description pulumi.StringPtrInput
	// Labels for the Vpc
	Labels pulumi.StringMapInput
	// Name of the Vpc
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
	Region pulumi.StringInput
}

func (VpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VpcInput interface {
	pulumi.Input

	ToVpcOutput() VpcOutput
	ToVpcOutputWithContext(ctx context.Context) VpcOutput
}

func (*Vpc) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (i *Vpc) ToVpcOutput() VpcOutput {
	return i.ToVpcOutputWithContext(context.Background())
}

func (i *Vpc) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcOutput)
}

// VpcArrayInput is an input type that accepts VpcArray and VpcArrayOutput values.
// You can construct a concrete instance of `VpcArrayInput` via:
//
//	VpcArray{ VpcArgs{...} }
type VpcArrayInput interface {
	pulumi.Input

	ToVpcArrayOutput() VpcArrayOutput
	ToVpcArrayOutputWithContext(context.Context) VpcArrayOutput
}

type VpcArray []VpcInput

func (VpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (i VpcArray) ToVpcArrayOutput() VpcArrayOutput {
	return i.ToVpcArrayOutputWithContext(context.Background())
}

func (i VpcArray) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcArrayOutput)
}

// VpcMapInput is an input type that accepts VpcMap and VpcMapOutput values.
// You can construct a concrete instance of `VpcMapInput` via:
//
//	VpcMap{ "key": VpcArgs{...} }
type VpcMapInput interface {
	pulumi.Input

	ToVpcMapOutput() VpcMapOutput
	ToVpcMapOutputWithContext(context.Context) VpcMapOutput
}

type VpcMap map[string]VpcInput

func (VpcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (i VpcMap) ToVpcMapOutput() VpcMapOutput {
	return i.ToVpcMapOutputWithContext(context.Background())
}

func (i VpcMap) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcMapOutput)
}

type VpcOutput struct{ *pulumi.OutputState }

func (VpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (o VpcOutput) ToVpcOutput() VpcOutput {
	return o
}

func (o VpcOutput) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return o
}

// Annotations for the Vpc
func (o VpcOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// List of CIDRs for the Vpc
func (o VpcOutput) Cidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.Cidrs }).(pulumi.StringArrayOutput)
}

// A human readable description about the vpc
func (o VpcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Labels for the Vpc
func (o VpcOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the Vpc
func (o VpcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpcOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Region of the Vpc. Provide the identity of the region. Can only be set on creation.
func (o VpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Slug of the Vpc
func (o VpcOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Status of the Vpc
func (o VpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type VpcArrayOutput struct{ *pulumi.OutputState }

func (VpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (o VpcArrayOutput) ToVpcArrayOutput() VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) Index(i pulumi.IntInput) VpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].([]*Vpc)[vs[1].(int)]
	}).(VpcOutput)
}

type VpcMapOutput struct{ *pulumi.OutputState }

func (VpcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (o VpcMapOutput) ToVpcMapOutput() VpcMapOutput {
	return o
}

func (o VpcMapOutput) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return o
}

func (o VpcMapOutput) MapIndex(k pulumi.StringInput) VpcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].(map[string]*Vpc)[vs[1].(string)]
	}).(VpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInput)(nil)).Elem(), &Vpc{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcArrayInput)(nil)).Elem(), VpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcMapInput)(nil)).Elem(), VpcMap{})
	pulumi.RegisterOutputType(VpcOutput{})
	pulumi.RegisterOutputType(VpcArrayOutput{})
	pulumi.RegisterOutputType(VpcMapOutput{})
}
