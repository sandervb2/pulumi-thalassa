// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

func LookupDbaasPgRoles(ctx *pulumi.Context, args *LookupDbaasPgRolesArgs, opts ...pulumi.InvokeOption) (*LookupDbaasPgRolesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDbaasPgRolesResult
	err := ctx.Invoke("thalassa:index/getDbaasPgRoles:getDbaasPgRoles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbaasPgRoles.
type LookupDbaasPgRolesArgs struct {
	// The ID of the database cluster
	DbClusterId string `pulumi:"dbClusterId"`
	// The name of the role
	Name           string  `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
}

// A collection of values returned by getDbaasPgRoles.
type LookupDbaasPgRolesResult struct {
	// The connection limit of the role
	ConnectionLimit int `pulumi:"connectionLimit"`
	// Whether the role can create databases
	CreateDb bool `pulumi:"createDb"`
	// Whether the role can create roles
	CreateRole bool `pulumi:"createRole"`
	// The ID of the database cluster
	DbClusterId string `pulumi:"dbClusterId"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Whether the role can login
	Login bool `pulumi:"login"`
	// The name of the role
	Name           string  `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
}

func LookupDbaasPgRolesOutput(ctx *pulumi.Context, args LookupDbaasPgRolesOutputArgs, opts ...pulumi.InvokeOption) LookupDbaasPgRolesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDbaasPgRolesResultOutput, error) {
			args := v.(LookupDbaasPgRolesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("thalassa:index/getDbaasPgRoles:getDbaasPgRoles", args, LookupDbaasPgRolesResultOutput{}, options).(LookupDbaasPgRolesResultOutput), nil
		}).(LookupDbaasPgRolesResultOutput)
}

// A collection of arguments for invoking getDbaasPgRoles.
type LookupDbaasPgRolesOutputArgs struct {
	// The ID of the database cluster
	DbClusterId pulumi.StringInput `pulumi:"dbClusterId"`
	// The name of the role
	Name           pulumi.StringInput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrInput `pulumi:"organisationId"`
}

func (LookupDbaasPgRolesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbaasPgRolesArgs)(nil)).Elem()
}

// A collection of values returned by getDbaasPgRoles.
type LookupDbaasPgRolesResultOutput struct{ *pulumi.OutputState }

func (LookupDbaasPgRolesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbaasPgRolesResult)(nil)).Elem()
}

func (o LookupDbaasPgRolesResultOutput) ToLookupDbaasPgRolesResultOutput() LookupDbaasPgRolesResultOutput {
	return o
}

func (o LookupDbaasPgRolesResultOutput) ToLookupDbaasPgRolesResultOutputWithContext(ctx context.Context) LookupDbaasPgRolesResultOutput {
	return o
}

// The connection limit of the role
func (o LookupDbaasPgRolesResultOutput) ConnectionLimit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDbaasPgRolesResult) int { return v.ConnectionLimit }).(pulumi.IntOutput)
}

// Whether the role can create databases
func (o LookupDbaasPgRolesResultOutput) CreateDb() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDbaasPgRolesResult) bool { return v.CreateDb }).(pulumi.BoolOutput)
}

// Whether the role can create roles
func (o LookupDbaasPgRolesResultOutput) CreateRole() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDbaasPgRolesResult) bool { return v.CreateRole }).(pulumi.BoolOutput)
}

// The ID of the database cluster
func (o LookupDbaasPgRolesResultOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasPgRolesResult) string { return v.DbClusterId }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupDbaasPgRolesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasPgRolesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the role can login
func (o LookupDbaasPgRolesResultOutput) Login() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDbaasPgRolesResult) bool { return v.Login }).(pulumi.BoolOutput)
}

// The name of the role
func (o LookupDbaasPgRolesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbaasPgRolesResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDbaasPgRolesResultOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDbaasPgRolesResult) *string { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDbaasPgRolesResultOutput{})
}
