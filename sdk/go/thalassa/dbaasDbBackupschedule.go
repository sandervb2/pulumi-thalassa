// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create a database backup schedule
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the database cluster
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for database cluster"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the database cluster
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for database cluster"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a database cluster for the backup schedule
//			exampleDbaasDbCluster, err := thalassa.NewDbaasDbCluster(ctx, "example", &thalassa.DbaasDbClusterArgs{
//				Name:                 pulumi.String("example-db-cluster"),
//				Description:          pulumi.String("Example database cluster for backup schedule"),
//				SubnetId:             exampleSubnet.ID(),
//				DatabaseInstanceType: pulumi.String("db-pgp-small"),
//				Engine:               pulumi.String("postgres"),
//				EngineVersion:        pulumi.String("15.13"),
//				AllocatedStorage:     pulumi.Int(100),
//				VolumeTypeClass:      pulumi.String("block"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a database backup schedule with Thalassa default values
//			exampleDbaasDbBackupschedule, err := thalassa.NewDbaasDbBackupschedule(ctx, "example", &thalassa.DbaasDbBackupscheduleArgs{
//				DbClusterId:     exampleDbaasDbCluster.ID(),
//				Name:            pulumi.String("example-backup-schedule"),
//				Schedule:        pulumi.String("0 2 * * *"),
//				RetentionPolicy: pulumi.String("7d"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("backupScheduleId", exampleDbaasDbBackupschedule.ID())
//			ctx.Export("backupScheduleName", exampleDbaasDbBackupschedule.Name)
//			return nil
//		})
//	}
//
// ```
type DbaasDbBackupschedule struct {
	pulumi.CustomResourceState

	// The backup target of the database backup schedule (primary, prefer-standby)
	BackupTarget pulumi.StringPtrOutput `pulumi:"backupTarget"`
	// The ID of the database cluster
	DbClusterId pulumi.StringOutput `pulumi:"dbClusterId"`
	// The name of the database backup schedule
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
	RetentionPolicy pulumi.StringPtrOutput `pulumi:"retentionPolicy"`
	// The cron schedule of the database backup schedule (0 0 * * *)
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// Whether the database backup schedule is suspended
	Suspended pulumi.BoolPtrOutput `pulumi:"suspended"`
}

// NewDbaasDbBackupschedule registers a new resource with the given unique name, arguments, and options.
func NewDbaasDbBackupschedule(ctx *pulumi.Context,
	name string, args *DbaasDbBackupscheduleArgs, opts ...pulumi.ResourceOption) (*DbaasDbBackupschedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterId == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasDbBackupschedule
	err := ctx.RegisterResource("thalassa:index/dbaasDbBackupschedule:DbaasDbBackupschedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasDbBackupschedule gets an existing DbaasDbBackupschedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasDbBackupschedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasDbBackupscheduleState, opts ...pulumi.ResourceOption) (*DbaasDbBackupschedule, error) {
	var resource DbaasDbBackupschedule
	err := ctx.ReadResource("thalassa:index/dbaasDbBackupschedule:DbaasDbBackupschedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasDbBackupschedule resources.
type dbaasDbBackupscheduleState struct {
	// The backup target of the database backup schedule (primary, prefer-standby)
	BackupTarget *string `pulumi:"backupTarget"`
	// The ID of the database cluster
	DbClusterId *string `pulumi:"dbClusterId"`
	// The name of the database backup schedule
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
	RetentionPolicy *string `pulumi:"retentionPolicy"`
	// The cron schedule of the database backup schedule (0 0 * * *)
	Schedule *string `pulumi:"schedule"`
	// Whether the database backup schedule is suspended
	Suspended *bool `pulumi:"suspended"`
}

type DbaasDbBackupscheduleState struct {
	// The backup target of the database backup schedule (primary, prefer-standby)
	BackupTarget pulumi.StringPtrInput
	// The ID of the database cluster
	DbClusterId pulumi.StringPtrInput
	// The name of the database backup schedule
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
	RetentionPolicy pulumi.StringPtrInput
	// The cron schedule of the database backup schedule (0 0 * * *)
	Schedule pulumi.StringPtrInput
	// Whether the database backup schedule is suspended
	Suspended pulumi.BoolPtrInput
}

func (DbaasDbBackupscheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasDbBackupscheduleState)(nil)).Elem()
}

type dbaasDbBackupscheduleArgs struct {
	// The backup target of the database backup schedule (primary, prefer-standby)
	BackupTarget *string `pulumi:"backupTarget"`
	// The ID of the database cluster
	DbClusterId string `pulumi:"dbClusterId"`
	// The name of the database backup schedule
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
	RetentionPolicy *string `pulumi:"retentionPolicy"`
	// The cron schedule of the database backup schedule (0 0 * * *)
	Schedule *string `pulumi:"schedule"`
	// Whether the database backup schedule is suspended
	Suspended *bool `pulumi:"suspended"`
}

// The set of arguments for constructing a DbaasDbBackupschedule resource.
type DbaasDbBackupscheduleArgs struct {
	// The backup target of the database backup schedule (primary, prefer-standby)
	BackupTarget pulumi.StringPtrInput
	// The ID of the database cluster
	DbClusterId pulumi.StringInput
	// The name of the database backup schedule
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
	RetentionPolicy pulumi.StringPtrInput
	// The cron schedule of the database backup schedule (0 0 * * *)
	Schedule pulumi.StringPtrInput
	// Whether the database backup schedule is suspended
	Suspended pulumi.BoolPtrInput
}

func (DbaasDbBackupscheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasDbBackupscheduleArgs)(nil)).Elem()
}

type DbaasDbBackupscheduleInput interface {
	pulumi.Input

	ToDbaasDbBackupscheduleOutput() DbaasDbBackupscheduleOutput
	ToDbaasDbBackupscheduleOutputWithContext(ctx context.Context) DbaasDbBackupscheduleOutput
}

func (*DbaasDbBackupschedule) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasDbBackupschedule)(nil)).Elem()
}

func (i *DbaasDbBackupschedule) ToDbaasDbBackupscheduleOutput() DbaasDbBackupscheduleOutput {
	return i.ToDbaasDbBackupscheduleOutputWithContext(context.Background())
}

func (i *DbaasDbBackupschedule) ToDbaasDbBackupscheduleOutputWithContext(ctx context.Context) DbaasDbBackupscheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasDbBackupscheduleOutput)
}

// DbaasDbBackupscheduleArrayInput is an input type that accepts DbaasDbBackupscheduleArray and DbaasDbBackupscheduleArrayOutput values.
// You can construct a concrete instance of `DbaasDbBackupscheduleArrayInput` via:
//
//	DbaasDbBackupscheduleArray{ DbaasDbBackupscheduleArgs{...} }
type DbaasDbBackupscheduleArrayInput interface {
	pulumi.Input

	ToDbaasDbBackupscheduleArrayOutput() DbaasDbBackupscheduleArrayOutput
	ToDbaasDbBackupscheduleArrayOutputWithContext(context.Context) DbaasDbBackupscheduleArrayOutput
}

type DbaasDbBackupscheduleArray []DbaasDbBackupscheduleInput

func (DbaasDbBackupscheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasDbBackupschedule)(nil)).Elem()
}

func (i DbaasDbBackupscheduleArray) ToDbaasDbBackupscheduleArrayOutput() DbaasDbBackupscheduleArrayOutput {
	return i.ToDbaasDbBackupscheduleArrayOutputWithContext(context.Background())
}

func (i DbaasDbBackupscheduleArray) ToDbaasDbBackupscheduleArrayOutputWithContext(ctx context.Context) DbaasDbBackupscheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasDbBackupscheduleArrayOutput)
}

// DbaasDbBackupscheduleMapInput is an input type that accepts DbaasDbBackupscheduleMap and DbaasDbBackupscheduleMapOutput values.
// You can construct a concrete instance of `DbaasDbBackupscheduleMapInput` via:
//
//	DbaasDbBackupscheduleMap{ "key": DbaasDbBackupscheduleArgs{...} }
type DbaasDbBackupscheduleMapInput interface {
	pulumi.Input

	ToDbaasDbBackupscheduleMapOutput() DbaasDbBackupscheduleMapOutput
	ToDbaasDbBackupscheduleMapOutputWithContext(context.Context) DbaasDbBackupscheduleMapOutput
}

type DbaasDbBackupscheduleMap map[string]DbaasDbBackupscheduleInput

func (DbaasDbBackupscheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasDbBackupschedule)(nil)).Elem()
}

func (i DbaasDbBackupscheduleMap) ToDbaasDbBackupscheduleMapOutput() DbaasDbBackupscheduleMapOutput {
	return i.ToDbaasDbBackupscheduleMapOutputWithContext(context.Background())
}

func (i DbaasDbBackupscheduleMap) ToDbaasDbBackupscheduleMapOutputWithContext(ctx context.Context) DbaasDbBackupscheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasDbBackupscheduleMapOutput)
}

type DbaasDbBackupscheduleOutput struct{ *pulumi.OutputState }

func (DbaasDbBackupscheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasDbBackupschedule)(nil)).Elem()
}

func (o DbaasDbBackupscheduleOutput) ToDbaasDbBackupscheduleOutput() DbaasDbBackupscheduleOutput {
	return o
}

func (o DbaasDbBackupscheduleOutput) ToDbaasDbBackupscheduleOutputWithContext(ctx context.Context) DbaasDbBackupscheduleOutput {
	return o
}

// The backup target of the database backup schedule (primary, prefer-standby)
func (o DbaasDbBackupscheduleOutput) BackupTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasDbBackupschedule) pulumi.StringPtrOutput { return v.BackupTarget }).(pulumi.StringPtrOutput)
}

// The ID of the database cluster
func (o DbaasDbBackupscheduleOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbBackupschedule) pulumi.StringOutput { return v.DbClusterId }).(pulumi.StringOutput)
}

// The name of the database backup schedule
func (o DbaasDbBackupscheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasDbBackupschedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DbaasDbBackupscheduleOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasDbBackupschedule) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
func (o DbaasDbBackupscheduleOutput) RetentionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasDbBackupschedule) pulumi.StringPtrOutput { return v.RetentionPolicy }).(pulumi.StringPtrOutput)
}

// The cron schedule of the database backup schedule (0 0 * * *)
func (o DbaasDbBackupscheduleOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasDbBackupschedule) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Whether the database backup schedule is suspended
func (o DbaasDbBackupscheduleOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbaasDbBackupschedule) pulumi.BoolPtrOutput { return v.Suspended }).(pulumi.BoolPtrOutput)
}

type DbaasDbBackupscheduleArrayOutput struct{ *pulumi.OutputState }

func (DbaasDbBackupscheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasDbBackupschedule)(nil)).Elem()
}

func (o DbaasDbBackupscheduleArrayOutput) ToDbaasDbBackupscheduleArrayOutput() DbaasDbBackupscheduleArrayOutput {
	return o
}

func (o DbaasDbBackupscheduleArrayOutput) ToDbaasDbBackupscheduleArrayOutputWithContext(ctx context.Context) DbaasDbBackupscheduleArrayOutput {
	return o
}

func (o DbaasDbBackupscheduleArrayOutput) Index(i pulumi.IntInput) DbaasDbBackupscheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasDbBackupschedule {
		return vs[0].([]*DbaasDbBackupschedule)[vs[1].(int)]
	}).(DbaasDbBackupscheduleOutput)
}

type DbaasDbBackupscheduleMapOutput struct{ *pulumi.OutputState }

func (DbaasDbBackupscheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasDbBackupschedule)(nil)).Elem()
}

func (o DbaasDbBackupscheduleMapOutput) ToDbaasDbBackupscheduleMapOutput() DbaasDbBackupscheduleMapOutput {
	return o
}

func (o DbaasDbBackupscheduleMapOutput) ToDbaasDbBackupscheduleMapOutputWithContext(ctx context.Context) DbaasDbBackupscheduleMapOutput {
	return o
}

func (o DbaasDbBackupscheduleMapOutput) MapIndex(k pulumi.StringInput) DbaasDbBackupscheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasDbBackupschedule {
		return vs[0].(map[string]*DbaasDbBackupschedule)[vs[1].(string)]
	}).(DbaasDbBackupscheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasDbBackupscheduleInput)(nil)).Elem(), &DbaasDbBackupschedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasDbBackupscheduleArrayInput)(nil)).Elem(), DbaasDbBackupscheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasDbBackupscheduleMapInput)(nil)).Elem(), DbaasDbBackupscheduleMap{})
	pulumi.RegisterOutputType(DbaasDbBackupscheduleOutput{})
	pulumi.RegisterOutputType(DbaasDbBackupscheduleArrayOutput{})
	pulumi.RegisterOutputType(DbaasDbBackupscheduleMapOutput{})
}
