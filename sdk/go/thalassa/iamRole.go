// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Manage an organisation role in Thalassa Cloud
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create an organisation role
//			example, err := thalassa.NewIamRole(ctx, "example", &thalassa.IamRoleArgs{
//				Name:        pulumi.String("example-role"),
//				Description: pulumi.String("An example organisation role for demonstration purposes"),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("development"),
//					"project":     pulumi.String("example"),
//				},
//				Annotations: pulumi.StringMap{
//					"example.com/created-by": pulumi.String("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("roleId", example.ID())
//			ctx.Export("roleName", example.Name)
//			ctx.Export("roleSlug", example.Slug)
//			ctx.Export("roleDescription", example.Description)
//			return nil
//		})
//	}
//
// ```
type IamRole struct {
	pulumi.CustomResourceState

	// Annotations for the organisation role
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Creation timestamp of the organisation role
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the organisation role
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels for the organisation role
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the organisation role
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the role is read-only and cannot be modified.
	RoleIsReadOnly pulumi.BoolOutput `pulumi:"roleIsReadOnly"`
	// Slug of the organisation role
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Whether the role is a system role
	System pulumi.BoolOutput `pulumi:"system"`
	// Last update timestamp of the organisation role
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewIamRole registers a new resource with the given unique name, arguments, and options.
func NewIamRole(ctx *pulumi.Context,
	name string, args *IamRoleArgs, opts ...pulumi.ResourceOption) (*IamRole, error) {
	if args == nil {
		args = &IamRoleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamRole
	err := ctx.RegisterResource("thalassa:index/iamRole:IamRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamRole gets an existing IamRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamRoleState, opts ...pulumi.ResourceOption) (*IamRole, error) {
	var resource IamRole
	err := ctx.ReadResource("thalassa:index/iamRole:IamRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamRole resources.
type iamRoleState struct {
	// Annotations for the organisation role
	Annotations map[string]string `pulumi:"annotations"`
	// Creation timestamp of the organisation role
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the organisation role
	Description *string `pulumi:"description"`
	// Labels for the organisation role
	Labels map[string]string `pulumi:"labels"`
	// Name of the organisation role
	Name *string `pulumi:"name"`
	// Whether the role is read-only and cannot be modified.
	RoleIsReadOnly *bool `pulumi:"roleIsReadOnly"`
	// Slug of the organisation role
	Slug *string `pulumi:"slug"`
	// Whether the role is a system role
	System *bool `pulumi:"system"`
	// Last update timestamp of the organisation role
	UpdatedAt *string `pulumi:"updatedAt"`
}

type IamRoleState struct {
	// Annotations for the organisation role
	Annotations pulumi.StringMapInput
	// Creation timestamp of the organisation role
	CreatedAt pulumi.StringPtrInput
	// Description of the organisation role
	Description pulumi.StringPtrInput
	// Labels for the organisation role
	Labels pulumi.StringMapInput
	// Name of the organisation role
	Name pulumi.StringPtrInput
	// Whether the role is read-only and cannot be modified.
	RoleIsReadOnly pulumi.BoolPtrInput
	// Slug of the organisation role
	Slug pulumi.StringPtrInput
	// Whether the role is a system role
	System pulumi.BoolPtrInput
	// Last update timestamp of the organisation role
	UpdatedAt pulumi.StringPtrInput
}

func (IamRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamRoleState)(nil)).Elem()
}

type iamRoleArgs struct {
	// Annotations for the organisation role
	Annotations map[string]string `pulumi:"annotations"`
	// Description of the organisation role
	Description *string `pulumi:"description"`
	// Labels for the organisation role
	Labels map[string]string `pulumi:"labels"`
	// Name of the organisation role
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IamRole resource.
type IamRoleArgs struct {
	// Annotations for the organisation role
	Annotations pulumi.StringMapInput
	// Description of the organisation role
	Description pulumi.StringPtrInput
	// Labels for the organisation role
	Labels pulumi.StringMapInput
	// Name of the organisation role
	Name pulumi.StringPtrInput
}

func (IamRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamRoleArgs)(nil)).Elem()
}

type IamRoleInput interface {
	pulumi.Input

	ToIamRoleOutput() IamRoleOutput
	ToIamRoleOutputWithContext(ctx context.Context) IamRoleOutput
}

func (*IamRole) ElementType() reflect.Type {
	return reflect.TypeOf((**IamRole)(nil)).Elem()
}

func (i *IamRole) ToIamRoleOutput() IamRoleOutput {
	return i.ToIamRoleOutputWithContext(context.Background())
}

func (i *IamRole) ToIamRoleOutputWithContext(ctx context.Context) IamRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleOutput)
}

// IamRoleArrayInput is an input type that accepts IamRoleArray and IamRoleArrayOutput values.
// You can construct a concrete instance of `IamRoleArrayInput` via:
//
//	IamRoleArray{ IamRoleArgs{...} }
type IamRoleArrayInput interface {
	pulumi.Input

	ToIamRoleArrayOutput() IamRoleArrayOutput
	ToIamRoleArrayOutputWithContext(context.Context) IamRoleArrayOutput
}

type IamRoleArray []IamRoleInput

func (IamRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamRole)(nil)).Elem()
}

func (i IamRoleArray) ToIamRoleArrayOutput() IamRoleArrayOutput {
	return i.ToIamRoleArrayOutputWithContext(context.Background())
}

func (i IamRoleArray) ToIamRoleArrayOutputWithContext(ctx context.Context) IamRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleArrayOutput)
}

// IamRoleMapInput is an input type that accepts IamRoleMap and IamRoleMapOutput values.
// You can construct a concrete instance of `IamRoleMapInput` via:
//
//	IamRoleMap{ "key": IamRoleArgs{...} }
type IamRoleMapInput interface {
	pulumi.Input

	ToIamRoleMapOutput() IamRoleMapOutput
	ToIamRoleMapOutputWithContext(context.Context) IamRoleMapOutput
}

type IamRoleMap map[string]IamRoleInput

func (IamRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamRole)(nil)).Elem()
}

func (i IamRoleMap) ToIamRoleMapOutput() IamRoleMapOutput {
	return i.ToIamRoleMapOutputWithContext(context.Background())
}

func (i IamRoleMap) ToIamRoleMapOutputWithContext(ctx context.Context) IamRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleMapOutput)
}

type IamRoleOutput struct{ *pulumi.OutputState }

func (IamRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamRole)(nil)).Elem()
}

func (o IamRoleOutput) ToIamRoleOutput() IamRoleOutput {
	return o
}

func (o IamRoleOutput) ToIamRoleOutputWithContext(ctx context.Context) IamRoleOutput {
	return o
}

// Annotations for the organisation role
func (o IamRoleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Creation timestamp of the organisation role
func (o IamRoleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the organisation role
func (o IamRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Labels for the organisation role
func (o IamRoleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the organisation role
func (o IamRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether the role is read-only and cannot be modified.
func (o IamRoleOutput) RoleIsReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *IamRole) pulumi.BoolOutput { return v.RoleIsReadOnly }).(pulumi.BoolOutput)
}

// Slug of the organisation role
func (o IamRoleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Whether the role is a system role
func (o IamRoleOutput) System() pulumi.BoolOutput {
	return o.ApplyT(func(v *IamRole) pulumi.BoolOutput { return v.System }).(pulumi.BoolOutput)
}

// Last update timestamp of the organisation role
func (o IamRoleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type IamRoleArrayOutput struct{ *pulumi.OutputState }

func (IamRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamRole)(nil)).Elem()
}

func (o IamRoleArrayOutput) ToIamRoleArrayOutput() IamRoleArrayOutput {
	return o
}

func (o IamRoleArrayOutput) ToIamRoleArrayOutputWithContext(ctx context.Context) IamRoleArrayOutput {
	return o
}

func (o IamRoleArrayOutput) Index(i pulumi.IntInput) IamRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamRole {
		return vs[0].([]*IamRole)[vs[1].(int)]
	}).(IamRoleOutput)
}

type IamRoleMapOutput struct{ *pulumi.OutputState }

func (IamRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamRole)(nil)).Elem()
}

func (o IamRoleMapOutput) ToIamRoleMapOutput() IamRoleMapOutput {
	return o
}

func (o IamRoleMapOutput) ToIamRoleMapOutputWithContext(ctx context.Context) IamRoleMapOutput {
	return o
}

func (o IamRoleMapOutput) MapIndex(k pulumi.StringInput) IamRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamRole {
		return vs[0].(map[string]*IamRole)[vs[1].(string)]
	}).(IamRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleInput)(nil)).Elem(), &IamRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleArrayInput)(nil)).Elem(), IamRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleMapInput)(nil)).Elem(), IamRoleMap{})
	pulumi.RegisterOutputType(IamRoleOutput{})
	pulumi.RegisterOutputType(IamRoleArrayOutput{})
	pulumi.RegisterOutputType(IamRoleMapOutput{})
}
