// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Attach a Virtual Machine Instance to a target group
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the resources
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for target group attachment"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the resources
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for target group attachment"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a target group
//			exampleTargetGroup, err := thalassa.NewTargetGroup(ctx, "example", &thalassa.TargetGroupArgs{
//				Name:        pulumi.String("example-target-group"),
//				Description: pulumi.String("Example target group for attachment"),
//				VpcId:       example.ID(),
//				Protocol:    pulumi.String("tcp"),
//				Port:        pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a virtual machine instance
//			exampleVirtualMachineInstance, err := thalassa.NewVirtualMachineInstance(ctx, "example", &thalassa.VirtualMachineInstanceArgs{
//				Name:             pulumi.String("example-instance"),
//				SubnetId:         exampleSubnet.ID(),
//				MachineType:      pulumi.String("pgp-small"),
//				MachineImage:     pulumi.String("ubuntu-22.04"),
//				AvailabilityZone: pulumi.String("nl-01a"),
//				RootVolumeSizeGb: pulumi.Int(20),
//				RootVolumeType:   pulumi.String("Block"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a target group attachment with all required attributes
//			exampleTargetGroupAttachment, err := thalassa.NewTargetGroupAttachment(ctx, "example", &thalassa.TargetGroupAttachmentArgs{
//				TargetGroupId: exampleTargetGroup.ID(),
//				VmiId:         exampleVirtualMachineInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("attachmentId", exampleTargetGroupAttachment.ID())
//			return nil
//		})
//	}
//
// ```
type TargetGroupAttachment struct {
	pulumi.CustomResourceState

	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// The ID of the target group to attach to
	TargetGroupId pulumi.StringOutput `pulumi:"targetGroupId"`
	// The ID of the Virtual Machine Instance to attach
	VmiId pulumi.StringOutput `pulumi:"vmiId"`
}

// NewTargetGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewTargetGroupAttachment(ctx *pulumi.Context,
	name string, args *TargetGroupAttachmentArgs, opts ...pulumi.ResourceOption) (*TargetGroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetGroupId == nil {
		return nil, errors.New("invalid value for required argument 'TargetGroupId'")
	}
	if args.VmiId == nil {
		return nil, errors.New("invalid value for required argument 'VmiId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TargetGroupAttachment
	err := ctx.RegisterResource("thalassa:index/targetGroupAttachment:TargetGroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetGroupAttachment gets an existing TargetGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetGroupAttachmentState, opts ...pulumi.ResourceOption) (*TargetGroupAttachment, error) {
	var resource TargetGroupAttachment
	err := ctx.ReadResource("thalassa:index/targetGroupAttachment:TargetGroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetGroupAttachment resources.
type targetGroupAttachmentState struct {
	OrganisationId *string `pulumi:"organisationId"`
	// The ID of the target group to attach to
	TargetGroupId *string `pulumi:"targetGroupId"`
	// The ID of the Virtual Machine Instance to attach
	VmiId *string `pulumi:"vmiId"`
}

type TargetGroupAttachmentState struct {
	OrganisationId pulumi.StringPtrInput
	// The ID of the target group to attach to
	TargetGroupId pulumi.StringPtrInput
	// The ID of the Virtual Machine Instance to attach
	VmiId pulumi.StringPtrInput
}

func (TargetGroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetGroupAttachmentState)(nil)).Elem()
}

type targetGroupAttachmentArgs struct {
	OrganisationId *string `pulumi:"organisationId"`
	// The ID of the target group to attach to
	TargetGroupId string `pulumi:"targetGroupId"`
	// The ID of the Virtual Machine Instance to attach
	VmiId string `pulumi:"vmiId"`
}

// The set of arguments for constructing a TargetGroupAttachment resource.
type TargetGroupAttachmentArgs struct {
	OrganisationId pulumi.StringPtrInput
	// The ID of the target group to attach to
	TargetGroupId pulumi.StringInput
	// The ID of the Virtual Machine Instance to attach
	VmiId pulumi.StringInput
}

func (TargetGroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetGroupAttachmentArgs)(nil)).Elem()
}

type TargetGroupAttachmentInput interface {
	pulumi.Input

	ToTargetGroupAttachmentOutput() TargetGroupAttachmentOutput
	ToTargetGroupAttachmentOutputWithContext(ctx context.Context) TargetGroupAttachmentOutput
}

func (*TargetGroupAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupAttachment)(nil)).Elem()
}

func (i *TargetGroupAttachment) ToTargetGroupAttachmentOutput() TargetGroupAttachmentOutput {
	return i.ToTargetGroupAttachmentOutputWithContext(context.Background())
}

func (i *TargetGroupAttachment) ToTargetGroupAttachmentOutputWithContext(ctx context.Context) TargetGroupAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupAttachmentOutput)
}

// TargetGroupAttachmentArrayInput is an input type that accepts TargetGroupAttachmentArray and TargetGroupAttachmentArrayOutput values.
// You can construct a concrete instance of `TargetGroupAttachmentArrayInput` via:
//
//	TargetGroupAttachmentArray{ TargetGroupAttachmentArgs{...} }
type TargetGroupAttachmentArrayInput interface {
	pulumi.Input

	ToTargetGroupAttachmentArrayOutput() TargetGroupAttachmentArrayOutput
	ToTargetGroupAttachmentArrayOutputWithContext(context.Context) TargetGroupAttachmentArrayOutput
}

type TargetGroupAttachmentArray []TargetGroupAttachmentInput

func (TargetGroupAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetGroupAttachment)(nil)).Elem()
}

func (i TargetGroupAttachmentArray) ToTargetGroupAttachmentArrayOutput() TargetGroupAttachmentArrayOutput {
	return i.ToTargetGroupAttachmentArrayOutputWithContext(context.Background())
}

func (i TargetGroupAttachmentArray) ToTargetGroupAttachmentArrayOutputWithContext(ctx context.Context) TargetGroupAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupAttachmentArrayOutput)
}

// TargetGroupAttachmentMapInput is an input type that accepts TargetGroupAttachmentMap and TargetGroupAttachmentMapOutput values.
// You can construct a concrete instance of `TargetGroupAttachmentMapInput` via:
//
//	TargetGroupAttachmentMap{ "key": TargetGroupAttachmentArgs{...} }
type TargetGroupAttachmentMapInput interface {
	pulumi.Input

	ToTargetGroupAttachmentMapOutput() TargetGroupAttachmentMapOutput
	ToTargetGroupAttachmentMapOutputWithContext(context.Context) TargetGroupAttachmentMapOutput
}

type TargetGroupAttachmentMap map[string]TargetGroupAttachmentInput

func (TargetGroupAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetGroupAttachment)(nil)).Elem()
}

func (i TargetGroupAttachmentMap) ToTargetGroupAttachmentMapOutput() TargetGroupAttachmentMapOutput {
	return i.ToTargetGroupAttachmentMapOutputWithContext(context.Background())
}

func (i TargetGroupAttachmentMap) ToTargetGroupAttachmentMapOutputWithContext(ctx context.Context) TargetGroupAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetGroupAttachmentMapOutput)
}

type TargetGroupAttachmentOutput struct{ *pulumi.OutputState }

func (TargetGroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetGroupAttachment)(nil)).Elem()
}

func (o TargetGroupAttachmentOutput) ToTargetGroupAttachmentOutput() TargetGroupAttachmentOutput {
	return o
}

func (o TargetGroupAttachmentOutput) ToTargetGroupAttachmentOutputWithContext(ctx context.Context) TargetGroupAttachmentOutput {
	return o
}

func (o TargetGroupAttachmentOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetGroupAttachment) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// The ID of the target group to attach to
func (o TargetGroupAttachmentOutput) TargetGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroupAttachment) pulumi.StringOutput { return v.TargetGroupId }).(pulumi.StringOutput)
}

// The ID of the Virtual Machine Instance to attach
func (o TargetGroupAttachmentOutput) VmiId() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetGroupAttachment) pulumi.StringOutput { return v.VmiId }).(pulumi.StringOutput)
}

type TargetGroupAttachmentArrayOutput struct{ *pulumi.OutputState }

func (TargetGroupAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TargetGroupAttachment)(nil)).Elem()
}

func (o TargetGroupAttachmentArrayOutput) ToTargetGroupAttachmentArrayOutput() TargetGroupAttachmentArrayOutput {
	return o
}

func (o TargetGroupAttachmentArrayOutput) ToTargetGroupAttachmentArrayOutputWithContext(ctx context.Context) TargetGroupAttachmentArrayOutput {
	return o
}

func (o TargetGroupAttachmentArrayOutput) Index(i pulumi.IntInput) TargetGroupAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TargetGroupAttachment {
		return vs[0].([]*TargetGroupAttachment)[vs[1].(int)]
	}).(TargetGroupAttachmentOutput)
}

type TargetGroupAttachmentMapOutput struct{ *pulumi.OutputState }

func (TargetGroupAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TargetGroupAttachment)(nil)).Elem()
}

func (o TargetGroupAttachmentMapOutput) ToTargetGroupAttachmentMapOutput() TargetGroupAttachmentMapOutput {
	return o
}

func (o TargetGroupAttachmentMapOutput) ToTargetGroupAttachmentMapOutputWithContext(ctx context.Context) TargetGroupAttachmentMapOutput {
	return o
}

func (o TargetGroupAttachmentMapOutput) MapIndex(k pulumi.StringInput) TargetGroupAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TargetGroupAttachment {
		return vs[0].(map[string]*TargetGroupAttachment)[vs[1].(string)]
	}).(TargetGroupAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupAttachmentInput)(nil)).Elem(), &TargetGroupAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupAttachmentArrayInput)(nil)).Elem(), TargetGroupAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetGroupAttachmentMapInput)(nil)).Elem(), TargetGroupAttachmentMap{})
	pulumi.RegisterOutputType(TargetGroupAttachmentOutput{})
	pulumi.RegisterOutputType(TargetGroupAttachmentArrayOutput{})
	pulumi.RegisterOutputType(TargetGroupAttachmentMapOutput{})
}
