// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Provides a Thalassa Cloud Block Volume resource. This can be used to create, manage, and attach a detachable storage device to a virtual machine instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a block volume with Thalassa default values
//			example, err := thalassa.NewBlockVolume(ctx, "example", &thalassa.BlockVolumeArgs{
//				Name:        pulumi.String("example-block-volume"),
//				Description: pulumi.String("Example block volume for documentation"),
//				Region:      pulumi.String("nl-01"),
//				VolumeType:  pulumi.String("Block"),
//				SizeGb:      pulumi.Int(20),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("blockVolumeId", example.ID())
//			ctx.Export("blockVolumeName", example.Name)
//			return nil
//		})
//	}
//
// ```
type BlockVolume struct {
	pulumi.CustomResourceState

	// Annotations for the Block Volume
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Delete protection of the Block Volume
	DeleteProtection pulumi.BoolPtrOutput `pulumi:"deleteProtection"`
	// A human readable description about the Block Volume
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels for the Block Volume
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the Block Volume
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// Region of the Block Volume.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Size of the Block Volume in GB
	SizeGb pulumi.IntOutput    `pulumi:"sizeGb"`
	Slug   pulumi.StringOutput `pulumi:"slug"`
	// Status of the Block Volume
	Status pulumi.StringOutput `pulumi:"status"`
	// Volume type of the Block Volume
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
	// Wait until the Block Volume is ready
	WaitUntilReady pulumi.BoolPtrOutput `pulumi:"waitUntilReady"`
}

// NewBlockVolume registers a new resource with the given unique name, arguments, and options.
func NewBlockVolume(ctx *pulumi.Context,
	name string, args *BlockVolumeArgs, opts ...pulumi.ResourceOption) (*BlockVolume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SizeGb == nil {
		return nil, errors.New("invalid value for required argument 'SizeGb'")
	}
	if args.VolumeType == nil {
		return nil, errors.New("invalid value for required argument 'VolumeType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BlockVolume
	err := ctx.RegisterResource("thalassa:index/blockVolume:BlockVolume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockVolume gets an existing BlockVolume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockVolumeState, opts ...pulumi.ResourceOption) (*BlockVolume, error) {
	var resource BlockVolume
	err := ctx.ReadResource("thalassa:index/blockVolume:BlockVolume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockVolume resources.
type blockVolumeState struct {
	// Annotations for the Block Volume
	Annotations map[string]string `pulumi:"annotations"`
	// Delete protection of the Block Volume
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// A human readable description about the Block Volume
	Description *string `pulumi:"description"`
	// Labels for the Block Volume
	Labels map[string]string `pulumi:"labels"`
	// Name of the Block Volume
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Region of the Block Volume.
	Region *string `pulumi:"region"`
	// Size of the Block Volume in GB
	SizeGb *int    `pulumi:"sizeGb"`
	Slug   *string `pulumi:"slug"`
	// Status of the Block Volume
	Status *string `pulumi:"status"`
	// Volume type of the Block Volume
	VolumeType *string `pulumi:"volumeType"`
	// Wait until the Block Volume is ready
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

type BlockVolumeState struct {
	// Annotations for the Block Volume
	Annotations pulumi.StringMapInput
	// Delete protection of the Block Volume
	DeleteProtection pulumi.BoolPtrInput
	// A human readable description about the Block Volume
	Description pulumi.StringPtrInput
	// Labels for the Block Volume
	Labels pulumi.StringMapInput
	// Name of the Block Volume
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Region of the Block Volume.
	Region pulumi.StringPtrInput
	// Size of the Block Volume in GB
	SizeGb pulumi.IntPtrInput
	Slug   pulumi.StringPtrInput
	// Status of the Block Volume
	Status pulumi.StringPtrInput
	// Volume type of the Block Volume
	VolumeType pulumi.StringPtrInput
	// Wait until the Block Volume is ready
	WaitUntilReady pulumi.BoolPtrInput
}

func (BlockVolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockVolumeState)(nil)).Elem()
}

type blockVolumeArgs struct {
	// Annotations for the Block Volume
	Annotations map[string]string `pulumi:"annotations"`
	// Delete protection of the Block Volume
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// A human readable description about the Block Volume
	Description *string `pulumi:"description"`
	// Labels for the Block Volume
	Labels map[string]string `pulumi:"labels"`
	// Name of the Block Volume
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Region of the Block Volume.
	Region *string `pulumi:"region"`
	// Size of the Block Volume in GB
	SizeGb int `pulumi:"sizeGb"`
	// Volume type of the Block Volume
	VolumeType string `pulumi:"volumeType"`
	// Wait until the Block Volume is ready
	WaitUntilReady *bool `pulumi:"waitUntilReady"`
}

// The set of arguments for constructing a BlockVolume resource.
type BlockVolumeArgs struct {
	// Annotations for the Block Volume
	Annotations pulumi.StringMapInput
	// Delete protection of the Block Volume
	DeleteProtection pulumi.BoolPtrInput
	// A human readable description about the Block Volume
	Description pulumi.StringPtrInput
	// Labels for the Block Volume
	Labels pulumi.StringMapInput
	// Name of the Block Volume
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Region of the Block Volume.
	Region pulumi.StringPtrInput
	// Size of the Block Volume in GB
	SizeGb pulumi.IntInput
	// Volume type of the Block Volume
	VolumeType pulumi.StringInput
	// Wait until the Block Volume is ready
	WaitUntilReady pulumi.BoolPtrInput
}

func (BlockVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockVolumeArgs)(nil)).Elem()
}

type BlockVolumeInput interface {
	pulumi.Input

	ToBlockVolumeOutput() BlockVolumeOutput
	ToBlockVolumeOutputWithContext(ctx context.Context) BlockVolumeOutput
}

func (*BlockVolume) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockVolume)(nil)).Elem()
}

func (i *BlockVolume) ToBlockVolumeOutput() BlockVolumeOutput {
	return i.ToBlockVolumeOutputWithContext(context.Background())
}

func (i *BlockVolume) ToBlockVolumeOutputWithContext(ctx context.Context) BlockVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockVolumeOutput)
}

// BlockVolumeArrayInput is an input type that accepts BlockVolumeArray and BlockVolumeArrayOutput values.
// You can construct a concrete instance of `BlockVolumeArrayInput` via:
//
//	BlockVolumeArray{ BlockVolumeArgs{...} }
type BlockVolumeArrayInput interface {
	pulumi.Input

	ToBlockVolumeArrayOutput() BlockVolumeArrayOutput
	ToBlockVolumeArrayOutputWithContext(context.Context) BlockVolumeArrayOutput
}

type BlockVolumeArray []BlockVolumeInput

func (BlockVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockVolume)(nil)).Elem()
}

func (i BlockVolumeArray) ToBlockVolumeArrayOutput() BlockVolumeArrayOutput {
	return i.ToBlockVolumeArrayOutputWithContext(context.Background())
}

func (i BlockVolumeArray) ToBlockVolumeArrayOutputWithContext(ctx context.Context) BlockVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockVolumeArrayOutput)
}

// BlockVolumeMapInput is an input type that accepts BlockVolumeMap and BlockVolumeMapOutput values.
// You can construct a concrete instance of `BlockVolumeMapInput` via:
//
//	BlockVolumeMap{ "key": BlockVolumeArgs{...} }
type BlockVolumeMapInput interface {
	pulumi.Input

	ToBlockVolumeMapOutput() BlockVolumeMapOutput
	ToBlockVolumeMapOutputWithContext(context.Context) BlockVolumeMapOutput
}

type BlockVolumeMap map[string]BlockVolumeInput

func (BlockVolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockVolume)(nil)).Elem()
}

func (i BlockVolumeMap) ToBlockVolumeMapOutput() BlockVolumeMapOutput {
	return i.ToBlockVolumeMapOutputWithContext(context.Background())
}

func (i BlockVolumeMap) ToBlockVolumeMapOutputWithContext(ctx context.Context) BlockVolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockVolumeMapOutput)
}

type BlockVolumeOutput struct{ *pulumi.OutputState }

func (BlockVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockVolume)(nil)).Elem()
}

func (o BlockVolumeOutput) ToBlockVolumeOutput() BlockVolumeOutput {
	return o
}

func (o BlockVolumeOutput) ToBlockVolumeOutputWithContext(ctx context.Context) BlockVolumeOutput {
	return o
}

// Annotations for the Block Volume
func (o BlockVolumeOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Delete protection of the Block Volume
func (o BlockVolumeOutput) DeleteProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.BoolPtrOutput { return v.DeleteProtection }).(pulumi.BoolPtrOutput)
}

// A human readable description about the Block Volume
func (o BlockVolumeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Labels for the Block Volume
func (o BlockVolumeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the Block Volume
func (o BlockVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BlockVolumeOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Region of the Block Volume.
func (o BlockVolumeOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Size of the Block Volume in GB
func (o BlockVolumeOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.IntOutput { return v.SizeGb }).(pulumi.IntOutput)
}

func (o BlockVolumeOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Status of the Block Volume
func (o BlockVolumeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Volume type of the Block Volume
func (o BlockVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

// Wait until the Block Volume is ready
func (o BlockVolumeOutput) WaitUntilReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BlockVolume) pulumi.BoolPtrOutput { return v.WaitUntilReady }).(pulumi.BoolPtrOutput)
}

type BlockVolumeArrayOutput struct{ *pulumi.OutputState }

func (BlockVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockVolume)(nil)).Elem()
}

func (o BlockVolumeArrayOutput) ToBlockVolumeArrayOutput() BlockVolumeArrayOutput {
	return o
}

func (o BlockVolumeArrayOutput) ToBlockVolumeArrayOutputWithContext(ctx context.Context) BlockVolumeArrayOutput {
	return o
}

func (o BlockVolumeArrayOutput) Index(i pulumi.IntInput) BlockVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlockVolume {
		return vs[0].([]*BlockVolume)[vs[1].(int)]
	}).(BlockVolumeOutput)
}

type BlockVolumeMapOutput struct{ *pulumi.OutputState }

func (BlockVolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockVolume)(nil)).Elem()
}

func (o BlockVolumeMapOutput) ToBlockVolumeMapOutput() BlockVolumeMapOutput {
	return o
}

func (o BlockVolumeMapOutput) ToBlockVolumeMapOutputWithContext(ctx context.Context) BlockVolumeMapOutput {
	return o
}

func (o BlockVolumeMapOutput) MapIndex(k pulumi.StringInput) BlockVolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlockVolume {
		return vs[0].(map[string]*BlockVolume)[vs[1].(string)]
	}).(BlockVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockVolumeInput)(nil)).Elem(), &BlockVolume{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockVolumeArrayInput)(nil)).Elem(), BlockVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockVolumeMapInput)(nil)).Elem(), BlockVolumeMap{})
	pulumi.RegisterOutputType(BlockVolumeOutput{})
	pulumi.RegisterOutputType(BlockVolumeArrayOutput{})
	pulumi.RegisterOutputType(BlockVolumeMapOutput{})
}
