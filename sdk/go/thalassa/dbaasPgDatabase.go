// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create a PostgreSQL database
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the database cluster
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for database cluster"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the database cluster
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for database cluster"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a database cluster for the PostgreSQL database
//			exampleDbaasDbCluster, err := thalassa.NewDbaasDbCluster(ctx, "example", &thalassa.DbaasDbClusterArgs{
//				Name:                 pulumi.String("example-db-cluster"),
//				Description:          pulumi.String("Example database cluster for PostgreSQL database"),
//				SubnetId:             exampleSubnet.ID(),
//				DatabaseInstanceType: pulumi.String("db-pgp-small"),
//				Engine:               pulumi.String("postgres"),
//				EngineVersion:        pulumi.String("15.13"),
//				AllocatedStorage:     pulumi.Int(100),
//				VolumeTypeClass:      pulumi.String("block"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create PostgreSQL roles first
//			exampleDbaasPgRoles, err := thalassa.NewDbaasPgRoles(ctx, "example", &thalassa.DbaasPgRolesArgs{
//				DbClusterId: exampleDbaasDbCluster.ID(),
//				Name:        pulumi.String("myrole"),
//				Password:    pulumi.String("secure_password_123"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a PostgreSQL database with Thalassa default values
//			exampleDbaasPgDatabase, err := thalassa.NewDbaasPgDatabase(ctx, "example", &thalassa.DbaasPgDatabaseArgs{
//				Name:        pulumi.String("mydatabase2"),
//				DbClusterId: exampleDbaasDbCluster.ID(),
//				OwnerRoleId: exampleDbaasPgRoles.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("pgDatabaseId", exampleDbaasPgDatabase.ID())
//			ctx.Export("pgDatabaseName", exampleDbaasPgDatabase.Name)
//			return nil
//		})
//	}
//
// ```
type DbaasPgDatabase struct {
	pulumi.CustomResourceState

	// The connection limit of the database
	ConnectionLimit pulumi.IntPtrOutput `pulumi:"connectionLimit"`
	// The ID of the database cluster
	DbClusterId pulumi.StringOutput `pulumi:"dbClusterId"`
	// The name of the database
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// The ID of the owner role
	OwnerRoleId pulumi.StringOutput `pulumi:"ownerRoleId"`
}

// NewDbaasPgDatabase registers a new resource with the given unique name, arguments, and options.
func NewDbaasPgDatabase(ctx *pulumi.Context,
	name string, args *DbaasPgDatabaseArgs, opts ...pulumi.ResourceOption) (*DbaasPgDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterId == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterId'")
	}
	if args.OwnerRoleId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerRoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasPgDatabase
	err := ctx.RegisterResource("thalassa:index/dbaasPgDatabase:DbaasPgDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasPgDatabase gets an existing DbaasPgDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasPgDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasPgDatabaseState, opts ...pulumi.ResourceOption) (*DbaasPgDatabase, error) {
	var resource DbaasPgDatabase
	err := ctx.ReadResource("thalassa:index/dbaasPgDatabase:DbaasPgDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasPgDatabase resources.
type dbaasPgDatabaseState struct {
	// The connection limit of the database
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// The ID of the database cluster
	DbClusterId *string `pulumi:"dbClusterId"`
	// The name of the database
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The ID of the owner role
	OwnerRoleId *string `pulumi:"ownerRoleId"`
}

type DbaasPgDatabaseState struct {
	// The connection limit of the database
	ConnectionLimit pulumi.IntPtrInput
	// The ID of the database cluster
	DbClusterId pulumi.StringPtrInput
	// The name of the database
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The ID of the owner role
	OwnerRoleId pulumi.StringPtrInput
}

func (DbaasPgDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasPgDatabaseState)(nil)).Elem()
}

type dbaasPgDatabaseArgs struct {
	// The connection limit of the database
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// The ID of the database cluster
	DbClusterId string `pulumi:"dbClusterId"`
	// The name of the database
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The ID of the owner role
	OwnerRoleId string `pulumi:"ownerRoleId"`
}

// The set of arguments for constructing a DbaasPgDatabase resource.
type DbaasPgDatabaseArgs struct {
	// The connection limit of the database
	ConnectionLimit pulumi.IntPtrInput
	// The ID of the database cluster
	DbClusterId pulumi.StringInput
	// The name of the database
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The ID of the owner role
	OwnerRoleId pulumi.StringInput
}

func (DbaasPgDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasPgDatabaseArgs)(nil)).Elem()
}

type DbaasPgDatabaseInput interface {
	pulumi.Input

	ToDbaasPgDatabaseOutput() DbaasPgDatabaseOutput
	ToDbaasPgDatabaseOutputWithContext(ctx context.Context) DbaasPgDatabaseOutput
}

func (*DbaasPgDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasPgDatabase)(nil)).Elem()
}

func (i *DbaasPgDatabase) ToDbaasPgDatabaseOutput() DbaasPgDatabaseOutput {
	return i.ToDbaasPgDatabaseOutputWithContext(context.Background())
}

func (i *DbaasPgDatabase) ToDbaasPgDatabaseOutputWithContext(ctx context.Context) DbaasPgDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgDatabaseOutput)
}

// DbaasPgDatabaseArrayInput is an input type that accepts DbaasPgDatabaseArray and DbaasPgDatabaseArrayOutput values.
// You can construct a concrete instance of `DbaasPgDatabaseArrayInput` via:
//
//	DbaasPgDatabaseArray{ DbaasPgDatabaseArgs{...} }
type DbaasPgDatabaseArrayInput interface {
	pulumi.Input

	ToDbaasPgDatabaseArrayOutput() DbaasPgDatabaseArrayOutput
	ToDbaasPgDatabaseArrayOutputWithContext(context.Context) DbaasPgDatabaseArrayOutput
}

type DbaasPgDatabaseArray []DbaasPgDatabaseInput

func (DbaasPgDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasPgDatabase)(nil)).Elem()
}

func (i DbaasPgDatabaseArray) ToDbaasPgDatabaseArrayOutput() DbaasPgDatabaseArrayOutput {
	return i.ToDbaasPgDatabaseArrayOutputWithContext(context.Background())
}

func (i DbaasPgDatabaseArray) ToDbaasPgDatabaseArrayOutputWithContext(ctx context.Context) DbaasPgDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgDatabaseArrayOutput)
}

// DbaasPgDatabaseMapInput is an input type that accepts DbaasPgDatabaseMap and DbaasPgDatabaseMapOutput values.
// You can construct a concrete instance of `DbaasPgDatabaseMapInput` via:
//
//	DbaasPgDatabaseMap{ "key": DbaasPgDatabaseArgs{...} }
type DbaasPgDatabaseMapInput interface {
	pulumi.Input

	ToDbaasPgDatabaseMapOutput() DbaasPgDatabaseMapOutput
	ToDbaasPgDatabaseMapOutputWithContext(context.Context) DbaasPgDatabaseMapOutput
}

type DbaasPgDatabaseMap map[string]DbaasPgDatabaseInput

func (DbaasPgDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasPgDatabase)(nil)).Elem()
}

func (i DbaasPgDatabaseMap) ToDbaasPgDatabaseMapOutput() DbaasPgDatabaseMapOutput {
	return i.ToDbaasPgDatabaseMapOutputWithContext(context.Background())
}

func (i DbaasPgDatabaseMap) ToDbaasPgDatabaseMapOutputWithContext(ctx context.Context) DbaasPgDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgDatabaseMapOutput)
}

type DbaasPgDatabaseOutput struct{ *pulumi.OutputState }

func (DbaasPgDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasPgDatabase)(nil)).Elem()
}

func (o DbaasPgDatabaseOutput) ToDbaasPgDatabaseOutput() DbaasPgDatabaseOutput {
	return o
}

func (o DbaasPgDatabaseOutput) ToDbaasPgDatabaseOutputWithContext(ctx context.Context) DbaasPgDatabaseOutput {
	return o
}

// The connection limit of the database
func (o DbaasPgDatabaseOutput) ConnectionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.IntPtrOutput { return v.ConnectionLimit }).(pulumi.IntPtrOutput)
}

// The ID of the database cluster
func (o DbaasPgDatabaseOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringOutput { return v.DbClusterId }).(pulumi.StringOutput)
}

// The name of the database
func (o DbaasPgDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DbaasPgDatabaseOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// The ID of the owner role
func (o DbaasPgDatabaseOutput) OwnerRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgDatabase) pulumi.StringOutput { return v.OwnerRoleId }).(pulumi.StringOutput)
}

type DbaasPgDatabaseArrayOutput struct{ *pulumi.OutputState }

func (DbaasPgDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasPgDatabase)(nil)).Elem()
}

func (o DbaasPgDatabaseArrayOutput) ToDbaasPgDatabaseArrayOutput() DbaasPgDatabaseArrayOutput {
	return o
}

func (o DbaasPgDatabaseArrayOutput) ToDbaasPgDatabaseArrayOutputWithContext(ctx context.Context) DbaasPgDatabaseArrayOutput {
	return o
}

func (o DbaasPgDatabaseArrayOutput) Index(i pulumi.IntInput) DbaasPgDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasPgDatabase {
		return vs[0].([]*DbaasPgDatabase)[vs[1].(int)]
	}).(DbaasPgDatabaseOutput)
}

type DbaasPgDatabaseMapOutput struct{ *pulumi.OutputState }

func (DbaasPgDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasPgDatabase)(nil)).Elem()
}

func (o DbaasPgDatabaseMapOutput) ToDbaasPgDatabaseMapOutput() DbaasPgDatabaseMapOutput {
	return o
}

func (o DbaasPgDatabaseMapOutput) ToDbaasPgDatabaseMapOutputWithContext(ctx context.Context) DbaasPgDatabaseMapOutput {
	return o
}

func (o DbaasPgDatabaseMapOutput) MapIndex(k pulumi.StringInput) DbaasPgDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasPgDatabase {
		return vs[0].(map[string]*DbaasPgDatabase)[vs[1].(string)]
	}).(DbaasPgDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgDatabaseInput)(nil)).Elem(), &DbaasPgDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgDatabaseArrayInput)(nil)).Elem(), DbaasPgDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgDatabaseMapInput)(nil)).Elem(), DbaasPgDatabaseMap{})
	pulumi.RegisterOutputType(DbaasPgDatabaseOutput{})
	pulumi.RegisterOutputType(DbaasPgDatabaseArrayOutput{})
	pulumi.RegisterOutputType(DbaasPgDatabaseMapOutput{})
}
