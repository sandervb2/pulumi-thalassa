// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create an virtual machine instance within a subnet on the Thalassa Cloud platform
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the virtual machine instance
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for virtual machine instance"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the virtual machine instance
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for virtual machine instance"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a security group for the virtual machine instance
//			_, err = thalassa.NewSecurityGroup(ctx, "example", &thalassa.SecurityGroupArgs{
//				Name:        pulumi.String("example-security-group"),
//				Description: pulumi.String("Example security group for virtual machine instance"),
//				VpcId:       example.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a cloud init template (optional)
//			exampleCloudInitTemplate, err := thalassa.NewCloudInitTemplate(ctx, "example", &thalassa.CloudInitTemplateArgs{
//				Name: pulumi.String("example-cloud-init-template"),
//				Content: pulumi.String(`#cloud-config
//
// package_update: true
// package_upgrade: true
// packages:
//   - nginx
//   - curl
//
// runcmd:
//   - systemctl enable nginx
//   - systemctl start nginx
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			block, err := thalassa.GetVolumeType(ctx, &thalassa.GetVolumeTypeArgs{
//				Name: "Block",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ubuntu, err := thalassa.GetMachineImage(ctx, &thalassa.GetMachineImageArgs{
//				Name: "ubuntu-22-04-01",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create a virtual machine instance with Thalassa default values
//			exampleVirtualMachineInstance, err := thalassa.NewVirtualMachineInstance(ctx, "example", &thalassa.VirtualMachineInstanceArgs{
//				Name:                pulumi.String("example-instance"),
//				SubnetId:            exampleSubnet.ID(),
//				MachineType:         pulumi.String("pgp-small"),
//				MachineImage:        pulumi.String(ubuntu.Name),
//				AvailabilityZone:    pulumi.String("nl-01a"),
//				RootVolumeSizeGb:    pulumi.Int(20),
//				RootVolumeType:      pulumi.String(block.Id),
//				CloudInitTemplateId: exampleCloudInitTemplate.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("instanceId", exampleVirtualMachineInstance.ID())
//			ctx.Export("instanceName", exampleVirtualMachineInstance.Name)
//			// Create a load balancer for the virtual machine instance
//			exampleLoadbalancer, err := thalassa.NewLoadbalancer(ctx, "example", &thalassa.LoadbalancerArgs{
//				Name:        pulumi.String("example-lb"),
//				Region:      pulumi.String("nl-01"),
//				Description: pulumi.String("Example load balancer for virtual machine instance"),
//				SubnetId:    exampleSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a load balancer target group
//			exampleTargetGroup, err := thalassa.NewTargetGroup(ctx, "example", &thalassa.TargetGroupArgs{
//				Name:        pulumi.String("example-lb-target-group"),
//				Description: pulumi.String("Example load balancer target group for virtual machine instance"),
//				VpcId:       example.ID(),
//				Protocol:    pulumi.String("tcp"),
//				Port:        pulumi.Int(22),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a load balancer listener
//			exampleLoadbalancerListener, err := thalassa.NewLoadbalancerListener(ctx, "example", &thalassa.LoadbalancerListenerArgs{
//				Name:           pulumi.String("example-lb-listener"),
//				Description:    pulumi.String("Example load balancer listener for virtual machine instance"),
//				LoadbalancerId: exampleLoadbalancer.ID(),
//				Protocol:       pulumi.String("tcp"),
//				Port:           pulumi.Int(22),
//				TargetGroupId:  exampleTargetGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = thalassa.NewTargetGroupAttachment(ctx, "example", &thalassa.TargetGroupAttachmentArgs{
//				TargetGroupId: exampleTargetGroup.ID(),
//				VmiId:         exampleVirtualMachineInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("loadBalancerIp", exampleLoadbalancer.IpAddress)
//			ctx.Export("loadBalancerPort", exampleLoadbalancerListener.Port)
//			return nil
//		})
//	}
//
// ```
type VirtualMachineInstance struct {
	pulumi.CustomResourceState

	// Annotations for the virtual machine instance
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Attached volume ids of the virtual machine instance
	AttachedVolumeIds pulumi.StringArrayOutput `pulumi:"attachedVolumeIds"`
	// Availability zone of the virtual machine instance
	AvailabilityZone pulumi.StringPtrOutput `pulumi:"availabilityZone"`
	// Cloud init of the virtual machine instance
	CloudInit pulumi.StringPtrOutput `pulumi:"cloudInit"`
	// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
	CloudInitTemplateId pulumi.StringPtrOutput `pulumi:"cloudInitTemplateId"`
	// Delete protection of the virtual machine instance
	DeleteProtection pulumi.BoolPtrOutput `pulumi:"deleteProtection"`
	// A human readable description about the virtual machine instance
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// IP addresses of the virtual machine instance
	IpAddresses pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	// Labels for the virtual machine instance
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Machine image of the virtual machine instance
	MachineImage pulumi.StringOutput `pulumi:"machineImage"`
	// Machine type of the virtual machine instance
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// Name of the Virtual Machine Instance
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
	RootVolumeId pulumi.StringOutput `pulumi:"rootVolumeId"`
	// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeSizeGb pulumi.IntPtrOutput `pulumi:"rootVolumeSizeGb"`
	// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeType pulumi.StringPtrOutput `pulumi:"rootVolumeType"`
	// List identities of security group that will be attached to the Virtual Machine Instance
	SecurityGroupAttachments pulumi.StringArrayOutput `pulumi:"securityGroupAttachments"`
	// Slug of the Virtual Machine Instance
	Slug pulumi.StringOutput `pulumi:"slug"`
	// Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
	State pulumi.StringOutput `pulumi:"state"`
	// Status of the virtual machine instance
	Status pulumi.StringOutput `pulumi:"status"`
	// Subnet of the Virtual Machine Instance
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewVirtualMachineInstance registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachineInstance(ctx *pulumi.Context,
	name string, args *VirtualMachineInstanceArgs, opts ...pulumi.ResourceOption) (*VirtualMachineInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MachineImage == nil {
		return nil, errors.New("invalid value for required argument 'MachineImage'")
	}
	if args.MachineType == nil {
		return nil, errors.New("invalid value for required argument 'MachineType'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualMachineInstance
	err := ctx.RegisterResource("thalassa:index/virtualMachineInstance:VirtualMachineInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachineInstance gets an existing VirtualMachineInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachineInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineInstanceState, opts ...pulumi.ResourceOption) (*VirtualMachineInstance, error) {
	var resource VirtualMachineInstance
	err := ctx.ReadResource("thalassa:index/virtualMachineInstance:VirtualMachineInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachineInstance resources.
type virtualMachineInstanceState struct {
	// Annotations for the virtual machine instance
	Annotations map[string]string `pulumi:"annotations"`
	// Attached volume ids of the virtual machine instance
	AttachedVolumeIds []string `pulumi:"attachedVolumeIds"`
	// Availability zone of the virtual machine instance
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Cloud init of the virtual machine instance
	CloudInit *string `pulumi:"cloudInit"`
	// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
	CloudInitTemplateId *string `pulumi:"cloudInitTemplateId"`
	// Delete protection of the virtual machine instance
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// A human readable description about the virtual machine instance
	Description *string `pulumi:"description"`
	// IP addresses of the virtual machine instance
	IpAddresses []string `pulumi:"ipAddresses"`
	// Labels for the virtual machine instance
	Labels map[string]string `pulumi:"labels"`
	// Machine image of the virtual machine instance
	MachineImage *string `pulumi:"machineImage"`
	// Machine type of the virtual machine instance
	MachineType *string `pulumi:"machineType"`
	// Name of the Virtual Machine Instance
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
	RootVolumeId *string `pulumi:"rootVolumeId"`
	// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeSizeGb *int `pulumi:"rootVolumeSizeGb"`
	// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeType *string `pulumi:"rootVolumeType"`
	// List identities of security group that will be attached to the Virtual Machine Instance
	SecurityGroupAttachments []string `pulumi:"securityGroupAttachments"`
	// Slug of the Virtual Machine Instance
	Slug *string `pulumi:"slug"`
	// Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
	State *string `pulumi:"state"`
	// Status of the virtual machine instance
	Status *string `pulumi:"status"`
	// Subnet of the Virtual Machine Instance
	SubnetId *string `pulumi:"subnetId"`
}

type VirtualMachineInstanceState struct {
	// Annotations for the virtual machine instance
	Annotations pulumi.StringMapInput
	// Attached volume ids of the virtual machine instance
	AttachedVolumeIds pulumi.StringArrayInput
	// Availability zone of the virtual machine instance
	AvailabilityZone pulumi.StringPtrInput
	// Cloud init of the virtual machine instance
	CloudInit pulumi.StringPtrInput
	// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
	CloudInitTemplateId pulumi.StringPtrInput
	// Delete protection of the virtual machine instance
	DeleteProtection pulumi.BoolPtrInput
	// A human readable description about the virtual machine instance
	Description pulumi.StringPtrInput
	// IP addresses of the virtual machine instance
	IpAddresses pulumi.StringArrayInput
	// Labels for the virtual machine instance
	Labels pulumi.StringMapInput
	// Machine image of the virtual machine instance
	MachineImage pulumi.StringPtrInput
	// Machine type of the virtual machine instance
	MachineType pulumi.StringPtrInput
	// Name of the Virtual Machine Instance
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
	RootVolumeId pulumi.StringPtrInput
	// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeSizeGb pulumi.IntPtrInput
	// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeType pulumi.StringPtrInput
	// List identities of security group that will be attached to the Virtual Machine Instance
	SecurityGroupAttachments pulumi.StringArrayInput
	// Slug of the Virtual Machine Instance
	Slug pulumi.StringPtrInput
	// Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
	State pulumi.StringPtrInput
	// Status of the virtual machine instance
	Status pulumi.StringPtrInput
	// Subnet of the Virtual Machine Instance
	SubnetId pulumi.StringPtrInput
}

func (VirtualMachineInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineInstanceState)(nil)).Elem()
}

type virtualMachineInstanceArgs struct {
	// Annotations for the virtual machine instance
	Annotations map[string]string `pulumi:"annotations"`
	// Availability zone of the virtual machine instance
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Cloud init of the virtual machine instance
	CloudInit *string `pulumi:"cloudInit"`
	// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
	CloudInitTemplateId *string `pulumi:"cloudInitTemplateId"`
	// Delete protection of the virtual machine instance
	DeleteProtection *bool `pulumi:"deleteProtection"`
	// A human readable description about the virtual machine instance
	Description *string `pulumi:"description"`
	// Labels for the virtual machine instance
	Labels map[string]string `pulumi:"labels"`
	// Machine image of the virtual machine instance
	MachineImage string `pulumi:"machineImage"`
	// Machine type of the virtual machine instance
	MachineType string `pulumi:"machineType"`
	// Name of the Virtual Machine Instance
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
	RootVolumeId *string `pulumi:"rootVolumeId"`
	// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeSizeGb *int `pulumi:"rootVolumeSizeGb"`
	// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeType *string `pulumi:"rootVolumeType"`
	// List identities of security group that will be attached to the Virtual Machine Instance
	SecurityGroupAttachments []string `pulumi:"securityGroupAttachments"`
	// Subnet of the Virtual Machine Instance
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a VirtualMachineInstance resource.
type VirtualMachineInstanceArgs struct {
	// Annotations for the virtual machine instance
	Annotations pulumi.StringMapInput
	// Availability zone of the virtual machine instance
	AvailabilityZone pulumi.StringPtrInput
	// Cloud init of the virtual machine instance
	CloudInit pulumi.StringPtrInput
	// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
	CloudInitTemplateId pulumi.StringPtrInput
	// Delete protection of the virtual machine instance
	DeleteProtection pulumi.BoolPtrInput
	// A human readable description about the virtual machine instance
	Description pulumi.StringPtrInput
	// Labels for the virtual machine instance
	Labels pulumi.StringMapInput
	// Machine image of the virtual machine instance
	MachineImage pulumi.StringInput
	// Machine type of the virtual machine instance
	MachineType pulumi.StringInput
	// Name of the Virtual Machine Instance
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
	RootVolumeId pulumi.StringPtrInput
	// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeSizeGb pulumi.IntPtrInput
	// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
	RootVolumeType pulumi.StringPtrInput
	// List identities of security group that will be attached to the Virtual Machine Instance
	SecurityGroupAttachments pulumi.StringArrayInput
	// Subnet of the Virtual Machine Instance
	SubnetId pulumi.StringInput
}

func (VirtualMachineInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineInstanceArgs)(nil)).Elem()
}

type VirtualMachineInstanceInput interface {
	pulumi.Input

	ToVirtualMachineInstanceOutput() VirtualMachineInstanceOutput
	ToVirtualMachineInstanceOutputWithContext(ctx context.Context) VirtualMachineInstanceOutput
}

func (*VirtualMachineInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInstance)(nil)).Elem()
}

func (i *VirtualMachineInstance) ToVirtualMachineInstanceOutput() VirtualMachineInstanceOutput {
	return i.ToVirtualMachineInstanceOutputWithContext(context.Background())
}

func (i *VirtualMachineInstance) ToVirtualMachineInstanceOutputWithContext(ctx context.Context) VirtualMachineInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInstanceOutput)
}

// VirtualMachineInstanceArrayInput is an input type that accepts VirtualMachineInstanceArray and VirtualMachineInstanceArrayOutput values.
// You can construct a concrete instance of `VirtualMachineInstanceArrayInput` via:
//
//	VirtualMachineInstanceArray{ VirtualMachineInstanceArgs{...} }
type VirtualMachineInstanceArrayInput interface {
	pulumi.Input

	ToVirtualMachineInstanceArrayOutput() VirtualMachineInstanceArrayOutput
	ToVirtualMachineInstanceArrayOutputWithContext(context.Context) VirtualMachineInstanceArrayOutput
}

type VirtualMachineInstanceArray []VirtualMachineInstanceInput

func (VirtualMachineInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachineInstance)(nil)).Elem()
}

func (i VirtualMachineInstanceArray) ToVirtualMachineInstanceArrayOutput() VirtualMachineInstanceArrayOutput {
	return i.ToVirtualMachineInstanceArrayOutputWithContext(context.Background())
}

func (i VirtualMachineInstanceArray) ToVirtualMachineInstanceArrayOutputWithContext(ctx context.Context) VirtualMachineInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInstanceArrayOutput)
}

// VirtualMachineInstanceMapInput is an input type that accepts VirtualMachineInstanceMap and VirtualMachineInstanceMapOutput values.
// You can construct a concrete instance of `VirtualMachineInstanceMapInput` via:
//
//	VirtualMachineInstanceMap{ "key": VirtualMachineInstanceArgs{...} }
type VirtualMachineInstanceMapInput interface {
	pulumi.Input

	ToVirtualMachineInstanceMapOutput() VirtualMachineInstanceMapOutput
	ToVirtualMachineInstanceMapOutputWithContext(context.Context) VirtualMachineInstanceMapOutput
}

type VirtualMachineInstanceMap map[string]VirtualMachineInstanceInput

func (VirtualMachineInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachineInstance)(nil)).Elem()
}

func (i VirtualMachineInstanceMap) ToVirtualMachineInstanceMapOutput() VirtualMachineInstanceMapOutput {
	return i.ToVirtualMachineInstanceMapOutputWithContext(context.Background())
}

func (i VirtualMachineInstanceMap) ToVirtualMachineInstanceMapOutputWithContext(ctx context.Context) VirtualMachineInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineInstanceMapOutput)
}

type VirtualMachineInstanceOutput struct{ *pulumi.OutputState }

func (VirtualMachineInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineInstance)(nil)).Elem()
}

func (o VirtualMachineInstanceOutput) ToVirtualMachineInstanceOutput() VirtualMachineInstanceOutput {
	return o
}

func (o VirtualMachineInstanceOutput) ToVirtualMachineInstanceOutputWithContext(ctx context.Context) VirtualMachineInstanceOutput {
	return o
}

// Annotations for the virtual machine instance
func (o VirtualMachineInstanceOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Attached volume ids of the virtual machine instance
func (o VirtualMachineInstanceOutput) AttachedVolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringArrayOutput { return v.AttachedVolumeIds }).(pulumi.StringArrayOutput)
}

// Availability zone of the virtual machine instance
func (o VirtualMachineInstanceOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringPtrOutput { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// Cloud init of the virtual machine instance
func (o VirtualMachineInstanceOutput) CloudInit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringPtrOutput { return v.CloudInit }).(pulumi.StringPtrOutput)
}

// Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
func (o VirtualMachineInstanceOutput) CloudInitTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringPtrOutput { return v.CloudInitTemplateId }).(pulumi.StringPtrOutput)
}

// Delete protection of the virtual machine instance
func (o VirtualMachineInstanceOutput) DeleteProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.BoolPtrOutput { return v.DeleteProtection }).(pulumi.BoolPtrOutput)
}

// A human readable description about the virtual machine instance
func (o VirtualMachineInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// IP addresses of the virtual machine instance
func (o VirtualMachineInstanceOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Labels for the virtual machine instance
func (o VirtualMachineInstanceOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Machine image of the virtual machine instance
func (o VirtualMachineInstanceOutput) MachineImage() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringOutput { return v.MachineImage }).(pulumi.StringOutput)
}

// Machine type of the virtual machine instance
func (o VirtualMachineInstanceOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// Name of the Virtual Machine Instance
func (o VirtualMachineInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VirtualMachineInstanceOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
func (o VirtualMachineInstanceOutput) RootVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringOutput { return v.RootVolumeId }).(pulumi.StringOutput)
}

// Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
func (o VirtualMachineInstanceOutput) RootVolumeSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.IntPtrOutput { return v.RootVolumeSizeGb }).(pulumi.IntPtrOutput)
}

// Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
func (o VirtualMachineInstanceOutput) RootVolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringPtrOutput { return v.RootVolumeType }).(pulumi.StringPtrOutput)
}

// List identities of security group that will be attached to the Virtual Machine Instance
func (o VirtualMachineInstanceOutput) SecurityGroupAttachments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringArrayOutput { return v.SecurityGroupAttachments }).(pulumi.StringArrayOutput)
}

// Slug of the Virtual Machine Instance
func (o VirtualMachineInstanceOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
func (o VirtualMachineInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Status of the virtual machine instance
func (o VirtualMachineInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Subnet of the Virtual Machine Instance
func (o VirtualMachineInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualMachineInstance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type VirtualMachineInstanceArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachineInstance)(nil)).Elem()
}

func (o VirtualMachineInstanceArrayOutput) ToVirtualMachineInstanceArrayOutput() VirtualMachineInstanceArrayOutput {
	return o
}

func (o VirtualMachineInstanceArrayOutput) ToVirtualMachineInstanceArrayOutputWithContext(ctx context.Context) VirtualMachineInstanceArrayOutput {
	return o
}

func (o VirtualMachineInstanceArrayOutput) Index(i pulumi.IntInput) VirtualMachineInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualMachineInstance {
		return vs[0].([]*VirtualMachineInstance)[vs[1].(int)]
	}).(VirtualMachineInstanceOutput)
}

type VirtualMachineInstanceMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachineInstance)(nil)).Elem()
}

func (o VirtualMachineInstanceMapOutput) ToVirtualMachineInstanceMapOutput() VirtualMachineInstanceMapOutput {
	return o
}

func (o VirtualMachineInstanceMapOutput) ToVirtualMachineInstanceMapOutputWithContext(ctx context.Context) VirtualMachineInstanceMapOutput {
	return o
}

func (o VirtualMachineInstanceMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualMachineInstance {
		return vs[0].(map[string]*VirtualMachineInstance)[vs[1].(string)]
	}).(VirtualMachineInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInstanceInput)(nil)).Elem(), &VirtualMachineInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInstanceArrayInput)(nil)).Elem(), VirtualMachineInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInstanceMapInput)(nil)).Elem(), VirtualMachineInstanceMap{})
	pulumi.RegisterOutputType(VirtualMachineInstanceOutput{})
	pulumi.RegisterOutputType(VirtualMachineInstanceArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineInstanceMapOutput{})
}
