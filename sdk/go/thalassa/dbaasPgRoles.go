// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Create a PostgreSQL role
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a VPC for the database cluster
//			example, err := thalassa.NewVpc(ctx, "example", &thalassa.VpcArgs{
//				Name:        pulumi.String("example-vpc"),
//				Description: pulumi.String("Example VPC for database cluster"),
//				Region:      pulumi.String("nl-01"),
//				Cidrs: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create a subnet for the database cluster
//			exampleSubnet, err := thalassa.NewSubnet(ctx, "example", &thalassa.SubnetArgs{
//				Name:        pulumi.String("example-subnet"),
//				Description: pulumi.String("Example subnet for database cluster"),
//				VpcId:       example.ID(),
//				Cidr:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a database cluster for the PostgreSQL roles
//			exampleDbaasDbCluster, err := thalassa.NewDbaasDbCluster(ctx, "example", &thalassa.DbaasDbClusterArgs{
//				Name:                 pulumi.String("example-db-cluster"),
//				Description:          pulumi.String("Example database cluster for PostgreSQL roles"),
//				SubnetId:             exampleSubnet.ID(),
//				DatabaseInstanceType: pulumi.String("db-pgp-small"),
//				Engine:               pulumi.String("postgres"),
//				EngineVersion:        pulumi.String("15.13"),
//				AllocatedStorage:     pulumi.Int(100),
//				VolumeTypeClass:      pulumi.String("block"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create PostgreSQL roles with Thalassa default values
//			exampleDbaasPgRoles, err := thalassa.NewDbaasPgRoles(ctx, "example", &thalassa.DbaasPgRolesArgs{
//				DbClusterId: exampleDbaasDbCluster.ID(),
//				Name:        pulumi.String("example_role"),
//				Password:    pulumi.String("secure_password_123"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("pgRolesId", exampleDbaasPgRoles.ID())
//			ctx.Export("pgRolesName", exampleDbaasPgRoles.Name)
//			return nil
//		})
//	}
//
// ```
type DbaasPgRoles struct {
	pulumi.CustomResourceState

	// The connection limit of the role
	ConnectionLimit pulumi.IntPtrOutput `pulumi:"connectionLimit"`
	// Whether the role can create databases
	CreateDb pulumi.BoolPtrOutput `pulumi:"createDb"`
	// Whether the role can create roles
	CreateRole pulumi.BoolPtrOutput `pulumi:"createRole"`
	// The ID of the database
	DbClusterId pulumi.StringOutput `pulumi:"dbClusterId"`
	// Whether the role can login
	Login pulumi.BoolPtrOutput `pulumi:"login"`
	// The name of the role
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// The password of the role
	Password pulumi.StringOutput `pulumi:"password"`
}

// NewDbaasPgRoles registers a new resource with the given unique name, arguments, and options.
func NewDbaasPgRoles(ctx *pulumi.Context,
	name string, args *DbaasPgRolesArgs, opts ...pulumi.ResourceOption) (*DbaasPgRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbClusterId == nil {
		return nil, errors.New("invalid value for required argument 'DbClusterId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbaasPgRoles
	err := ctx.RegisterResource("thalassa:index/dbaasPgRoles:DbaasPgRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbaasPgRoles gets an existing DbaasPgRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbaasPgRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbaasPgRolesState, opts ...pulumi.ResourceOption) (*DbaasPgRoles, error) {
	var resource DbaasPgRoles
	err := ctx.ReadResource("thalassa:index/dbaasPgRoles:DbaasPgRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbaasPgRoles resources.
type dbaasPgRolesState struct {
	// The connection limit of the role
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// Whether the role can create databases
	CreateDb *bool `pulumi:"createDb"`
	// Whether the role can create roles
	CreateRole *bool `pulumi:"createRole"`
	// The ID of the database
	DbClusterId *string `pulumi:"dbClusterId"`
	// Whether the role can login
	Login *bool `pulumi:"login"`
	// The name of the role
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The password of the role
	Password *string `pulumi:"password"`
}

type DbaasPgRolesState struct {
	// The connection limit of the role
	ConnectionLimit pulumi.IntPtrInput
	// Whether the role can create databases
	CreateDb pulumi.BoolPtrInput
	// Whether the role can create roles
	CreateRole pulumi.BoolPtrInput
	// The ID of the database
	DbClusterId pulumi.StringPtrInput
	// Whether the role can login
	Login pulumi.BoolPtrInput
	// The name of the role
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The password of the role
	Password pulumi.StringPtrInput
}

func (DbaasPgRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasPgRolesState)(nil)).Elem()
}

type dbaasPgRolesArgs struct {
	// The connection limit of the role
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// Whether the role can create databases
	CreateDb *bool `pulumi:"createDb"`
	// Whether the role can create roles
	CreateRole *bool `pulumi:"createRole"`
	// The ID of the database
	DbClusterId string `pulumi:"dbClusterId"`
	// Whether the role can login
	Login *bool `pulumi:"login"`
	// The name of the role
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The password of the role
	Password string `pulumi:"password"`
}

// The set of arguments for constructing a DbaasPgRoles resource.
type DbaasPgRolesArgs struct {
	// The connection limit of the role
	ConnectionLimit pulumi.IntPtrInput
	// Whether the role can create databases
	CreateDb pulumi.BoolPtrInput
	// Whether the role can create roles
	CreateRole pulumi.BoolPtrInput
	// The ID of the database
	DbClusterId pulumi.StringInput
	// Whether the role can login
	Login pulumi.BoolPtrInput
	// The name of the role
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The password of the role
	Password pulumi.StringInput
}

func (DbaasPgRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbaasPgRolesArgs)(nil)).Elem()
}

type DbaasPgRolesInput interface {
	pulumi.Input

	ToDbaasPgRolesOutput() DbaasPgRolesOutput
	ToDbaasPgRolesOutputWithContext(ctx context.Context) DbaasPgRolesOutput
}

func (*DbaasPgRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasPgRoles)(nil)).Elem()
}

func (i *DbaasPgRoles) ToDbaasPgRolesOutput() DbaasPgRolesOutput {
	return i.ToDbaasPgRolesOutputWithContext(context.Background())
}

func (i *DbaasPgRoles) ToDbaasPgRolesOutputWithContext(ctx context.Context) DbaasPgRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgRolesOutput)
}

// DbaasPgRolesArrayInput is an input type that accepts DbaasPgRolesArray and DbaasPgRolesArrayOutput values.
// You can construct a concrete instance of `DbaasPgRolesArrayInput` via:
//
//	DbaasPgRolesArray{ DbaasPgRolesArgs{...} }
type DbaasPgRolesArrayInput interface {
	pulumi.Input

	ToDbaasPgRolesArrayOutput() DbaasPgRolesArrayOutput
	ToDbaasPgRolesArrayOutputWithContext(context.Context) DbaasPgRolesArrayOutput
}

type DbaasPgRolesArray []DbaasPgRolesInput

func (DbaasPgRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasPgRoles)(nil)).Elem()
}

func (i DbaasPgRolesArray) ToDbaasPgRolesArrayOutput() DbaasPgRolesArrayOutput {
	return i.ToDbaasPgRolesArrayOutputWithContext(context.Background())
}

func (i DbaasPgRolesArray) ToDbaasPgRolesArrayOutputWithContext(ctx context.Context) DbaasPgRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgRolesArrayOutput)
}

// DbaasPgRolesMapInput is an input type that accepts DbaasPgRolesMap and DbaasPgRolesMapOutput values.
// You can construct a concrete instance of `DbaasPgRolesMapInput` via:
//
//	DbaasPgRolesMap{ "key": DbaasPgRolesArgs{...} }
type DbaasPgRolesMapInput interface {
	pulumi.Input

	ToDbaasPgRolesMapOutput() DbaasPgRolesMapOutput
	ToDbaasPgRolesMapOutputWithContext(context.Context) DbaasPgRolesMapOutput
}

type DbaasPgRolesMap map[string]DbaasPgRolesInput

func (DbaasPgRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasPgRoles)(nil)).Elem()
}

func (i DbaasPgRolesMap) ToDbaasPgRolesMapOutput() DbaasPgRolesMapOutput {
	return i.ToDbaasPgRolesMapOutputWithContext(context.Background())
}

func (i DbaasPgRolesMap) ToDbaasPgRolesMapOutputWithContext(ctx context.Context) DbaasPgRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbaasPgRolesMapOutput)
}

type DbaasPgRolesOutput struct{ *pulumi.OutputState }

func (DbaasPgRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbaasPgRoles)(nil)).Elem()
}

func (o DbaasPgRolesOutput) ToDbaasPgRolesOutput() DbaasPgRolesOutput {
	return o
}

func (o DbaasPgRolesOutput) ToDbaasPgRolesOutputWithContext(ctx context.Context) DbaasPgRolesOutput {
	return o
}

// The connection limit of the role
func (o DbaasPgRolesOutput) ConnectionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbaasPgRoles) pulumi.IntPtrOutput { return v.ConnectionLimit }).(pulumi.IntPtrOutput)
}

// Whether the role can create databases
func (o DbaasPgRolesOutput) CreateDb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbaasPgRoles) pulumi.BoolPtrOutput { return v.CreateDb }).(pulumi.BoolPtrOutput)
}

// Whether the role can create roles
func (o DbaasPgRolesOutput) CreateRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbaasPgRoles) pulumi.BoolPtrOutput { return v.CreateRole }).(pulumi.BoolPtrOutput)
}

// The ID of the database
func (o DbaasPgRolesOutput) DbClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgRoles) pulumi.StringOutput { return v.DbClusterId }).(pulumi.StringOutput)
}

// Whether the role can login
func (o DbaasPgRolesOutput) Login() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbaasPgRoles) pulumi.BoolPtrOutput { return v.Login }).(pulumi.BoolPtrOutput)
}

// The name of the role
func (o DbaasPgRolesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgRoles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DbaasPgRolesOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbaasPgRoles) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// The password of the role
func (o DbaasPgRolesOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DbaasPgRoles) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

type DbaasPgRolesArrayOutput struct{ *pulumi.OutputState }

func (DbaasPgRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbaasPgRoles)(nil)).Elem()
}

func (o DbaasPgRolesArrayOutput) ToDbaasPgRolesArrayOutput() DbaasPgRolesArrayOutput {
	return o
}

func (o DbaasPgRolesArrayOutput) ToDbaasPgRolesArrayOutputWithContext(ctx context.Context) DbaasPgRolesArrayOutput {
	return o
}

func (o DbaasPgRolesArrayOutput) Index(i pulumi.IntInput) DbaasPgRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbaasPgRoles {
		return vs[0].([]*DbaasPgRoles)[vs[1].(int)]
	}).(DbaasPgRolesOutput)
}

type DbaasPgRolesMapOutput struct{ *pulumi.OutputState }

func (DbaasPgRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbaasPgRoles)(nil)).Elem()
}

func (o DbaasPgRolesMapOutput) ToDbaasPgRolesMapOutput() DbaasPgRolesMapOutput {
	return o
}

func (o DbaasPgRolesMapOutput) ToDbaasPgRolesMapOutputWithContext(ctx context.Context) DbaasPgRolesMapOutput {
	return o
}

func (o DbaasPgRolesMapOutput) MapIndex(k pulumi.StringInput) DbaasPgRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbaasPgRoles {
		return vs[0].(map[string]*DbaasPgRoles)[vs[1].(string)]
	}).(DbaasPgRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgRolesInput)(nil)).Elem(), &DbaasPgRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgRolesArrayInput)(nil)).Elem(), DbaasPgRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbaasPgRolesMapInput)(nil)).Elem(), DbaasPgRolesMap{})
	pulumi.RegisterOutputType(DbaasPgRolesOutput{})
	pulumi.RegisterOutputType(DbaasPgRolesArrayOutput{})
	pulumi.RegisterOutputType(DbaasPgRolesMapOutput{})
}
