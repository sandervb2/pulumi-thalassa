// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// Get a subnet by name
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetResult
	err := ctx.Invoke("thalassa:index/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	Name           string  `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	Slug           *string `pulumi:"slug"`
	VpcId          string  `pulumi:"vpcId"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	Cidr string `pulumi:"cidr"`
	// The ID of this resource.
	Id             string  `pulumi:"id"`
	Name           string  `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	Slug           string  `pulumi:"slug"`
	VpcId          string  `pulumi:"vpcId"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubnetResultOutput, error) {
			args := v.(LookupSubnetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("thalassa:index/getSubnet:getSubnet", args, LookupSubnetResultOutput{}, options).(LookupSubnetResultOutput), nil
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	Name           pulumi.StringInput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrInput `pulumi:"organisationId"`
	Slug           pulumi.StringPtrInput `pulumi:"slug"`
	VpcId          pulumi.StringInput    `pulumi:"vpcId"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Cidr }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubnetResult) *string { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

func (o LookupSubnetResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Slug }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
