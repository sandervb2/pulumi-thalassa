// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package thalassa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a cloud init template with Thalassa default values
//			example, err := thalassa.NewCloudInitTemplate(ctx, "example", &thalassa.CloudInitTemplateArgs{
//				Name: pulumi.String("example-cloud-init-template"),
//				Content: pulumi.String(`#cloud-config
//
// package_update: true
// package_upgrade: true
// packages:
//   - nginx
//   - curl`),
//     })
//     if err != nil {
//     return err
//     }
//     ctx.Export("cloudInitTemplateId", example.ID())
//     ctx.Export("cloudInitTemplateName", example.Name)
//     return nil
//     })
//     }
//
// ```
type CloudInitTemplate struct {
	pulumi.CustomResourceState

	// Annotations to add to the cloud init template
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The content of the cloud init template
	Content pulumi.StringOutput `pulumi:"content"`
	// Labels to add to the cloud init template
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the cloud init template
	Name           pulumi.StringOutput    `pulumi:"name"`
	OrganisationId pulumi.StringPtrOutput `pulumi:"organisationId"`
	// The slug of the cloud init template
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewCloudInitTemplate registers a new resource with the given unique name, arguments, and options.
func NewCloudInitTemplate(ctx *pulumi.Context,
	name string, args *CloudInitTemplateArgs, opts ...pulumi.ResourceOption) (*CloudInitTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudInitTemplate
	err := ctx.RegisterResource("thalassa:index/cloudInitTemplate:CloudInitTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudInitTemplate gets an existing CloudInitTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudInitTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudInitTemplateState, opts ...pulumi.ResourceOption) (*CloudInitTemplate, error) {
	var resource CloudInitTemplate
	err := ctx.ReadResource("thalassa:index/cloudInitTemplate:CloudInitTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudInitTemplate resources.
type cloudInitTemplateState struct {
	// Annotations to add to the cloud init template
	Annotations map[string]string `pulumi:"annotations"`
	// The content of the cloud init template
	Content *string `pulumi:"content"`
	// Labels to add to the cloud init template
	Labels map[string]string `pulumi:"labels"`
	// The name of the cloud init template
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
	// The slug of the cloud init template
	Slug *string `pulumi:"slug"`
}

type CloudInitTemplateState struct {
	// Annotations to add to the cloud init template
	Annotations pulumi.StringMapInput
	// The content of the cloud init template
	Content pulumi.StringPtrInput
	// Labels to add to the cloud init template
	Labels pulumi.StringMapInput
	// The name of the cloud init template
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
	// The slug of the cloud init template
	Slug pulumi.StringPtrInput
}

func (CloudInitTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudInitTemplateState)(nil)).Elem()
}

type cloudInitTemplateArgs struct {
	// Annotations to add to the cloud init template
	Annotations map[string]string `pulumi:"annotations"`
	// The content of the cloud init template
	Content string `pulumi:"content"`
	// Labels to add to the cloud init template
	Labels map[string]string `pulumi:"labels"`
	// The name of the cloud init template
	Name           *string `pulumi:"name"`
	OrganisationId *string `pulumi:"organisationId"`
}

// The set of arguments for constructing a CloudInitTemplate resource.
type CloudInitTemplateArgs struct {
	// Annotations to add to the cloud init template
	Annotations pulumi.StringMapInput
	// The content of the cloud init template
	Content pulumi.StringInput
	// Labels to add to the cloud init template
	Labels pulumi.StringMapInput
	// The name of the cloud init template
	Name           pulumi.StringPtrInput
	OrganisationId pulumi.StringPtrInput
}

func (CloudInitTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudInitTemplateArgs)(nil)).Elem()
}

type CloudInitTemplateInput interface {
	pulumi.Input

	ToCloudInitTemplateOutput() CloudInitTemplateOutput
	ToCloudInitTemplateOutputWithContext(ctx context.Context) CloudInitTemplateOutput
}

func (*CloudInitTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudInitTemplate)(nil)).Elem()
}

func (i *CloudInitTemplate) ToCloudInitTemplateOutput() CloudInitTemplateOutput {
	return i.ToCloudInitTemplateOutputWithContext(context.Background())
}

func (i *CloudInitTemplate) ToCloudInitTemplateOutputWithContext(ctx context.Context) CloudInitTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudInitTemplateOutput)
}

// CloudInitTemplateArrayInput is an input type that accepts CloudInitTemplateArray and CloudInitTemplateArrayOutput values.
// You can construct a concrete instance of `CloudInitTemplateArrayInput` via:
//
//	CloudInitTemplateArray{ CloudInitTemplateArgs{...} }
type CloudInitTemplateArrayInput interface {
	pulumi.Input

	ToCloudInitTemplateArrayOutput() CloudInitTemplateArrayOutput
	ToCloudInitTemplateArrayOutputWithContext(context.Context) CloudInitTemplateArrayOutput
}

type CloudInitTemplateArray []CloudInitTemplateInput

func (CloudInitTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudInitTemplate)(nil)).Elem()
}

func (i CloudInitTemplateArray) ToCloudInitTemplateArrayOutput() CloudInitTemplateArrayOutput {
	return i.ToCloudInitTemplateArrayOutputWithContext(context.Background())
}

func (i CloudInitTemplateArray) ToCloudInitTemplateArrayOutputWithContext(ctx context.Context) CloudInitTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudInitTemplateArrayOutput)
}

// CloudInitTemplateMapInput is an input type that accepts CloudInitTemplateMap and CloudInitTemplateMapOutput values.
// You can construct a concrete instance of `CloudInitTemplateMapInput` via:
//
//	CloudInitTemplateMap{ "key": CloudInitTemplateArgs{...} }
type CloudInitTemplateMapInput interface {
	pulumi.Input

	ToCloudInitTemplateMapOutput() CloudInitTemplateMapOutput
	ToCloudInitTemplateMapOutputWithContext(context.Context) CloudInitTemplateMapOutput
}

type CloudInitTemplateMap map[string]CloudInitTemplateInput

func (CloudInitTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudInitTemplate)(nil)).Elem()
}

func (i CloudInitTemplateMap) ToCloudInitTemplateMapOutput() CloudInitTemplateMapOutput {
	return i.ToCloudInitTemplateMapOutputWithContext(context.Background())
}

func (i CloudInitTemplateMap) ToCloudInitTemplateMapOutputWithContext(ctx context.Context) CloudInitTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudInitTemplateMapOutput)
}

type CloudInitTemplateOutput struct{ *pulumi.OutputState }

func (CloudInitTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudInitTemplate)(nil)).Elem()
}

func (o CloudInitTemplateOutput) ToCloudInitTemplateOutput() CloudInitTemplateOutput {
	return o
}

func (o CloudInitTemplateOutput) ToCloudInitTemplateOutputWithContext(ctx context.Context) CloudInitTemplateOutput {
	return o
}

// Annotations to add to the cloud init template
func (o CloudInitTemplateOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudInitTemplate) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The content of the cloud init template
func (o CloudInitTemplateOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudInitTemplate) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Labels to add to the cloud init template
func (o CloudInitTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudInitTemplate) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the cloud init template
func (o CloudInitTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudInitTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CloudInitTemplateOutput) OrganisationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudInitTemplate) pulumi.StringPtrOutput { return v.OrganisationId }).(pulumi.StringPtrOutput)
}

// The slug of the cloud init template
func (o CloudInitTemplateOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudInitTemplate) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type CloudInitTemplateArrayOutput struct{ *pulumi.OutputState }

func (CloudInitTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudInitTemplate)(nil)).Elem()
}

func (o CloudInitTemplateArrayOutput) ToCloudInitTemplateArrayOutput() CloudInitTemplateArrayOutput {
	return o
}

func (o CloudInitTemplateArrayOutput) ToCloudInitTemplateArrayOutputWithContext(ctx context.Context) CloudInitTemplateArrayOutput {
	return o
}

func (o CloudInitTemplateArrayOutput) Index(i pulumi.IntInput) CloudInitTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudInitTemplate {
		return vs[0].([]*CloudInitTemplate)[vs[1].(int)]
	}).(CloudInitTemplateOutput)
}

type CloudInitTemplateMapOutput struct{ *pulumi.OutputState }

func (CloudInitTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudInitTemplate)(nil)).Elem()
}

func (o CloudInitTemplateMapOutput) ToCloudInitTemplateMapOutput() CloudInitTemplateMapOutput {
	return o
}

func (o CloudInitTemplateMapOutput) ToCloudInitTemplateMapOutputWithContext(ctx context.Context) CloudInitTemplateMapOutput {
	return o
}

func (o CloudInitTemplateMapOutput) MapIndex(k pulumi.StringInput) CloudInitTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudInitTemplate {
		return vs[0].(map[string]*CloudInitTemplate)[vs[1].(string)]
	}).(CloudInitTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudInitTemplateInput)(nil)).Elem(), &CloudInitTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudInitTemplateArrayInput)(nil)).Elem(), CloudInitTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudInitTemplateMapInput)(nil)).Elem(), CloudInitTemplateMap{})
	pulumi.RegisterOutputType(CloudInitTemplateOutput{})
	pulumi.RegisterOutputType(CloudInitTemplateArrayOutput{})
	pulumi.RegisterOutputType(CloudInitTemplateMapOutput{})
}
