# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDbaasDbClusterResult',
    'AwaitableGetDbaasDbClusterResult',
    'get_dbaas_db_cluster',
    'get_dbaas_db_cluster_output',
]

@pulumi.output_type
class GetDbaasDbClusterResult:
    """
    A collection of values returned by getDbaasDbCluster.
    """
    def __init__(__self__, allocated_storage=None, annotations=None, auto_minor_version_upgrade=None, database_instance_type=None, database_name=None, delete_protection=None, description=None, endpoint_ipv4=None, endpoint_ipv6=None, engine=None, engine_version=None, id=None, labels=None, name=None, organisation_id=None, parameters=None, port=None, replicas=None, security_groups=None, slug=None, status=None, subnet_id=None, volume_type_class=None):
        if allocated_storage and not isinstance(allocated_storage, int):
            raise TypeError("Expected argument 'allocated_storage' to be a int")
        pulumi.set(__self__, "allocated_storage", allocated_storage)
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if auto_minor_version_upgrade and not isinstance(auto_minor_version_upgrade, bool):
            raise TypeError("Expected argument 'auto_minor_version_upgrade' to be a bool")
        pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if database_instance_type and not isinstance(database_instance_type, str):
            raise TypeError("Expected argument 'database_instance_type' to be a str")
        pulumi.set(__self__, "database_instance_type", database_instance_type)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if delete_protection and not isinstance(delete_protection, bool):
            raise TypeError("Expected argument 'delete_protection' to be a bool")
        pulumi.set(__self__, "delete_protection", delete_protection)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if endpoint_ipv4 and not isinstance(endpoint_ipv4, str):
            raise TypeError("Expected argument 'endpoint_ipv4' to be a str")
        pulumi.set(__self__, "endpoint_ipv4", endpoint_ipv4)
        if endpoint_ipv6 and not isinstance(endpoint_ipv6, str):
            raise TypeError("Expected argument 'endpoint_ipv6' to be a str")
        pulumi.set(__self__, "endpoint_ipv6", endpoint_ipv6)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if replicas and not isinstance(replicas, int):
            raise TypeError("Expected argument 'replicas' to be a int")
        pulumi.set(__self__, "replicas", replicas)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if volume_type_class and not isinstance(volume_type_class, str):
            raise TypeError("Expected argument 'volume_type_class' to be a str")
        pulumi.set(__self__, "volume_type_class", volume_type_class)

    @_builtins.property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> _builtins.int:
        """
        Amount of storage allocated to the cluster in GB
        """
        return pulumi.get(self, "allocated_storage")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        Annotations of the DB Cluster
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> _builtins.bool:
        """
        Flag indicating if the cluster should automatically upgrade to the latest minor version
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @_builtins.property
    @pulumi.getter(name="databaseInstanceType")
    def database_instance_type(self) -> _builtins.str:
        """
        Database instance type of the DB Cluster
        """
        return pulumi.get(self, "database_instance_type")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        """
        Name of the database on the cluster
        """
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> _builtins.bool:
        """
        Flag indicating if the cluster should be protected from deletion
        """
        return pulumi.get(self, "delete_protection")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the DB Cluster
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointIpv4")
    def endpoint_ipv4(self) -> _builtins.str:
        """
        IPv4 address of the cluster endpoint
        """
        return pulumi.get(self, "endpoint_ipv4")

    @_builtins.property
    @pulumi.getter(name="endpointIpv6")
    def endpoint_ipv6(self) -> _builtins.str:
        """
        IPv6 address of the cluster endpoint
        """
        return pulumi.get(self, "endpoint_ipv6")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        """
        Database engine of the cluster
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Version of the database engine
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Identity of the DB Cluster
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        """
        Labels of the DB Cluster
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the DB Cluster
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Mapping[str, _builtins.str]:
        """
        Map of parameter name to database engine specific parameter value
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Port of the cluster endpoint
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> _builtins.int:
        """
        Number of instances in the cluster
        """
        return pulumi.get(self, "replicas")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        """
        List of security groups associated with the cluster
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        """
        Slug of the DB Cluster
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of the cluster
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Subnet of the DB Cluster
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="volumeTypeClass")
    def volume_type_class(self) -> _builtins.str:
        """
        Storage type used to determine the size of the cluster storage
        """
        return pulumi.get(self, "volume_type_class")


class AwaitableGetDbaasDbClusterResult(GetDbaasDbClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbaasDbClusterResult(
            allocated_storage=self.allocated_storage,
            annotations=self.annotations,
            auto_minor_version_upgrade=self.auto_minor_version_upgrade,
            database_instance_type=self.database_instance_type,
            database_name=self.database_name,
            delete_protection=self.delete_protection,
            description=self.description,
            endpoint_ipv4=self.endpoint_ipv4,
            endpoint_ipv6=self.endpoint_ipv6,
            engine=self.engine,
            engine_version=self.engine_version,
            id=self.id,
            labels=self.labels,
            name=self.name,
            organisation_id=self.organisation_id,
            parameters=self.parameters,
            port=self.port,
            replicas=self.replicas,
            security_groups=self.security_groups,
            slug=self.slug,
            status=self.status,
            subnet_id=self.subnet_id,
            volume_type_class=self.volume_type_class)


def get_dbaas_db_cluster(name: Optional[_builtins.str] = None,
                         organisation_id: Optional[_builtins.str] = None,
                         slug: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbaasDbClusterResult:
    """
    Get an DB Cluster


    :param _builtins.str name: Name of the DB Cluster
    :param _builtins.str slug: Slug of the DB Cluster
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getDbaasDbCluster:getDbaasDbCluster', __args__, opts=opts, typ=GetDbaasDbClusterResult).value

    return AwaitableGetDbaasDbClusterResult(
        allocated_storage=pulumi.get(__ret__, 'allocated_storage'),
        annotations=pulumi.get(__ret__, 'annotations'),
        auto_minor_version_upgrade=pulumi.get(__ret__, 'auto_minor_version_upgrade'),
        database_instance_type=pulumi.get(__ret__, 'database_instance_type'),
        database_name=pulumi.get(__ret__, 'database_name'),
        delete_protection=pulumi.get(__ret__, 'delete_protection'),
        description=pulumi.get(__ret__, 'description'),
        endpoint_ipv4=pulumi.get(__ret__, 'endpoint_ipv4'),
        endpoint_ipv6=pulumi.get(__ret__, 'endpoint_ipv6'),
        engine=pulumi.get(__ret__, 'engine'),
        engine_version=pulumi.get(__ret__, 'engine_version'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        parameters=pulumi.get(__ret__, 'parameters'),
        port=pulumi.get(__ret__, 'port'),
        replicas=pulumi.get(__ret__, 'replicas'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        slug=pulumi.get(__ret__, 'slug'),
        status=pulumi.get(__ret__, 'status'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        volume_type_class=pulumi.get(__ret__, 'volume_type_class'))
def get_dbaas_db_cluster_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                                organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                slug: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDbaasDbClusterResult]:
    """
    Get an DB Cluster


    :param _builtins.str name: Name of the DB Cluster
    :param _builtins.str slug: Slug of the DB Cluster
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    __args__['slug'] = slug
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getDbaasDbCluster:getDbaasDbCluster', __args__, opts=opts, typ=GetDbaasDbClusterResult)
    return __ret__.apply(lambda __response__: GetDbaasDbClusterResult(
        allocated_storage=pulumi.get(__response__, 'allocated_storage'),
        annotations=pulumi.get(__response__, 'annotations'),
        auto_minor_version_upgrade=pulumi.get(__response__, 'auto_minor_version_upgrade'),
        database_instance_type=pulumi.get(__response__, 'database_instance_type'),
        database_name=pulumi.get(__response__, 'database_name'),
        delete_protection=pulumi.get(__response__, 'delete_protection'),
        description=pulumi.get(__response__, 'description'),
        endpoint_ipv4=pulumi.get(__response__, 'endpoint_ipv4'),
        endpoint_ipv6=pulumi.get(__response__, 'endpoint_ipv6'),
        engine=pulumi.get(__response__, 'engine'),
        engine_version=pulumi.get(__response__, 'engine_version'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        name=pulumi.get(__response__, 'name'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        parameters=pulumi.get(__response__, 'parameters'),
        port=pulumi.get(__response__, 'port'),
        replicas=pulumi.get(__response__, 'replicas'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        slug=pulumi.get(__response__, 'slug'),
        status=pulumi.get(__response__, 'status'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        volume_type_class=pulumi.get(__response__, 'volume_type_class')))
