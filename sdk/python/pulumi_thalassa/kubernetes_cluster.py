# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KubernetesClusterArgs', 'KubernetesCluster']

@pulumi.input_type
class KubernetesClusterArgs:
    def __init__(__self__, *,
                 cluster_version: pulumi.Input[_builtins.str],
                 networking_cni: pulumi.Input[_builtins.str],
                 organisation_id: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_server_acls: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterApiServerAclArgs']]]] = None,
                 audit_log_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_upgrade_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 default_network_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 maintenance_day: Optional[pulumi.Input[_builtins.int]] = None,
                 maintenance_start_at: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_pod_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_service_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_security_standards_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KubernetesCluster resource.
        :param pulumi.Input[_builtins.str] cluster_version: Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        :param pulumi.Input[_builtins.str] networking_cni: CNI of the Kubernetes Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Kubernetes Cluster
        :param pulumi.Input[Sequence[pulumi.Input['KubernetesClusterApiServerAclArgs']]] api_server_acls: API server ACLs for the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] audit_log_profile: Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        :param pulumi.Input[_builtins.str] auto_upgrade_policy: Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        :param pulumi.Input[_builtins.str] cluster_type: Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        :param pulumi.Input[_builtins.str] default_network_policy: Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] description: A human readable description about the Kubernetes Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Kubernetes Cluster
        :param pulumi.Input[_builtins.int] maintenance_day: Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        :param pulumi.Input[_builtins.int] maintenance_start_at: Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        :param pulumi.Input[_builtins.str] name: Name of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] networking_pod_cidr: Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        :param pulumi.Input[_builtins.str] networking_service_cidr: Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        :param pulumi.Input[_builtins.str] pod_security_standards_profile: Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        :param pulumi.Input[_builtins.str] region: Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Kubernetes Cluster. Required for managed clusters.
        """
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "networking_cni", networking_cni)
        pulumi.set(__self__, "organisation_id", organisation_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if api_server_acls is not None:
            pulumi.set(__self__, "api_server_acls", api_server_acls)
        if audit_log_profile is not None:
            pulumi.set(__self__, "audit_log_profile", audit_log_profile)
        if auto_upgrade_policy is not None:
            pulumi.set(__self__, "auto_upgrade_policy", auto_upgrade_policy)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if default_network_policy is not None:
            pulumi.set(__self__, "default_network_policy", default_network_policy)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if maintenance_day is not None:
            pulumi.set(__self__, "maintenance_day", maintenance_day)
        if maintenance_start_at is not None:
            pulumi.set(__self__, "maintenance_start_at", maintenance_start_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networking_pod_cidr is not None:
            pulumi.set(__self__, "networking_pod_cidr", networking_pod_cidr)
        if networking_service_cidr is not None:
            pulumi.set(__self__, "networking_service_cidr", networking_service_cidr)
        if pod_security_standards_profile is not None:
            pulumi.set(__self__, "pod_security_standards_profile", pod_security_standards_profile)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_version", value)

    @_builtins.property
    @pulumi.getter(name="networkingCni")
    def networking_cni(self) -> pulumi.Input[_builtins.str]:
        """
        CNI of the Kubernetes Cluster
        """
        return pulumi.get(self, "networking_cni")

    @networking_cni.setter
    def networking_cni(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "networking_cni", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Kubernetes Cluster
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="apiServerAcls")
    def api_server_acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterApiServerAclArgs']]]]:
        """
        API server ACLs for the Kubernetes Cluster
        """
        return pulumi.get(self, "api_server_acls")

    @api_server_acls.setter
    def api_server_acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterApiServerAclArgs']]]]):
        pulumi.set(self, "api_server_acls", value)

    @_builtins.property
    @pulumi.getter(name="auditLogProfile")
    def audit_log_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        """
        return pulumi.get(self, "audit_log_profile")

    @audit_log_profile.setter
    def audit_log_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "audit_log_profile", value)

    @_builtins.property
    @pulumi.getter(name="autoUpgradePolicy")
    def auto_upgrade_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        """
        return pulumi.get(self, "auto_upgrade_policy")

    @auto_upgrade_policy.setter
    def auto_upgrade_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_upgrade_policy", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="defaultNetworkPolicy")
    def default_network_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        """
        return pulumi.get(self, "default_network_policy")

    @default_network_policy.setter
    def default_network_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_network_policy", value)

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Delete protection of the Kubernetes Cluster
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the Kubernetes Cluster
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Kubernetes Cluster
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="maintenanceDay")
    def maintenance_day(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        """
        return pulumi.get(self, "maintenance_day")

    @maintenance_day.setter
    def maintenance_day(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maintenance_day", value)

    @_builtins.property
    @pulumi.getter(name="maintenanceStartAt")
    def maintenance_start_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        """
        return pulumi.get(self, "maintenance_start_at")

    @maintenance_start_at.setter
    def maintenance_start_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maintenance_start_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Kubernetes Cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkingPodCidr")
    def networking_pod_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        """
        return pulumi.get(self, "networking_pod_cidr")

    @networking_pod_cidr.setter
    def networking_pod_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "networking_pod_cidr", value)

    @_builtins.property
    @pulumi.getter(name="networkingServiceCidr")
    def networking_service_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        """
        return pulumi.get(self, "networking_service_cidr")

    @networking_service_cidr.setter
    def networking_service_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "networking_service_cidr", value)

    @_builtins.property
    @pulumi.getter(name="podSecurityStandardsProfile")
    def pod_security_standards_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        """
        return pulumi.get(self, "pod_security_standards_profile")

    @pod_security_standards_profile.setter
    def pod_security_standards_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_security_standards_profile", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the Kubernetes Cluster
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet of the Kubernetes Cluster. Required for managed clusters.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class _KubernetesClusterState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_server_acls: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterApiServerAclArgs']]]] = None,
                 audit_log_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_upgrade_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
                 default_network_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kubernetes_api_server_ca_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 kubernetes_api_server_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 maintenance_day: Optional[pulumi.Input[_builtins.int]] = None,
                 maintenance_start_at: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_cni: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_pod_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_service_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_security_standards_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KubernetesCluster resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Kubernetes Cluster
        :param pulumi.Input[Sequence[pulumi.Input['KubernetesClusterApiServerAclArgs']]] api_server_acls: API server ACLs for the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] audit_log_profile: Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        :param pulumi.Input[_builtins.str] auto_upgrade_policy: Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        :param pulumi.Input[_builtins.str] cluster_type: Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        :param pulumi.Input[_builtins.str] cluster_version: Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        :param pulumi.Input[_builtins.str] default_network_policy: Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] description: A human readable description about the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] kubernetes_api_server_ca_certificate: Kubernetes API server CA certificate of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] kubernetes_api_server_endpoint: Kubernetes API server endpoint of the Kubernetes Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Kubernetes Cluster
        :param pulumi.Input[_builtins.int] maintenance_day: Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        :param pulumi.Input[_builtins.int] maintenance_start_at: Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        :param pulumi.Input[_builtins.str] name: Name of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] networking_cni: CNI of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] networking_pod_cidr: Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        :param pulumi.Input[_builtins.str] networking_service_cidr: Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        :param pulumi.Input[_builtins.str] pod_security_standards_profile: Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        :param pulumi.Input[_builtins.str] region: Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] status: Status of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Kubernetes Cluster. Required for managed clusters.
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if api_server_acls is not None:
            pulumi.set(__self__, "api_server_acls", api_server_acls)
        if audit_log_profile is not None:
            pulumi.set(__self__, "audit_log_profile", audit_log_profile)
        if auto_upgrade_policy is not None:
            pulumi.set(__self__, "auto_upgrade_policy", auto_upgrade_policy)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if default_network_policy is not None:
            pulumi.set(__self__, "default_network_policy", default_network_policy)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kubernetes_api_server_ca_certificate is not None:
            pulumi.set(__self__, "kubernetes_api_server_ca_certificate", kubernetes_api_server_ca_certificate)
        if kubernetes_api_server_endpoint is not None:
            pulumi.set(__self__, "kubernetes_api_server_endpoint", kubernetes_api_server_endpoint)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if maintenance_day is not None:
            pulumi.set(__self__, "maintenance_day", maintenance_day)
        if maintenance_start_at is not None:
            pulumi.set(__self__, "maintenance_start_at", maintenance_start_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networking_cni is not None:
            pulumi.set(__self__, "networking_cni", networking_cni)
        if networking_pod_cidr is not None:
            pulumi.set(__self__, "networking_pod_cidr", networking_pod_cidr)
        if networking_service_cidr is not None:
            pulumi.set(__self__, "networking_service_cidr", networking_service_cidr)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if pod_security_standards_profile is not None:
            pulumi.set(__self__, "pod_security_standards_profile", pod_security_standards_profile)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Kubernetes Cluster
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="apiServerAcls")
    def api_server_acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterApiServerAclArgs']]]]:
        """
        API server ACLs for the Kubernetes Cluster
        """
        return pulumi.get(self, "api_server_acls")

    @api_server_acls.setter
    def api_server_acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesClusterApiServerAclArgs']]]]):
        pulumi.set(self, "api_server_acls", value)

    @_builtins.property
    @pulumi.getter(name="auditLogProfile")
    def audit_log_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        """
        return pulumi.get(self, "audit_log_profile")

    @audit_log_profile.setter
    def audit_log_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "audit_log_profile", value)

    @_builtins.property
    @pulumi.getter(name="autoUpgradePolicy")
    def auto_upgrade_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        """
        return pulumi.get(self, "auto_upgrade_policy")

    @auto_upgrade_policy.setter
    def auto_upgrade_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_upgrade_policy", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_version", value)

    @_builtins.property
    @pulumi.getter(name="defaultNetworkPolicy")
    def default_network_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        """
        return pulumi.get(self, "default_network_policy")

    @default_network_policy.setter
    def default_network_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_network_policy", value)

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Delete protection of the Kubernetes Cluster
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the Kubernetes Cluster
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="kubernetesApiServerCaCertificate")
    def kubernetes_api_server_ca_certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes API server CA certificate of the Kubernetes Cluster
        """
        return pulumi.get(self, "kubernetes_api_server_ca_certificate")

    @kubernetes_api_server_ca_certificate.setter
    def kubernetes_api_server_ca_certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kubernetes_api_server_ca_certificate", value)

    @_builtins.property
    @pulumi.getter(name="kubernetesApiServerEndpoint")
    def kubernetes_api_server_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes API server endpoint of the Kubernetes Cluster
        """
        return pulumi.get(self, "kubernetes_api_server_endpoint")

    @kubernetes_api_server_endpoint.setter
    def kubernetes_api_server_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kubernetes_api_server_endpoint", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Kubernetes Cluster
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="maintenanceDay")
    def maintenance_day(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        """
        return pulumi.get(self, "maintenance_day")

    @maintenance_day.setter
    def maintenance_day(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maintenance_day", value)

    @_builtins.property
    @pulumi.getter(name="maintenanceStartAt")
    def maintenance_start_at(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        """
        return pulumi.get(self, "maintenance_start_at")

    @maintenance_start_at.setter
    def maintenance_start_at(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maintenance_start_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Kubernetes Cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkingCni")
    def networking_cni(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CNI of the Kubernetes Cluster
        """
        return pulumi.get(self, "networking_cni")

    @networking_cni.setter
    def networking_cni(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "networking_cni", value)

    @_builtins.property
    @pulumi.getter(name="networkingPodCidr")
    def networking_pod_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        """
        return pulumi.get(self, "networking_pod_cidr")

    @networking_pod_cidr.setter
    def networking_pod_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "networking_pod_cidr", value)

    @_builtins.property
    @pulumi.getter(name="networkingServiceCidr")
    def networking_service_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        """
        return pulumi.get(self, "networking_service_cidr")

    @networking_service_cidr.setter
    def networking_service_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "networking_service_cidr", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="podSecurityStandardsProfile")
    def pod_security_standards_profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        """
        return pulumi.get(self, "pod_security_standards_profile")

    @pod_security_standards_profile.setter
    def pod_security_standards_profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_security_standards_profile", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the Kubernetes Cluster
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the Kubernetes Cluster
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet of the Kubernetes Cluster. Required for managed clusters.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("thalassa:index/kubernetesCluster:KubernetesCluster")
class KubernetesCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_server_acls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KubernetesClusterApiServerAclArgs', 'KubernetesClusterApiServerAclArgsDict']]]]] = None,
                 audit_log_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_upgrade_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
                 default_network_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 maintenance_day: Optional[pulumi.Input[_builtins.int]] = None,
                 maintenance_start_at: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_cni: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_pod_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_service_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_security_standards_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a Kubernetes cluster in the Thalassa cloud platform. This resource supports both managed clusters and hosted control plane clusters, allowing you to deploy production-ready Kubernetes environments with configurable networking, security policies, and auto-upgrade capabilities. The cluster can be customized with specific CNI plugins (Cilium or custom), network CIDRs, pod security standards, audit logging, and API server access controls.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Kubernetes Cluster
        :param pulumi.Input[Sequence[pulumi.Input[Union['KubernetesClusterApiServerAclArgs', 'KubernetesClusterApiServerAclArgsDict']]]] api_server_acls: API server ACLs for the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] audit_log_profile: Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        :param pulumi.Input[_builtins.str] auto_upgrade_policy: Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        :param pulumi.Input[_builtins.str] cluster_type: Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        :param pulumi.Input[_builtins.str] cluster_version: Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        :param pulumi.Input[_builtins.str] default_network_policy: Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] description: A human readable description about the Kubernetes Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Kubernetes Cluster
        :param pulumi.Input[_builtins.int] maintenance_day: Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        :param pulumi.Input[_builtins.int] maintenance_start_at: Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        :param pulumi.Input[_builtins.str] name: Name of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] networking_cni: CNI of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] networking_pod_cidr: Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        :param pulumi.Input[_builtins.str] networking_service_cidr: Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        :param pulumi.Input[_builtins.str] pod_security_standards_profile: Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        :param pulumi.Input[_builtins.str] region: Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Kubernetes Cluster. Required for managed clusters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KubernetesClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Kubernetes cluster in the Thalassa cloud platform. This resource supports both managed clusters and hosted control plane clusters, allowing you to deploy production-ready Kubernetes environments with configurable networking, security policies, and auto-upgrade capabilities. The cluster can be customized with specific CNI plugins (Cilium or custom), network CIDRs, pod security standards, audit logging, and API server access controls.

        :param str resource_name: The name of the resource.
        :param KubernetesClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubernetesClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 api_server_acls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KubernetesClusterApiServerAclArgs', 'KubernetesClusterApiServerAclArgsDict']]]]] = None,
                 audit_log_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_upgrade_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
                 default_network_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 maintenance_day: Optional[pulumi.Input[_builtins.int]] = None,
                 maintenance_start_at: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_cni: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_pod_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 networking_service_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_security_standards_profile: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubernetesClusterArgs.__new__(KubernetesClusterArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["api_server_acls"] = api_server_acls
            __props__.__dict__["audit_log_profile"] = audit_log_profile
            __props__.__dict__["auto_upgrade_policy"] = auto_upgrade_policy
            __props__.__dict__["cluster_type"] = cluster_type
            if cluster_version is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_version'")
            __props__.__dict__["cluster_version"] = cluster_version
            __props__.__dict__["default_network_policy"] = default_network_policy
            __props__.__dict__["delete_protection"] = delete_protection
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            __props__.__dict__["maintenance_day"] = maintenance_day
            __props__.__dict__["maintenance_start_at"] = maintenance_start_at
            __props__.__dict__["name"] = name
            if networking_cni is None and not opts.urn:
                raise TypeError("Missing required property 'networking_cni'")
            __props__.__dict__["networking_cni"] = networking_cni
            __props__.__dict__["networking_pod_cidr"] = networking_pod_cidr
            __props__.__dict__["networking_service_cidr"] = networking_service_cidr
            if organisation_id is None and not opts.urn:
                raise TypeError("Missing required property 'organisation_id'")
            __props__.__dict__["organisation_id"] = organisation_id
            __props__.__dict__["pod_security_standards_profile"] = pod_security_standards_profile
            __props__.__dict__["region"] = region
            __props__.__dict__["security_group_attachments"] = security_group_attachments
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["kubernetes_api_server_ca_certificate"] = None
            __props__.__dict__["kubernetes_api_server_endpoint"] = None
            __props__.__dict__["slug"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vpc_id"] = None
        super(KubernetesCluster, __self__).__init__(
            'thalassa:index/kubernetesCluster:KubernetesCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            api_server_acls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KubernetesClusterApiServerAclArgs', 'KubernetesClusterApiServerAclArgsDict']]]]] = None,
            audit_log_profile: Optional[pulumi.Input[_builtins.str]] = None,
            auto_upgrade_policy: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
            default_network_policy: Optional[pulumi.Input[_builtins.str]] = None,
            delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            kubernetes_api_server_ca_certificate: Optional[pulumi.Input[_builtins.str]] = None,
            kubernetes_api_server_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            maintenance_day: Optional[pulumi.Input[_builtins.int]] = None,
            maintenance_start_at: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            networking_cni: Optional[pulumi.Input[_builtins.str]] = None,
            networking_pod_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            networking_service_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            pod_security_standards_profile: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'KubernetesCluster':
        """
        Get an existing KubernetesCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Kubernetes Cluster
        :param pulumi.Input[Sequence[pulumi.Input[Union['KubernetesClusterApiServerAclArgs', 'KubernetesClusterApiServerAclArgsDict']]]] api_server_acls: API server ACLs for the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] audit_log_profile: Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        :param pulumi.Input[_builtins.str] auto_upgrade_policy: Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        :param pulumi.Input[_builtins.str] cluster_type: Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        :param pulumi.Input[_builtins.str] cluster_version: Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        :param pulumi.Input[_builtins.str] default_network_policy: Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] description: A human readable description about the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] kubernetes_api_server_ca_certificate: Kubernetes API server CA certificate of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] kubernetes_api_server_endpoint: Kubernetes API server endpoint of the Kubernetes Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Kubernetes Cluster
        :param pulumi.Input[_builtins.int] maintenance_day: Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        :param pulumi.Input[_builtins.int] maintenance_start_at: Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        :param pulumi.Input[_builtins.str] name: Name of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] networking_cni: CNI of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] networking_pod_cidr: Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        :param pulumi.Input[_builtins.str] networking_service_cidr: Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        :param pulumi.Input[_builtins.str] pod_security_standards_profile: Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        :param pulumi.Input[_builtins.str] region: Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] status: Status of the Kubernetes Cluster
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Kubernetes Cluster. Required for managed clusters.
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KubernetesClusterState.__new__(_KubernetesClusterState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["api_server_acls"] = api_server_acls
        __props__.__dict__["audit_log_profile"] = audit_log_profile
        __props__.__dict__["auto_upgrade_policy"] = auto_upgrade_policy
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["cluster_version"] = cluster_version
        __props__.__dict__["default_network_policy"] = default_network_policy
        __props__.__dict__["delete_protection"] = delete_protection
        __props__.__dict__["description"] = description
        __props__.__dict__["kubernetes_api_server_ca_certificate"] = kubernetes_api_server_ca_certificate
        __props__.__dict__["kubernetes_api_server_endpoint"] = kubernetes_api_server_endpoint
        __props__.__dict__["labels"] = labels
        __props__.__dict__["maintenance_day"] = maintenance_day
        __props__.__dict__["maintenance_start_at"] = maintenance_start_at
        __props__.__dict__["name"] = name
        __props__.__dict__["networking_cni"] = networking_cni
        __props__.__dict__["networking_pod_cidr"] = networking_pod_cidr
        __props__.__dict__["networking_service_cidr"] = networking_service_cidr
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["pod_security_standards_profile"] = pod_security_standards_profile
        __props__.__dict__["region"] = region
        __props__.__dict__["security_group_attachments"] = security_group_attachments
        __props__.__dict__["slug"] = slug
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vpc_id"] = vpc_id
        return KubernetesCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the Kubernetes Cluster
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiServerAcls")
    def api_server_acls(self) -> pulumi.Output[Optional[Sequence['outputs.KubernetesClusterApiServerAcl']]]:
        """
        API server ACLs for the Kubernetes Cluster
        """
        return pulumi.get(self, "api_server_acls")

    @_builtins.property
    @pulumi.getter(name="auditLogProfile")
    def audit_log_profile(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
        """
        return pulumi.get(self, "audit_log_profile")

    @_builtins.property
    @pulumi.getter(name="autoUpgradePolicy")
    def auto_upgrade_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
        """
        return pulumi.get(self, "auto_upgrade_policy")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster version of the Kubernetes Cluster, can be a name, slug or identity
        """
        return pulumi.get(self, "cluster_version")

    @_builtins.property
    @pulumi.getter(name="defaultNetworkPolicy")
    def default_network_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
        """
        return pulumi.get(self, "default_network_policy")

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Delete protection of the Kubernetes Cluster
        """
        return pulumi.get(self, "delete_protection")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A human readable description about the Kubernetes Cluster
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="kubernetesApiServerCaCertificate")
    def kubernetes_api_server_ca_certificate(self) -> pulumi.Output[_builtins.str]:
        """
        Kubernetes API server CA certificate of the Kubernetes Cluster
        """
        return pulumi.get(self, "kubernetes_api_server_ca_certificate")

    @_builtins.property
    @pulumi.getter(name="kubernetesApiServerEndpoint")
    def kubernetes_api_server_endpoint(self) -> pulumi.Output[_builtins.str]:
        """
        Kubernetes API server endpoint of the Kubernetes Cluster
        """
        return pulumi.get(self, "kubernetes_api_server_endpoint")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the Kubernetes Cluster
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maintenanceDay")
    def maintenance_day(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        """
        return pulumi.get(self, "maintenance_day")

    @_builtins.property
    @pulumi.getter(name="maintenanceStartAt")
    def maintenance_start_at(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
        """
        return pulumi.get(self, "maintenance_start_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Kubernetes Cluster
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkingCni")
    def networking_cni(self) -> pulumi.Output[_builtins.str]:
        """
        CNI of the Kubernetes Cluster
        """
        return pulumi.get(self, "networking_cni")

    @_builtins.property
    @pulumi.getter(name="networkingPodCidr")
    def networking_pod_cidr(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        """
        return pulumi.get(self, "networking_pod_cidr")

    @_builtins.property
    @pulumi.getter(name="networkingServiceCidr")
    def networking_service_cidr(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
        """
        return pulumi.get(self, "networking_service_cidr")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="podSecurityStandardsProfile")
    def pod_security_standards_profile(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
        """
        return pulumi.get(self, "pod_security_standards_profile")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List identities of security group that will be attached to the Kubernetes Cluster
        """
        return pulumi.get(self, "security_group_attachments")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the Kubernetes Cluster
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Subnet of the Kubernetes Cluster. Required for managed clusters.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.
        """
        return pulumi.get(self, "vpc_id")

