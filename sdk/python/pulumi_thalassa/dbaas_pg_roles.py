# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DbaasPgRolesArgs', 'DbaasPgRoles']

@pulumi.input_type
class DbaasPgRolesArgs:
    def __init__(__self__, *,
                 db_cluster_id: pulumi.Input[_builtins.str],
                 password: pulumi.Input[_builtins.str],
                 connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 create_db: Optional[pulumi.Input[_builtins.bool]] = None,
                 create_role: Optional[pulumi.Input[_builtins.bool]] = None,
                 login: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DbaasPgRoles resource.
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database
        :param pulumi.Input[_builtins.str] password: The password of the role
        :param pulumi.Input[_builtins.int] connection_limit: The connection limit of the role
        :param pulumi.Input[_builtins.bool] create_db: Whether the role can create databases
        :param pulumi.Input[_builtins.bool] create_role: Whether the role can create roles
        :param pulumi.Input[_builtins.bool] login: Whether the role can login
        :param pulumi.Input[_builtins.str] name: The name of the role
        """
        pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        pulumi.set(__self__, "password", password)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if create_db is not None:
            pulumi.set(__self__, "create_db", create_db)
        if create_role is not None:
            pulumi.set(__self__, "create_role", create_role)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the database
        """
        return pulumi.get(self, "db_cluster_id")

    @db_cluster_id.setter
    def db_cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "db_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str]:
        """
        The password of the role
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The connection limit of the role
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "connection_limit", value)

    @_builtins.property
    @pulumi.getter(name="createDb")
    def create_db(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the role can create databases
        """
        return pulumi.get(self, "create_db")

    @create_db.setter
    def create_db(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "create_db", value)

    @_builtins.property
    @pulumi.getter(name="createRole")
    def create_role(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the role can create roles
        """
        return pulumi.get(self, "create_role")

    @create_role.setter
    def create_role(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "create_role", value)

    @_builtins.property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the role can login
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "login", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)


@pulumi.input_type
class _DbaasPgRolesState:
    def __init__(__self__, *,
                 connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 create_db: Optional[pulumi.Input[_builtins.bool]] = None,
                 create_role: Optional[pulumi.Input[_builtins.bool]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 login: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DbaasPgRoles resources.
        :param pulumi.Input[_builtins.int] connection_limit: The connection limit of the role
        :param pulumi.Input[_builtins.bool] create_db: Whether the role can create databases
        :param pulumi.Input[_builtins.bool] create_role: Whether the role can create roles
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database
        :param pulumi.Input[_builtins.bool] login: Whether the role can login
        :param pulumi.Input[_builtins.str] name: The name of the role
        :param pulumi.Input[_builtins.str] password: The password of the role
        """
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if create_db is not None:
            pulumi.set(__self__, "create_db", create_db)
        if create_role is not None:
            pulumi.set(__self__, "create_role", create_role)
        if db_cluster_id is not None:
            pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The connection limit of the role
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "connection_limit", value)

    @_builtins.property
    @pulumi.getter(name="createDb")
    def create_db(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the role can create databases
        """
        return pulumi.get(self, "create_db")

    @create_db.setter
    def create_db(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "create_db", value)

    @_builtins.property
    @pulumi.getter(name="createRole")
    def create_role(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the role can create roles
        """
        return pulumi.get(self, "create_role")

    @create_role.setter
    def create_role(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "create_role", value)

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the database
        """
        return pulumi.get(self, "db_cluster_id")

    @db_cluster_id.setter
    def db_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the role can login
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "login", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The password of the role
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)


@pulumi.type_token("thalassa:index/dbaasPgRoles:DbaasPgRoles")
class DbaasPgRoles(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 create_db: Optional[pulumi.Input[_builtins.bool]] = None,
                 create_role: Optional[pulumi.Input[_builtins.bool]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 login: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a PostgreSQL role

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the database cluster
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for database cluster",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the database cluster
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for database cluster",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a database cluster for the PostgreSQL roles
        example_dbaas_db_cluster = thalassa.DbaasDbCluster("example",
            name="example-db-cluster",
            description="Example database cluster for PostgreSQL roles",
            subnet_id=example_subnet.id,
            database_instance_type="db-pgp-small",
            engine="postgres",
            engine_version="15.13",
            allocated_storage=100,
            volume_type_class="block")
        # Create PostgreSQL roles with Thalassa default values
        example_dbaas_pg_roles = thalassa.DbaasPgRoles("example",
            db_cluster_id=example_dbaas_db_cluster.id,
            name="example_role",
            password="secure_password_123")
        pulumi.export("pgRolesId", example_dbaas_pg_roles.id)
        pulumi.export("pgRolesName", example_dbaas_pg_roles.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] connection_limit: The connection limit of the role
        :param pulumi.Input[_builtins.bool] create_db: Whether the role can create databases
        :param pulumi.Input[_builtins.bool] create_role: Whether the role can create roles
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database
        :param pulumi.Input[_builtins.bool] login: Whether the role can login
        :param pulumi.Input[_builtins.str] name: The name of the role
        :param pulumi.Input[_builtins.str] password: The password of the role
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbaasPgRolesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PostgreSQL role

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the database cluster
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for database cluster",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the database cluster
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for database cluster",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a database cluster for the PostgreSQL roles
        example_dbaas_db_cluster = thalassa.DbaasDbCluster("example",
            name="example-db-cluster",
            description="Example database cluster for PostgreSQL roles",
            subnet_id=example_subnet.id,
            database_instance_type="db-pgp-small",
            engine="postgres",
            engine_version="15.13",
            allocated_storage=100,
            volume_type_class="block")
        # Create PostgreSQL roles with Thalassa default values
        example_dbaas_pg_roles = thalassa.DbaasPgRoles("example",
            db_cluster_id=example_dbaas_db_cluster.id,
            name="example_role",
            password="secure_password_123")
        pulumi.export("pgRolesId", example_dbaas_pg_roles.id)
        pulumi.export("pgRolesName", example_dbaas_pg_roles.name)
        ```

        :param str resource_name: The name of the resource.
        :param DbaasPgRolesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbaasPgRolesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 create_db: Optional[pulumi.Input[_builtins.bool]] = None,
                 create_role: Optional[pulumi.Input[_builtins.bool]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 login: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbaasPgRolesArgs.__new__(DbaasPgRolesArgs)

            __props__.__dict__["connection_limit"] = connection_limit
            __props__.__dict__["create_db"] = create_db
            __props__.__dict__["create_role"] = create_role
            if db_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'db_cluster_id'")
            __props__.__dict__["db_cluster_id"] = db_cluster_id
            __props__.__dict__["login"] = login
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DbaasPgRoles, __self__).__init__(
            'thalassa:index/dbaasPgRoles:DbaasPgRoles',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
            create_db: Optional[pulumi.Input[_builtins.bool]] = None,
            create_role: Optional[pulumi.Input[_builtins.bool]] = None,
            db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            login: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None) -> 'DbaasPgRoles':
        """
        Get an existing DbaasPgRoles resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] connection_limit: The connection limit of the role
        :param pulumi.Input[_builtins.bool] create_db: Whether the role can create databases
        :param pulumi.Input[_builtins.bool] create_role: Whether the role can create roles
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database
        :param pulumi.Input[_builtins.bool] login: Whether the role can login
        :param pulumi.Input[_builtins.str] name: The name of the role
        :param pulumi.Input[_builtins.str] password: The password of the role
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbaasPgRolesState.__new__(_DbaasPgRolesState)

        __props__.__dict__["connection_limit"] = connection_limit
        __props__.__dict__["create_db"] = create_db
        __props__.__dict__["create_role"] = create_role
        __props__.__dict__["db_cluster_id"] = db_cluster_id
        __props__.__dict__["login"] = login
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["password"] = password
        return DbaasPgRoles(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The connection limit of the role
        """
        return pulumi.get(self, "connection_limit")

    @_builtins.property
    @pulumi.getter(name="createDb")
    def create_db(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the role can create databases
        """
        return pulumi.get(self, "create_db")

    @_builtins.property
    @pulumi.getter(name="createRole")
    def create_role(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the role can create roles
        """
        return pulumi.get(self, "create_role")

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the database
        """
        return pulumi.get(self, "db_cluster_id")

    @_builtins.property
    @pulumi.getter
    def login(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the role can login
        """
        return pulumi.get(self, "login")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the role
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        The password of the role
        """
        return pulumi.get(self, "password")

