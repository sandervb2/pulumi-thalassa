# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DbaasDbClusterArgs', 'DbaasDbCluster']

@pulumi.input_type
class DbaasDbClusterArgs:
    def __init__(__self__, *,
                 allocated_storage: pulumi.Input[_builtins.int],
                 database_instance_type: pulumi.Input[_builtins.str],
                 engine: pulumi.Input[_builtins.str],
                 engine_version: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 volume_type_class: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 init_db: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 restore_from_backup_identity: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a DbaasDbCluster resource.
        :param pulumi.Input[_builtins.int] allocated_storage: Amount of storage allocated to the cluster in GB
        :param pulumi.Input[_builtins.str] database_instance_type: Database instance type of the DB Cluster
        :param pulumi.Input[_builtins.str] engine: Database engine of the cluster
        :param pulumi.Input[_builtins.str] engine_version: Version of the database engine
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the DB Cluster
        :param pulumi.Input[_builtins.str] volume_type_class: Storage type used to determine the size of the cluster storage
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations of the DB Cluster
        :param pulumi.Input[_builtins.bool] auto_minor_version_upgrade: Flag indicating if the cluster should automatically upgrade to the latest minor version
        :param pulumi.Input[_builtins.bool] delete_protection: Flag indicating if the cluster should be protected from deletion
        :param pulumi.Input[_builtins.str] description: Description of the DB Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] init_db: Map of init db parameters
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels of the DB Cluster
        :param pulumi.Input[_builtins.str] name: Name of the DB Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Map of parameter name to database engine specific parameter value
        :param pulumi.Input[_builtins.int] replicas: Number of instances in the cluster
        :param pulumi.Input[_builtins.str] restore_from_backup_identity: Identity of the backup to restore from
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: List of security groups associated with the cluster
        """
        pulumi.set(__self__, "allocated_storage", allocated_storage)
        pulumi.set(__self__, "database_instance_type", database_instance_type)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "volume_type_class", volume_type_class)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if auto_minor_version_upgrade is not None:
            pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if init_db is not None:
            pulumi.set(__self__, "init_db", init_db)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if restore_from_backup_identity is not None:
            pulumi.set(__self__, "restore_from_backup_identity", restore_from_backup_identity)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @_builtins.property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> pulumi.Input[_builtins.int]:
        """
        Amount of storage allocated to the cluster in GB
        """
        return pulumi.get(self, "allocated_storage")

    @allocated_storage.setter
    def allocated_storage(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "allocated_storage", value)

    @_builtins.property
    @pulumi.getter(name="databaseInstanceType")
    def database_instance_type(self) -> pulumi.Input[_builtins.str]:
        """
        Database instance type of the DB Cluster
        """
        return pulumi.get(self, "database_instance_type")

    @database_instance_type.setter
    def database_instance_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "database_instance_type", value)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> pulumi.Input[_builtins.str]:
        """
        Database engine of the cluster
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "engine", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Input[_builtins.str]:
        """
        Version of the database engine
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Subnet of the DB Cluster
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeTypeClass")
    def volume_type_class(self) -> pulumi.Input[_builtins.str]:
        """
        Storage type used to determine the size of the cluster storage
        """
        return pulumi.get(self, "volume_type_class")

    @volume_type_class.setter
    def volume_type_class(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_type_class", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations of the DB Cluster
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if the cluster should automatically upgrade to the latest minor version
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_minor_version_upgrade", value)

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if the cluster should be protected from deletion
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the DB Cluster
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="initDb")
    def init_db(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of init db parameters
        """
        return pulumi.get(self, "init_db")

    @init_db.setter
    def init_db(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "init_db", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels of the DB Cluster
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the DB Cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of parameter name to database engine specific parameter value
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of instances in the cluster
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replicas", value)

    @_builtins.property
    @pulumi.getter(name="restoreFromBackupIdentity")
    def restore_from_backup_identity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the backup to restore from
        """
        return pulumi.get(self, "restore_from_backup_identity")

    @restore_from_backup_identity.setter
    def restore_from_backup_identity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restore_from_backup_identity", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of security groups associated with the cluster
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)


@pulumi.input_type
class _DbaasDbClusterState:
    def __init__(__self__, *,
                 allocated_storage: Optional[pulumi.Input[_builtins.int]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 database_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_ipv4: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_ipv6: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 init_db: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 restore_from_backup_identity: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_type_class: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DbaasDbCluster resources.
        :param pulumi.Input[_builtins.int] allocated_storage: Amount of storage allocated to the cluster in GB
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations of the DB Cluster
        :param pulumi.Input[_builtins.bool] auto_minor_version_upgrade: Flag indicating if the cluster should automatically upgrade to the latest minor version
        :param pulumi.Input[_builtins.str] database_instance_type: Database instance type of the DB Cluster
        :param pulumi.Input[_builtins.bool] delete_protection: Flag indicating if the cluster should be protected from deletion
        :param pulumi.Input[_builtins.str] description: Description of the DB Cluster
        :param pulumi.Input[_builtins.str] endpoint_ipv4: IPv4 address of the cluster endpoint
        :param pulumi.Input[_builtins.str] endpoint_ipv6: IPv6 address of the cluster endpoint
        :param pulumi.Input[_builtins.str] engine: Database engine of the cluster
        :param pulumi.Input[_builtins.str] engine_version: Version of the database engine
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] init_db: Map of init db parameters
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels of the DB Cluster
        :param pulumi.Input[_builtins.str] name: Name of the DB Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Map of parameter name to database engine specific parameter value
        :param pulumi.Input[_builtins.int] port: Port of the cluster endpoint
        :param pulumi.Input[_builtins.int] replicas: Number of instances in the cluster
        :param pulumi.Input[_builtins.str] restore_from_backup_identity: Identity of the backup to restore from
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: List of security groups associated with the cluster
        :param pulumi.Input[_builtins.str] status: Status of the cluster
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the DB Cluster
        :param pulumi.Input[_builtins.str] volume_type_class: Storage type used to determine the size of the cluster storage
        """
        if allocated_storage is not None:
            pulumi.set(__self__, "allocated_storage", allocated_storage)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if auto_minor_version_upgrade is not None:
            pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if database_instance_type is not None:
            pulumi.set(__self__, "database_instance_type", database_instance_type)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_ipv4 is not None:
            pulumi.set(__self__, "endpoint_ipv4", endpoint_ipv4)
        if endpoint_ipv6 is not None:
            pulumi.set(__self__, "endpoint_ipv6", endpoint_ipv6)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if init_db is not None:
            pulumi.set(__self__, "init_db", init_db)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if restore_from_backup_identity is not None:
            pulumi.set(__self__, "restore_from_backup_identity", restore_from_backup_identity)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if volume_type_class is not None:
            pulumi.set(__self__, "volume_type_class", volume_type_class)

    @_builtins.property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Amount of storage allocated to the cluster in GB
        """
        return pulumi.get(self, "allocated_storage")

    @allocated_storage.setter
    def allocated_storage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "allocated_storage", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations of the DB Cluster
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if the cluster should automatically upgrade to the latest minor version
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_minor_version_upgrade", value)

    @_builtins.property
    @pulumi.getter(name="databaseInstanceType")
    def database_instance_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Database instance type of the DB Cluster
        """
        return pulumi.get(self, "database_instance_type")

    @database_instance_type.setter
    def database_instance_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_instance_type", value)

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag indicating if the cluster should be protected from deletion
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the DB Cluster
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointIpv4")
    def endpoint_ipv4(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv4 address of the cluster endpoint
        """
        return pulumi.get(self, "endpoint_ipv4")

    @endpoint_ipv4.setter
    def endpoint_ipv4(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_ipv4", value)

    @_builtins.property
    @pulumi.getter(name="endpointIpv6")
    def endpoint_ipv6(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPv6 address of the cluster endpoint
        """
        return pulumi.get(self, "endpoint_ipv6")

    @endpoint_ipv6.setter
    def endpoint_ipv6(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_ipv6", value)

    @_builtins.property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Database engine of the cluster
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine", value)

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the database engine
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "engine_version", value)

    @_builtins.property
    @pulumi.getter(name="initDb")
    def init_db(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of init db parameters
        """
        return pulumi.get(self, "init_db")

    @init_db.setter
    def init_db(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "init_db", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels of the DB Cluster
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the DB Cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Map of parameter name to database engine specific parameter value
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Port of the cluster endpoint
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of instances in the cluster
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replicas", value)

    @_builtins.property
    @pulumi.getter(name="restoreFromBackupIdentity")
    def restore_from_backup_identity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the backup to restore from
        """
        return pulumi.get(self, "restore_from_backup_identity")

    @restore_from_backup_identity.setter
    def restore_from_backup_identity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restore_from_backup_identity", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of security groups associated with the cluster
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the cluster
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet of the DB Cluster
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeTypeClass")
    def volume_type_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage type used to determine the size of the cluster storage
        """
        return pulumi.get(self, "volume_type_class")

    @volume_type_class.setter
    def volume_type_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_type_class", value)


@pulumi.type_token("thalassa:index/dbaasDbCluster:DbaasDbCluster")
class DbaasDbCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocated_storage: Optional[pulumi.Input[_builtins.int]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 database_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 init_db: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 restore_from_backup_identity: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_type_class: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create an DB Cluster

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] allocated_storage: Amount of storage allocated to the cluster in GB
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations of the DB Cluster
        :param pulumi.Input[_builtins.bool] auto_minor_version_upgrade: Flag indicating if the cluster should automatically upgrade to the latest minor version
        :param pulumi.Input[_builtins.str] database_instance_type: Database instance type of the DB Cluster
        :param pulumi.Input[_builtins.bool] delete_protection: Flag indicating if the cluster should be protected from deletion
        :param pulumi.Input[_builtins.str] description: Description of the DB Cluster
        :param pulumi.Input[_builtins.str] engine: Database engine of the cluster
        :param pulumi.Input[_builtins.str] engine_version: Version of the database engine
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] init_db: Map of init db parameters
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels of the DB Cluster
        :param pulumi.Input[_builtins.str] name: Name of the DB Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Map of parameter name to database engine specific parameter value
        :param pulumi.Input[_builtins.int] replicas: Number of instances in the cluster
        :param pulumi.Input[_builtins.str] restore_from_backup_identity: Identity of the backup to restore from
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: List of security groups associated with the cluster
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the DB Cluster
        :param pulumi.Input[_builtins.str] volume_type_class: Storage type used to determine the size of the cluster storage
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbaasDbClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create an DB Cluster

        :param str resource_name: The name of the resource.
        :param DbaasDbClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbaasDbClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocated_storage: Optional[pulumi.Input[_builtins.int]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
                 database_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 engine: Optional[pulumi.Input[_builtins.str]] = None,
                 engine_version: Optional[pulumi.Input[_builtins.str]] = None,
                 init_db: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 restore_from_backup_identity: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_type_class: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbaasDbClusterArgs.__new__(DbaasDbClusterArgs)

            if allocated_storage is None and not opts.urn:
                raise TypeError("Missing required property 'allocated_storage'")
            __props__.__dict__["allocated_storage"] = allocated_storage
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["auto_minor_version_upgrade"] = auto_minor_version_upgrade
            if database_instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'database_instance_type'")
            __props__.__dict__["database_instance_type"] = database_instance_type
            __props__.__dict__["delete_protection"] = delete_protection
            __props__.__dict__["description"] = description
            if engine is None and not opts.urn:
                raise TypeError("Missing required property 'engine'")
            __props__.__dict__["engine"] = engine
            if engine_version is None and not opts.urn:
                raise TypeError("Missing required property 'engine_version'")
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["init_db"] = init_db
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["replicas"] = replicas
            __props__.__dict__["restore_from_backup_identity"] = restore_from_backup_identity
            __props__.__dict__["security_groups"] = security_groups
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            if volume_type_class is None and not opts.urn:
                raise TypeError("Missing required property 'volume_type_class'")
            __props__.__dict__["volume_type_class"] = volume_type_class
            __props__.__dict__["endpoint_ipv4"] = None
            __props__.__dict__["endpoint_ipv6"] = None
            __props__.__dict__["port"] = None
            __props__.__dict__["status"] = None
        super(DbaasDbCluster, __self__).__init__(
            'thalassa:index/dbaasDbCluster:DbaasDbCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocated_storage: Optional[pulumi.Input[_builtins.int]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            auto_minor_version_upgrade: Optional[pulumi.Input[_builtins.bool]] = None,
            database_instance_type: Optional[pulumi.Input[_builtins.str]] = None,
            delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_ipv4: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_ipv6: Optional[pulumi.Input[_builtins.str]] = None,
            engine: Optional[pulumi.Input[_builtins.str]] = None,
            engine_version: Optional[pulumi.Input[_builtins.str]] = None,
            init_db: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            port: Optional[pulumi.Input[_builtins.int]] = None,
            replicas: Optional[pulumi.Input[_builtins.int]] = None,
            restore_from_backup_identity: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_type_class: Optional[pulumi.Input[_builtins.str]] = None) -> 'DbaasDbCluster':
        """
        Get an existing DbaasDbCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] allocated_storage: Amount of storage allocated to the cluster in GB
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations of the DB Cluster
        :param pulumi.Input[_builtins.bool] auto_minor_version_upgrade: Flag indicating if the cluster should automatically upgrade to the latest minor version
        :param pulumi.Input[_builtins.str] database_instance_type: Database instance type of the DB Cluster
        :param pulumi.Input[_builtins.bool] delete_protection: Flag indicating if the cluster should be protected from deletion
        :param pulumi.Input[_builtins.str] description: Description of the DB Cluster
        :param pulumi.Input[_builtins.str] endpoint_ipv4: IPv4 address of the cluster endpoint
        :param pulumi.Input[_builtins.str] endpoint_ipv6: IPv6 address of the cluster endpoint
        :param pulumi.Input[_builtins.str] engine: Database engine of the cluster
        :param pulumi.Input[_builtins.str] engine_version: Version of the database engine
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] init_db: Map of init db parameters
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels of the DB Cluster
        :param pulumi.Input[_builtins.str] name: Name of the DB Cluster
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Map of parameter name to database engine specific parameter value
        :param pulumi.Input[_builtins.int] port: Port of the cluster endpoint
        :param pulumi.Input[_builtins.int] replicas: Number of instances in the cluster
        :param pulumi.Input[_builtins.str] restore_from_backup_identity: Identity of the backup to restore from
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: List of security groups associated with the cluster
        :param pulumi.Input[_builtins.str] status: Status of the cluster
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the DB Cluster
        :param pulumi.Input[_builtins.str] volume_type_class: Storage type used to determine the size of the cluster storage
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbaasDbClusterState.__new__(_DbaasDbClusterState)

        __props__.__dict__["allocated_storage"] = allocated_storage
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["auto_minor_version_upgrade"] = auto_minor_version_upgrade
        __props__.__dict__["database_instance_type"] = database_instance_type
        __props__.__dict__["delete_protection"] = delete_protection
        __props__.__dict__["description"] = description
        __props__.__dict__["endpoint_ipv4"] = endpoint_ipv4
        __props__.__dict__["endpoint_ipv6"] = endpoint_ipv6
        __props__.__dict__["engine"] = engine
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["init_db"] = init_db
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["port"] = port
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["restore_from_backup_identity"] = restore_from_backup_identity
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["volume_type_class"] = volume_type_class
        return DbaasDbCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> pulumi.Output[_builtins.int]:
        """
        Amount of storage allocated to the cluster in GB
        """
        return pulumi.get(self, "allocated_storage")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations of the DB Cluster
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Flag indicating if the cluster should automatically upgrade to the latest minor version
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @_builtins.property
    @pulumi.getter(name="databaseInstanceType")
    def database_instance_type(self) -> pulumi.Output[_builtins.str]:
        """
        Database instance type of the DB Cluster
        """
        return pulumi.get(self, "database_instance_type")

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Flag indicating if the cluster should be protected from deletion
        """
        return pulumi.get(self, "delete_protection")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the DB Cluster
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointIpv4")
    def endpoint_ipv4(self) -> pulumi.Output[_builtins.str]:
        """
        IPv4 address of the cluster endpoint
        """
        return pulumi.get(self, "endpoint_ipv4")

    @_builtins.property
    @pulumi.getter(name="endpointIpv6")
    def endpoint_ipv6(self) -> pulumi.Output[_builtins.str]:
        """
        IPv6 address of the cluster endpoint
        """
        return pulumi.get(self, "endpoint_ipv6")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> pulumi.Output[_builtins.str]:
        """
        Database engine of the cluster
        """
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the database engine
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="initDb")
    def init_db(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of init db parameters
        """
        return pulumi.get(self, "init_db")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels of the DB Cluster
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the DB Cluster
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Map of parameter name to database engine specific parameter value
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.int]:
        """
        Port of the cluster endpoint
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Number of instances in the cluster
        """
        return pulumi.get(self, "replicas")

    @_builtins.property
    @pulumi.getter(name="restoreFromBackupIdentity")
    def restore_from_backup_identity(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Identity of the backup to restore from
        """
        return pulumi.get(self, "restore_from_backup_identity")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of security groups associated with the cluster
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the cluster
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Subnet of the DB Cluster
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="volumeTypeClass")
    def volume_type_class(self) -> pulumi.Output[_builtins.str]:
        """
        Storage type used to determine the size of the cluster storage
        """
        return pulumi.get(self, "volume_type_class")

