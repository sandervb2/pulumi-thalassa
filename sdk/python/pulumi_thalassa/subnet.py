# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SubnetArgs', 'Subnet']

@pulumi.input_type
class SubnetArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Subnet resource.
        :param pulumi.Input[_builtins.str] cidr: CIDR of the Subnet
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the Subnet
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Subnet
        :param pulumi.Input[_builtins.str] description: A human readable description about the subnet
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Subnet
        :param pulumi.Input[_builtins.str] name: Name of the Subnet
        :param pulumi.Input[_builtins.str] route_table_id: Route Table of the Subnet
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[_builtins.str]:
        """
        CIDR of the Subnet
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        VPC of the Subnet
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Subnet
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the subnet
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Subnet
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Subnet
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route Table of the Subnet
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_table_id", value)


@pulumi.input_type
class _SubnetState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_addresses_available: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv4_addresses_used: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_addresses_available: Optional[pulumi.Input[_builtins.int]] = None,
                 ipv6_addresses_used: Optional[pulumi.Input[_builtins.int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Subnet resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Subnet
        :param pulumi.Input[_builtins.str] cidr: CIDR of the Subnet
        :param pulumi.Input[_builtins.str] description: A human readable description about the subnet
        :param pulumi.Input[_builtins.int] ipv4_addresses_available: Number of IPv4 addresses available in the Subnet
        :param pulumi.Input[_builtins.int] ipv4_addresses_used: Number of IPv4 addresses used in the Subnet
        :param pulumi.Input[_builtins.int] ipv6_addresses_available: Number of IPv6 addresses available in the Subnet
        :param pulumi.Input[_builtins.int] ipv6_addresses_used: Number of IPv6 addresses used in the Subnet
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Subnet
        :param pulumi.Input[_builtins.str] name: Name of the Subnet
        :param pulumi.Input[_builtins.str] route_table_id: Route Table of the Subnet
        :param pulumi.Input[_builtins.str] slug: Slug of the Subnet
        :param pulumi.Input[_builtins.str] status: Status of the Subnet
        :param pulumi.Input[_builtins.str] type: Type of the Subnet
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the Subnet
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ipv4_addresses_available is not None:
            pulumi.set(__self__, "ipv4_addresses_available", ipv4_addresses_available)
        if ipv4_addresses_used is not None:
            pulumi.set(__self__, "ipv4_addresses_used", ipv4_addresses_used)
        if ipv6_addresses_available is not None:
            pulumi.set(__self__, "ipv6_addresses_available", ipv6_addresses_available)
        if ipv6_addresses_used is not None:
            pulumi.set(__self__, "ipv6_addresses_used", ipv6_addresses_used)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Subnet
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIDR of the Subnet
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the subnet
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressesAvailable")
    def ipv4_addresses_available(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of IPv4 addresses available in the Subnet
        """
        return pulumi.get(self, "ipv4_addresses_available")

    @ipv4_addresses_available.setter
    def ipv4_addresses_available(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_addresses_available", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressesUsed")
    def ipv4_addresses_used(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of IPv4 addresses used in the Subnet
        """
        return pulumi.get(self, "ipv4_addresses_used")

    @ipv4_addresses_used.setter
    def ipv4_addresses_used(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv4_addresses_used", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressesAvailable")
    def ipv6_addresses_available(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of IPv6 addresses available in the Subnet
        """
        return pulumi.get(self, "ipv6_addresses_available")

    @ipv6_addresses_available.setter
    def ipv6_addresses_available(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv6_addresses_available", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressesUsed")
    def ipv6_addresses_used(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of IPv6 addresses used in the Subnet
        """
        return pulumi.get(self, "ipv6_addresses_used")

    @ipv6_addresses_used.setter
    def ipv6_addresses_used(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "ipv6_addresses_used", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Subnet
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Subnet
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Route Table of the Subnet
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_table_id", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Slug of the Subnet
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the Subnet
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the Subnet
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC of the Subnet
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("thalassa:index/subnet:Subnet")
class Subnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create an subnet in a VPC. Subnets are used to create a network for your resources. A VPC can have multiple subnets, and each subnet must have a different CIDR block. IPv4, IPv6 and Dual-stack subnets are supported. After creationg the CIDR cannot be changed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the subnet
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for subnet",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a route table for the subnet (optional)
        example_route_table = thalassa.RouteTable("example",
            name="example-route-table",
            description="Example route table for subnet",
            vpc_id=example.id)
        # Create a subnet with all optional attributes
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            vpc_id=example.id,
            cidr="10.0.1.0/24",
            description="Example subnet for documentation with all optional attributes",
            labels={
                "environment": "production",
                "tier": "web",
                "network": "private",
            },
            annotations={
                "cost-center": "cc-12345",
                "backup-policy": "none",
                "monitoring": "enabled",
            },
            route_table_id=example_route_table.id)
        pulumi.export("subnetId", example_subnet.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Subnet
        :param pulumi.Input[_builtins.str] cidr: CIDR of the Subnet
        :param pulumi.Input[_builtins.str] description: A human readable description about the subnet
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Subnet
        :param pulumi.Input[_builtins.str] name: Name of the Subnet
        :param pulumi.Input[_builtins.str] route_table_id: Route Table of the Subnet
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the Subnet
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create an subnet in a VPC. Subnets are used to create a network for your resources. A VPC can have multiple subnets, and each subnet must have a different CIDR block. IPv4, IPv6 and Dual-stack subnets are supported. After creationg the CIDR cannot be changed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the subnet
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for subnet",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a route table for the subnet (optional)
        example_route_table = thalassa.RouteTable("example",
            name="example-route-table",
            description="Example route table for subnet",
            vpc_id=example.id)
        # Create a subnet with all optional attributes
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            vpc_id=example.id,
            cidr="10.0.1.0/24",
            description="Example subnet for documentation with all optional attributes",
            labels={
                "environment": "production",
                "tier": "web",
                "network": "private",
            },
            annotations={
                "cost-center": "cc-12345",
                "backup-policy": "none",
                "monitoring": "enabled",
            },
            route_table_id=example_route_table.id)
        pulumi.export("subnetId", example_subnet.id)
        ```

        :param str resource_name: The name of the resource.
        :param SubnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubnetArgs.__new__(SubnetArgs)

            __props__.__dict__["annotations"] = annotations
            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            __props__.__dict__["route_table_id"] = route_table_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["ipv4_addresses_available"] = None
            __props__.__dict__["ipv4_addresses_used"] = None
            __props__.__dict__["ipv6_addresses_available"] = None
            __props__.__dict__["ipv6_addresses_used"] = None
            __props__.__dict__["slug"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        super(Subnet, __self__).__init__(
            'thalassa:index/subnet:Subnet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            cidr: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_addresses_available: Optional[pulumi.Input[_builtins.int]] = None,
            ipv4_addresses_used: Optional[pulumi.Input[_builtins.int]] = None,
            ipv6_addresses_available: Optional[pulumi.Input[_builtins.int]] = None,
            ipv6_addresses_used: Optional[pulumi.Input[_builtins.int]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Subnet':
        """
        Get an existing Subnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Subnet
        :param pulumi.Input[_builtins.str] cidr: CIDR of the Subnet
        :param pulumi.Input[_builtins.str] description: A human readable description about the subnet
        :param pulumi.Input[_builtins.int] ipv4_addresses_available: Number of IPv4 addresses available in the Subnet
        :param pulumi.Input[_builtins.int] ipv4_addresses_used: Number of IPv4 addresses used in the Subnet
        :param pulumi.Input[_builtins.int] ipv6_addresses_available: Number of IPv6 addresses available in the Subnet
        :param pulumi.Input[_builtins.int] ipv6_addresses_used: Number of IPv6 addresses used in the Subnet
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Subnet
        :param pulumi.Input[_builtins.str] name: Name of the Subnet
        :param pulumi.Input[_builtins.str] route_table_id: Route Table of the Subnet
        :param pulumi.Input[_builtins.str] slug: Slug of the Subnet
        :param pulumi.Input[_builtins.str] status: Status of the Subnet
        :param pulumi.Input[_builtins.str] type: Type of the Subnet
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the Subnet
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubnetState.__new__(_SubnetState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["description"] = description
        __props__.__dict__["ipv4_addresses_available"] = ipv4_addresses_available
        __props__.__dict__["ipv4_addresses_used"] = ipv4_addresses_used
        __props__.__dict__["ipv6_addresses_available"] = ipv6_addresses_available
        __props__.__dict__["ipv6_addresses_used"] = ipv6_addresses_used
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["route_table_id"] = route_table_id
        __props__.__dict__["slug"] = slug
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["vpc_id"] = vpc_id
        return Subnet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the Subnet
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[_builtins.str]:
        """
        CIDR of the Subnet
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A human readable description about the subnet
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressesAvailable")
    def ipv4_addresses_available(self) -> pulumi.Output[_builtins.int]:
        """
        Number of IPv4 addresses available in the Subnet
        """
        return pulumi.get(self, "ipv4_addresses_available")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressesUsed")
    def ipv4_addresses_used(self) -> pulumi.Output[_builtins.int]:
        """
        Number of IPv4 addresses used in the Subnet
        """
        return pulumi.get(self, "ipv4_addresses_used")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressesAvailable")
    def ipv6_addresses_available(self) -> pulumi.Output[_builtins.int]:
        """
        Number of IPv6 addresses available in the Subnet
        """
        return pulumi.get(self, "ipv6_addresses_available")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressesUsed")
    def ipv6_addresses_used(self) -> pulumi.Output[_builtins.int]:
        """
        Number of IPv6 addresses used in the Subnet
        """
        return pulumi.get(self, "ipv6_addresses_used")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the Subnet
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Subnet
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Route Table of the Subnet
        """
        return pulumi.get(self, "route_table_id")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        """
        Slug of the Subnet
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the Subnet
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the Subnet
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        VPC of the Subnet
        """
        return pulumi.get(self, "vpc_id")

