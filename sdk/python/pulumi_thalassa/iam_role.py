# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamRoleArgs', 'IamRole']

@pulumi.input_type
class IamRoleArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamRole resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the organisation role
        :param pulumi.Input[_builtins.str] description: Description of the organisation role
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the organisation role
        :param pulumi.Input[_builtins.str] name: Name of the organisation role
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the organisation role
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the organisation role
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the organisation role
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the organisation role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IamRoleState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_is_read_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 system: Optional[pulumi.Input[_builtins.bool]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamRole resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the organisation role
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the organisation role
        :param pulumi.Input[_builtins.str] description: Description of the organisation role
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the organisation role
        :param pulumi.Input[_builtins.str] name: Name of the organisation role
        :param pulumi.Input[_builtins.bool] role_is_read_only: Whether the role is read-only and cannot be modified.
        :param pulumi.Input[_builtins.str] slug: Slug of the organisation role
        :param pulumi.Input[_builtins.bool] system: Whether the role is a system role
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the organisation role
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role_is_read_only is not None:
            pulumi.set(__self__, "role_is_read_only", role_is_read_only)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if system is not None:
            pulumi.set(__self__, "system", system)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the organisation role
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation timestamp of the organisation role
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the organisation role
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the organisation role
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the organisation role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="roleIsReadOnly")
    def role_is_read_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the role is read-only and cannot be modified.
        """
        return pulumi.get(self, "role_is_read_only")

    @role_is_read_only.setter
    def role_is_read_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "role_is_read_only", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Slug of the organisation role
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the role is a system role
        """
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "system", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update timestamp of the organisation role
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("thalassa:index/iamRole:IamRole")
class IamRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage an organisation role in Thalassa Cloud

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create an organisation role
        example = thalassa.IamRole("example",
            name="example-role",
            description="An example organisation role for demonstration purposes",
            labels={
                "environment": "development",
                "project": "example",
            },
            annotations={
                "example.com/created-by": "terraform",
            })
        pulumi.export("roleId", example.id)
        pulumi.export("roleName", example.name)
        pulumi.export("roleSlug", example.slug)
        pulumi.export("roleDescription", example.description)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the organisation role
        :param pulumi.Input[_builtins.str] description: Description of the organisation role
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the organisation role
        :param pulumi.Input[_builtins.str] name: Name of the organisation role
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IamRoleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage an organisation role in Thalassa Cloud

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create an organisation role
        example = thalassa.IamRole("example",
            name="example-role",
            description="An example organisation role for demonstration purposes",
            labels={
                "environment": "development",
                "project": "example",
            },
            annotations={
                "example.com/created-by": "terraform",
            })
        pulumi.export("roleId", example.id)
        pulumi.export("roleName", example.name)
        pulumi.export("roleSlug", example.slug)
        pulumi.export("roleDescription", example.description)
        ```

        :param str resource_name: The name of the resource.
        :param IamRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamRoleArgs.__new__(IamRoleArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["created_at"] = None
            __props__.__dict__["role_is_read_only"] = None
            __props__.__dict__["slug"] = None
            __props__.__dict__["system"] = None
            __props__.__dict__["updated_at"] = None
        super(IamRole, __self__).__init__(
            'thalassa:index/iamRole:IamRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            role_is_read_only: Optional[pulumi.Input[_builtins.bool]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            system: Optional[pulumi.Input[_builtins.bool]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamRole':
        """
        Get an existing IamRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the organisation role
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the organisation role
        :param pulumi.Input[_builtins.str] description: Description of the organisation role
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the organisation role
        :param pulumi.Input[_builtins.str] name: Name of the organisation role
        :param pulumi.Input[_builtins.bool] role_is_read_only: Whether the role is read-only and cannot be modified.
        :param pulumi.Input[_builtins.str] slug: Slug of the organisation role
        :param pulumi.Input[_builtins.bool] system: Whether the role is a system role
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the organisation role
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamRoleState.__new__(_IamRoleState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["role_is_read_only"] = role_is_read_only
        __props__.__dict__["slug"] = slug
        __props__.__dict__["system"] = system
        __props__.__dict__["updated_at"] = updated_at
        return IamRole(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the organisation role
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Creation timestamp of the organisation role
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the organisation role
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the organisation role
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the organisation role
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="roleIsReadOnly")
    def role_is_read_only(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the role is read-only and cannot be modified.
        """
        return pulumi.get(self, "role_is_read_only")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        """
        Slug of the organisation role
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter
    def system(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the role is a system role
        """
        return pulumi.get(self, "system")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last update timestamp of the organisation role
        """
        return pulumi.get(self, "updated_at")

