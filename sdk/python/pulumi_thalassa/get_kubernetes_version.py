# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetKubernetesVersionResult',
    'AwaitableGetKubernetesVersionResult',
    'get_kubernetes_version',
    'get_kubernetes_version_output',
]

@pulumi.output_type
class GetKubernetesVersionResult:
    """
    A collection of values returned by getKubernetesVersion.
    """
    def __init__(__self__, annotations=None, cilium_version=None, cloud_controller_manager_version=None, cni_plugins_version=None, containerd_version=None, crictl_version=None, id=None, istio_version=None, kubernetes_version=None, name=None, organisation_id=None, runc_version=None, slug=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if cilium_version and not isinstance(cilium_version, str):
            raise TypeError("Expected argument 'cilium_version' to be a str")
        pulumi.set(__self__, "cilium_version", cilium_version)
        if cloud_controller_manager_version and not isinstance(cloud_controller_manager_version, str):
            raise TypeError("Expected argument 'cloud_controller_manager_version' to be a str")
        pulumi.set(__self__, "cloud_controller_manager_version", cloud_controller_manager_version)
        if cni_plugins_version and not isinstance(cni_plugins_version, str):
            raise TypeError("Expected argument 'cni_plugins_version' to be a str")
        pulumi.set(__self__, "cni_plugins_version", cni_plugins_version)
        if containerd_version and not isinstance(containerd_version, str):
            raise TypeError("Expected argument 'containerd_version' to be a str")
        pulumi.set(__self__, "containerd_version", containerd_version)
        if crictl_version and not isinstance(crictl_version, str):
            raise TypeError("Expected argument 'crictl_version' to be a str")
        pulumi.set(__self__, "crictl_version", crictl_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if istio_version and not isinstance(istio_version, str):
            raise TypeError("Expected argument 'istio_version' to be a str")
        pulumi.set(__self__, "istio_version", istio_version)
        if kubernetes_version and not isinstance(kubernetes_version, str):
            raise TypeError("Expected argument 'kubernetes_version' to be a str")
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if runc_version and not isinstance(runc_version, str):
            raise TypeError("Expected argument 'runc_version' to be a str")
        pulumi.set(__self__, "runc_version", runc_version)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        The annotations of the Kubernetes version.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="ciliumVersion")
    def cilium_version(self) -> _builtins.str:
        """
        The cilium version.
        """
        return pulumi.get(self, "cilium_version")

    @_builtins.property
    @pulumi.getter(name="cloudControllerManagerVersion")
    def cloud_controller_manager_version(self) -> _builtins.str:
        """
        The cloud controller manager version.
        """
        return pulumi.get(self, "cloud_controller_manager_version")

    @_builtins.property
    @pulumi.getter(name="cniPluginsVersion")
    def cni_plugins_version(self) -> _builtins.str:
        """
        The CNI plugins version.
        """
        return pulumi.get(self, "cni_plugins_version")

    @_builtins.property
    @pulumi.getter(name="containerdVersion")
    def containerd_version(self) -> _builtins.str:
        """
        The containerd version.
        """
        return pulumi.get(self, "containerd_version")

    @_builtins.property
    @pulumi.getter(name="crictlVersion")
    def crictl_version(self) -> _builtins.str:
        """
        The crictl version.
        """
        return pulumi.get(self, "crictl_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="istioVersion")
    def istio_version(self) -> _builtins.str:
        """
        The istio version.
        """
        return pulumi.get(self, "istio_version")

    @_builtins.property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> _builtins.str:
        """
        The Kubernetes version
        """
        return pulumi.get(self, "kubernetes_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the Kubernetes version.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="runcVersion")
    def runc_version(self) -> _builtins.str:
        """
        The runc version.
        """
        return pulumi.get(self, "runc_version")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[_builtins.str]:
        """
        The slug of the Kubernetes version.
        """
        return pulumi.get(self, "slug")


class AwaitableGetKubernetesVersionResult(GetKubernetesVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubernetesVersionResult(
            annotations=self.annotations,
            cilium_version=self.cilium_version,
            cloud_controller_manager_version=self.cloud_controller_manager_version,
            cni_plugins_version=self.cni_plugins_version,
            containerd_version=self.containerd_version,
            crictl_version=self.crictl_version,
            id=self.id,
            istio_version=self.istio_version,
            kubernetes_version=self.kubernetes_version,
            name=self.name,
            organisation_id=self.organisation_id,
            runc_version=self.runc_version,
            slug=self.slug)


def get_kubernetes_version(id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           organisation_id: Optional[_builtins.str] = None,
                           slug: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKubernetesVersionResult:
    """
    Get an Kubernetes version


    :param _builtins.str id: The ID of this resource.
    :param _builtins.str name: The name of the Kubernetes version.
    :param _builtins.str slug: The slug of the Kubernetes version.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getKubernetesVersion:getKubernetesVersion', __args__, opts=opts, typ=GetKubernetesVersionResult).value

    return AwaitableGetKubernetesVersionResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        cilium_version=pulumi.get(__ret__, 'cilium_version'),
        cloud_controller_manager_version=pulumi.get(__ret__, 'cloud_controller_manager_version'),
        cni_plugins_version=pulumi.get(__ret__, 'cni_plugins_version'),
        containerd_version=pulumi.get(__ret__, 'containerd_version'),
        crictl_version=pulumi.get(__ret__, 'crictl_version'),
        id=pulumi.get(__ret__, 'id'),
        istio_version=pulumi.get(__ret__, 'istio_version'),
        kubernetes_version=pulumi.get(__ret__, 'kubernetes_version'),
        name=pulumi.get(__ret__, 'name'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        runc_version=pulumi.get(__ret__, 'runc_version'),
        slug=pulumi.get(__ret__, 'slug'))
def get_kubernetes_version_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  slug: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKubernetesVersionResult]:
    """
    Get an Kubernetes version


    :param _builtins.str id: The ID of this resource.
    :param _builtins.str name: The name of the Kubernetes version.
    :param _builtins.str slug: The slug of the Kubernetes version.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    __args__['slug'] = slug
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getKubernetesVersion:getKubernetesVersion', __args__, opts=opts, typ=GetKubernetesVersionResult)
    return __ret__.apply(lambda __response__: GetKubernetesVersionResult(
        annotations=pulumi.get(__response__, 'annotations'),
        cilium_version=pulumi.get(__response__, 'cilium_version'),
        cloud_controller_manager_version=pulumi.get(__response__, 'cloud_controller_manager_version'),
        cni_plugins_version=pulumi.get(__response__, 'cni_plugins_version'),
        containerd_version=pulumi.get(__response__, 'containerd_version'),
        crictl_version=pulumi.get(__response__, 'crictl_version'),
        id=pulumi.get(__response__, 'id'),
        istio_version=pulumi.get(__response__, 'istio_version'),
        kubernetes_version=pulumi.get(__response__, 'kubernetes_version'),
        name=pulumi.get(__response__, 'name'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        runc_version=pulumi.get(__response__, 'runc_version'),
        slug=pulumi.get(__response__, 'slug')))
