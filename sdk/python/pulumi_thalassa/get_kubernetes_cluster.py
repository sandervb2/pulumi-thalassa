# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetKubernetesClusterResult',
    'AwaitableGetKubernetesClusterResult',
    'get_kubernetes_cluster',
    'get_kubernetes_cluster_output',
]

@pulumi.output_type
class GetKubernetesClusterResult:
    """
    A collection of values returned by getKubernetesCluster.
    """
    def __init__(__self__, annotations=None, api_server_acls=None, audit_log_profile=None, auto_upgrade_policy=None, cluster_type=None, cluster_version=None, default_network_policy=None, delete_protection=None, description=None, id=None, kubernetes_api_server_ca_certificate=None, kubernetes_api_server_endpoint=None, labels=None, maintenance_day=None, maintenance_start_at=None, name=None, networking_cni=None, networking_pod_cidr=None, networking_service_cidr=None, organisation_id=None, pod_security_standards_profile=None, region=None, slug=None, subnet_id=None, vpc_id=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if api_server_acls and not isinstance(api_server_acls, list):
            raise TypeError("Expected argument 'api_server_acls' to be a list")
        pulumi.set(__self__, "api_server_acls", api_server_acls)
        if audit_log_profile and not isinstance(audit_log_profile, str):
            raise TypeError("Expected argument 'audit_log_profile' to be a str")
        pulumi.set(__self__, "audit_log_profile", audit_log_profile)
        if auto_upgrade_policy and not isinstance(auto_upgrade_policy, str):
            raise TypeError("Expected argument 'auto_upgrade_policy' to be a str")
        pulumi.set(__self__, "auto_upgrade_policy", auto_upgrade_policy)
        if cluster_type and not isinstance(cluster_type, str):
            raise TypeError("Expected argument 'cluster_type' to be a str")
        pulumi.set(__self__, "cluster_type", cluster_type)
        if cluster_version and not isinstance(cluster_version, str):
            raise TypeError("Expected argument 'cluster_version' to be a str")
        pulumi.set(__self__, "cluster_version", cluster_version)
        if default_network_policy and not isinstance(default_network_policy, str):
            raise TypeError("Expected argument 'default_network_policy' to be a str")
        pulumi.set(__self__, "default_network_policy", default_network_policy)
        if delete_protection and not isinstance(delete_protection, bool):
            raise TypeError("Expected argument 'delete_protection' to be a bool")
        pulumi.set(__self__, "delete_protection", delete_protection)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kubernetes_api_server_ca_certificate and not isinstance(kubernetes_api_server_ca_certificate, str):
            raise TypeError("Expected argument 'kubernetes_api_server_ca_certificate' to be a str")
        pulumi.set(__self__, "kubernetes_api_server_ca_certificate", kubernetes_api_server_ca_certificate)
        if kubernetes_api_server_endpoint and not isinstance(kubernetes_api_server_endpoint, str):
            raise TypeError("Expected argument 'kubernetes_api_server_endpoint' to be a str")
        pulumi.set(__self__, "kubernetes_api_server_endpoint", kubernetes_api_server_endpoint)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if maintenance_day and not isinstance(maintenance_day, int):
            raise TypeError("Expected argument 'maintenance_day' to be a int")
        pulumi.set(__self__, "maintenance_day", maintenance_day)
        if maintenance_start_at and not isinstance(maintenance_start_at, int):
            raise TypeError("Expected argument 'maintenance_start_at' to be a int")
        pulumi.set(__self__, "maintenance_start_at", maintenance_start_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if networking_cni and not isinstance(networking_cni, str):
            raise TypeError("Expected argument 'networking_cni' to be a str")
        pulumi.set(__self__, "networking_cni", networking_cni)
        if networking_pod_cidr and not isinstance(networking_pod_cidr, str):
            raise TypeError("Expected argument 'networking_pod_cidr' to be a str")
        pulumi.set(__self__, "networking_pod_cidr", networking_pod_cidr)
        if networking_service_cidr and not isinstance(networking_service_cidr, str):
            raise TypeError("Expected argument 'networking_service_cidr' to be a str")
        pulumi.set(__self__, "networking_service_cidr", networking_service_cidr)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if pod_security_standards_profile and not isinstance(pod_security_standards_profile, str):
            raise TypeError("Expected argument 'pod_security_standards_profile' to be a str")
        pulumi.set(__self__, "pod_security_standards_profile", pod_security_standards_profile)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        Annotations for the Kubernetes Cluster
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="apiServerAcls")
    def api_server_acls(self) -> Sequence['outputs.GetKubernetesClusterApiServerAclResult']:
        """
        API server ACLs for the Kubernetes Cluster
        """
        return pulumi.get(self, "api_server_acls")

    @_builtins.property
    @pulumi.getter(name="auditLogProfile")
    def audit_log_profile(self) -> _builtins.str:
        """
        Audit log profile of the Kubernetes Cluster
        """
        return pulumi.get(self, "audit_log_profile")

    @_builtins.property
    @pulumi.getter(name="autoUpgradePolicy")
    def auto_upgrade_policy(self) -> _builtins.str:
        """
        Auto upgrade policy of the Kubernetes Cluster
        """
        return pulumi.get(self, "auto_upgrade_policy")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        Cluster type of the Kubernetes Cluster
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> _builtins.str:
        """
        Cluster version of the Kubernetes Cluster
        """
        return pulumi.get(self, "cluster_version")

    @_builtins.property
    @pulumi.getter(name="defaultNetworkPolicy")
    def default_network_policy(self) -> _builtins.str:
        """
        Default network policy of the Kubernetes Cluster
        """
        return pulumi.get(self, "default_network_policy")

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> _builtins.bool:
        """
        Delete protection of the Kubernetes Cluster
        """
        return pulumi.get(self, "delete_protection")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A human readable description about the Kubernetes Cluster
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kubernetesApiServerCaCertificate")
    def kubernetes_api_server_ca_certificate(self) -> _builtins.str:
        """
        Kubernetes API server CA certificate of the Kubernetes Cluster
        """
        return pulumi.get(self, "kubernetes_api_server_ca_certificate")

    @_builtins.property
    @pulumi.getter(name="kubernetesApiServerEndpoint")
    def kubernetes_api_server_endpoint(self) -> _builtins.str:
        """
        Kubernetes API server endpoint of the Kubernetes Cluster
        """
        return pulumi.get(self, "kubernetes_api_server_endpoint")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        """
        Labels for the Kubernetes Cluster
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="maintenanceDay")
    def maintenance_day(self) -> _builtins.int:
        """
        Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
        """
        return pulumi.get(self, "maintenance_day")

    @_builtins.property
    @pulumi.getter(name="maintenanceStartAt")
    def maintenance_start_at(self) -> _builtins.int:
        """
        Time of day when the cluster will be upgraded in minutes from midnight
        """
        return pulumi.get(self, "maintenance_start_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the Kubernetes version.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkingCni")
    def networking_cni(self) -> _builtins.str:
        """
        CNI of the Kubernetes Cluster
        """
        return pulumi.get(self, "networking_cni")

    @_builtins.property
    @pulumi.getter(name="networkingPodCidr")
    def networking_pod_cidr(self) -> _builtins.str:
        """
        Pod CIDR of the Kubernetes Cluster
        """
        return pulumi.get(self, "networking_pod_cidr")

    @_builtins.property
    @pulumi.getter(name="networkingServiceCidr")
    def networking_service_cidr(self) -> _builtins.str:
        """
        Service CIDR of the Kubernetes Cluster
        """
        return pulumi.get(self, "networking_service_cidr")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> _builtins.str:
        """
        Organisation of the Kubernetes Cluster
        """
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="podSecurityStandardsProfile")
    def pod_security_standards_profile(self) -> _builtins.str:
        """
        Pod security standards profile of the Kubernetes Cluster
        """
        return pulumi.get(self, "pod_security_standards_profile")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        """
        The slug of the Kubernetes version.
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Subnet of the Kubernetes Cluster.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        VPC of the Kubernetes Cluster.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetKubernetesClusterResult(GetKubernetesClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubernetesClusterResult(
            annotations=self.annotations,
            api_server_acls=self.api_server_acls,
            audit_log_profile=self.audit_log_profile,
            auto_upgrade_policy=self.auto_upgrade_policy,
            cluster_type=self.cluster_type,
            cluster_version=self.cluster_version,
            default_network_policy=self.default_network_policy,
            delete_protection=self.delete_protection,
            description=self.description,
            id=self.id,
            kubernetes_api_server_ca_certificate=self.kubernetes_api_server_ca_certificate,
            kubernetes_api_server_endpoint=self.kubernetes_api_server_endpoint,
            labels=self.labels,
            maintenance_day=self.maintenance_day,
            maintenance_start_at=self.maintenance_start_at,
            name=self.name,
            networking_cni=self.networking_cni,
            networking_pod_cidr=self.networking_pod_cidr,
            networking_service_cidr=self.networking_service_cidr,
            organisation_id=self.organisation_id,
            pod_security_standards_profile=self.pod_security_standards_profile,
            region=self.region,
            slug=self.slug,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_kubernetes_cluster(name: Optional[_builtins.str] = None,
                           organisation_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKubernetesClusterResult:
    """
    Get an Kubernetes cluster


    :param _builtins.str name: The name of the Kubernetes version.
    :param _builtins.str organisation_id: Organisation of the Kubernetes Cluster
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getKubernetesCluster:getKubernetesCluster', __args__, opts=opts, typ=GetKubernetesClusterResult).value

    return AwaitableGetKubernetesClusterResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        api_server_acls=pulumi.get(__ret__, 'api_server_acls'),
        audit_log_profile=pulumi.get(__ret__, 'audit_log_profile'),
        auto_upgrade_policy=pulumi.get(__ret__, 'auto_upgrade_policy'),
        cluster_type=pulumi.get(__ret__, 'cluster_type'),
        cluster_version=pulumi.get(__ret__, 'cluster_version'),
        default_network_policy=pulumi.get(__ret__, 'default_network_policy'),
        delete_protection=pulumi.get(__ret__, 'delete_protection'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        kubernetes_api_server_ca_certificate=pulumi.get(__ret__, 'kubernetes_api_server_ca_certificate'),
        kubernetes_api_server_endpoint=pulumi.get(__ret__, 'kubernetes_api_server_endpoint'),
        labels=pulumi.get(__ret__, 'labels'),
        maintenance_day=pulumi.get(__ret__, 'maintenance_day'),
        maintenance_start_at=pulumi.get(__ret__, 'maintenance_start_at'),
        name=pulumi.get(__ret__, 'name'),
        networking_cni=pulumi.get(__ret__, 'networking_cni'),
        networking_pod_cidr=pulumi.get(__ret__, 'networking_pod_cidr'),
        networking_service_cidr=pulumi.get(__ret__, 'networking_service_cidr'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        pod_security_standards_profile=pulumi.get(__ret__, 'pod_security_standards_profile'),
        region=pulumi.get(__ret__, 'region'),
        slug=pulumi.get(__ret__, 'slug'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_kubernetes_cluster_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                                  organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKubernetesClusterResult]:
    """
    Get an Kubernetes cluster


    :param _builtins.str name: The name of the Kubernetes version.
    :param _builtins.str organisation_id: Organisation of the Kubernetes Cluster
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getKubernetesCluster:getKubernetesCluster', __args__, opts=opts, typ=GetKubernetesClusterResult)
    return __ret__.apply(lambda __response__: GetKubernetesClusterResult(
        annotations=pulumi.get(__response__, 'annotations'),
        api_server_acls=pulumi.get(__response__, 'api_server_acls'),
        audit_log_profile=pulumi.get(__response__, 'audit_log_profile'),
        auto_upgrade_policy=pulumi.get(__response__, 'auto_upgrade_policy'),
        cluster_type=pulumi.get(__response__, 'cluster_type'),
        cluster_version=pulumi.get(__response__, 'cluster_version'),
        default_network_policy=pulumi.get(__response__, 'default_network_policy'),
        delete_protection=pulumi.get(__response__, 'delete_protection'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        kubernetes_api_server_ca_certificate=pulumi.get(__response__, 'kubernetes_api_server_ca_certificate'),
        kubernetes_api_server_endpoint=pulumi.get(__response__, 'kubernetes_api_server_endpoint'),
        labels=pulumi.get(__response__, 'labels'),
        maintenance_day=pulumi.get(__response__, 'maintenance_day'),
        maintenance_start_at=pulumi.get(__response__, 'maintenance_start_at'),
        name=pulumi.get(__response__, 'name'),
        networking_cni=pulumi.get(__response__, 'networking_cni'),
        networking_pod_cidr=pulumi.get(__response__, 'networking_pod_cidr'),
        networking_service_cidr=pulumi.get(__response__, 'networking_service_cidr'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        pod_security_standards_profile=pulumi.get(__response__, 'pod_security_standards_profile'),
        region=pulumi.get(__response__, 'region'),
        slug=pulumi.get(__response__, 'slug'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
