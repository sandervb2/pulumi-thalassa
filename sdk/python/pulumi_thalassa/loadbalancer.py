# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LoadbalancerArgs', 'Loadbalancer']

@pulumi.input_type
class LoadbalancerArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 internal: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Loadbalancer resource.
        :param pulumi.Input[_builtins.str] region: Region of the Loadbalancer
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Loadbalancer
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Loadbalancer
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection for the Loadbalancer
        :param pulumi.Input[_builtins.str] description: A human readable description about the loadbalancer
        :param pulumi.Input[_builtins.bool] internal: Internal loadbalancer
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Loadbalancer
        :param pulumi.Input[_builtins.str] name: Name of the Loadbalancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Loadbalancer
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Region of the Loadbalancer
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Subnet of the Loadbalancer
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Loadbalancer
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Delete protection for the Loadbalancer
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the loadbalancer
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def internal(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Internal loadbalancer
        """
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "internal", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Loadbalancer
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Loadbalancer
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the Loadbalancer
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)


@pulumi.input_type
class _LoadbalancerState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 external_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 internal: Optional[pulumi.Input[_builtins.bool]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Loadbalancer resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Loadbalancer
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection for the Loadbalancer
        :param pulumi.Input[_builtins.str] description: A human readable description about the loadbalancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] external_ip_addresses: The external IP addresses of the loadbalancer
        :param pulumi.Input[_builtins.bool] internal: Internal loadbalancer
        :param pulumi.Input[_builtins.str] ip_address: The IP address of the loadbalancer
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Loadbalancer
        :param pulumi.Input[_builtins.str] name: Name of the Loadbalancer
        :param pulumi.Input[_builtins.str] region: Region of the Loadbalancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Loadbalancer
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Loadbalancer
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the Loadbalancer
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_ip_addresses is not None:
            pulumi.set(__self__, "external_ip_addresses", external_ip_addresses)
        if internal is not None:
            pulumi.set(__self__, "internal", internal)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Loadbalancer
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Delete protection for the Loadbalancer
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the loadbalancer
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="externalIpAddresses")
    def external_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The external IP addresses of the loadbalancer
        """
        return pulumi.get(self, "external_ip_addresses")

    @external_ip_addresses.setter
    def external_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "external_ip_addresses", value)

    @_builtins.property
    @pulumi.getter
    def internal(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Internal loadbalancer
        """
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "internal", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP address of the loadbalancer
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Loadbalancer
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Loadbalancer
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region of the Loadbalancer
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the Loadbalancer
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet of the Loadbalancer
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC of the Loadbalancer
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("thalassa:index/loadbalancer:Loadbalancer")
class Loadbalancer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 internal: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create an loadbalancer within a VPC

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the loadbalancer
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for loadbalancer",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the loadbalancer
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for loadbalancer",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a loadbalancer with all optional attributes
        example_loadbalancer = thalassa.Loadbalancer("example",
            name="example-loadbalancer",
            subnet_id=example_subnet.id,
            region=example.region,
            description="Example loadbalancer for documentation with optional attributes",
            labels={
                "environment": "production",
                "service": "web",
                "tier": "frontend",
            },
            annotations={
                "cost-center": "cc-12345",
                "ssl-cert": "wildcard.example.com",
                "health-check": "enabled",
            })
        pulumi.export("loadbalancerId", example_loadbalancer.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Loadbalancer
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection for the Loadbalancer
        :param pulumi.Input[_builtins.str] description: A human readable description about the loadbalancer
        :param pulumi.Input[_builtins.bool] internal: Internal loadbalancer
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Loadbalancer
        :param pulumi.Input[_builtins.str] name: Name of the Loadbalancer
        :param pulumi.Input[_builtins.str] region: Region of the Loadbalancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Loadbalancer
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Loadbalancer
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadbalancerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create an loadbalancer within a VPC

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the loadbalancer
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for loadbalancer",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the loadbalancer
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for loadbalancer",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a loadbalancer with all optional attributes
        example_loadbalancer = thalassa.Loadbalancer("example",
            name="example-loadbalancer",
            subnet_id=example_subnet.id,
            region=example.region,
            description="Example loadbalancer for documentation with optional attributes",
            labels={
                "environment": "production",
                "service": "web",
                "tier": "frontend",
            },
            annotations={
                "cost-center": "cc-12345",
                "ssl-cert": "wildcard.example.com",
                "health-check": "enabled",
            })
        pulumi.export("loadbalancerId", example_loadbalancer.id)
        ```

        :param str resource_name: The name of the resource.
        :param LoadbalancerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadbalancerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 internal: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadbalancerArgs.__new__(LoadbalancerArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["delete_protection"] = delete_protection
            __props__.__dict__["description"] = description
            __props__.__dict__["internal"] = internal
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["security_group_attachments"] = security_group_attachments
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["external_ip_addresses"] = None
            __props__.__dict__["ip_address"] = None
            __props__.__dict__["slug"] = None
            __props__.__dict__["vpc_id"] = None
        super(Loadbalancer, __self__).__init__(
            'thalassa:index/loadbalancer:Loadbalancer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            external_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            internal: Optional[pulumi.Input[_builtins.bool]] = None,
            ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Loadbalancer':
        """
        Get an existing Loadbalancer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Loadbalancer
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection for the Loadbalancer
        :param pulumi.Input[_builtins.str] description: A human readable description about the loadbalancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] external_ip_addresses: The external IP addresses of the loadbalancer
        :param pulumi.Input[_builtins.bool] internal: Internal loadbalancer
        :param pulumi.Input[_builtins.str] ip_address: The IP address of the loadbalancer
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Loadbalancer
        :param pulumi.Input[_builtins.str] name: Name of the Loadbalancer
        :param pulumi.Input[_builtins.str] region: Region of the Loadbalancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Loadbalancer
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Loadbalancer
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the Loadbalancer
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadbalancerState.__new__(_LoadbalancerState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["delete_protection"] = delete_protection
        __props__.__dict__["description"] = description
        __props__.__dict__["external_ip_addresses"] = external_ip_addresses
        __props__.__dict__["internal"] = internal
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["region"] = region
        __props__.__dict__["security_group_attachments"] = security_group_attachments
        __props__.__dict__["slug"] = slug
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vpc_id"] = vpc_id
        return Loadbalancer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the Loadbalancer
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Delete protection for the Loadbalancer
        """
        return pulumi.get(self, "delete_protection")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A human readable description about the loadbalancer
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="externalIpAddresses")
    def external_ip_addresses(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The external IP addresses of the loadbalancer
        """
        return pulumi.get(self, "external_ip_addresses")

    @_builtins.property
    @pulumi.getter
    def internal(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Internal loadbalancer
        """
        return pulumi.get(self, "internal")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        The IP address of the loadbalancer
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the Loadbalancer
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Loadbalancer
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Region of the Loadbalancer
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List identities of security group that will be attached to the Loadbalancer
        """
        return pulumi.get(self, "security_group_attachments")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Subnet of the Loadbalancer
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        VPC of the Loadbalancer
        """
        return pulumi.get(self, "vpc_id")

