# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DbaasPgDatabaseArgs', 'DbaasPgDatabase']

@pulumi.input_type
class DbaasPgDatabaseArgs:
    def __init__(__self__, *,
                 db_cluster_id: pulumi.Input[_builtins.str],
                 owner_role_id: pulumi.Input[_builtins.str],
                 connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DbaasPgDatabase resource.
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database cluster
        :param pulumi.Input[_builtins.str] owner_role_id: The ID of the owner role
        :param pulumi.Input[_builtins.int] connection_limit: The connection limit of the database
        :param pulumi.Input[_builtins.str] name: The name of the database
        """
        pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        pulumi.set(__self__, "owner_role_id", owner_role_id)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the database cluster
        """
        return pulumi.get(self, "db_cluster_id")

    @db_cluster_id.setter
    def db_cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "db_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="ownerRoleId")
    def owner_role_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the owner role
        """
        return pulumi.get(self, "owner_role_id")

    @owner_role_id.setter
    def owner_role_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "owner_role_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The connection limit of the database
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "connection_limit", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)


@pulumi.input_type
class _DbaasPgDatabaseState:
    def __init__(__self__, *,
                 connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_role_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DbaasPgDatabase resources.
        :param pulumi.Input[_builtins.int] connection_limit: The connection limit of the database
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database cluster
        :param pulumi.Input[_builtins.str] name: The name of the database
        :param pulumi.Input[_builtins.str] owner_role_id: The ID of the owner role
        """
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if db_cluster_id is not None:
            pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if owner_role_id is not None:
            pulumi.set(__self__, "owner_role_id", owner_role_id)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The connection limit of the database
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "connection_limit", value)

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the database cluster
        """
        return pulumi.get(self, "db_cluster_id")

    @db_cluster_id.setter
    def db_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the database
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="ownerRoleId")
    def owner_role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the owner role
        """
        return pulumi.get(self, "owner_role_id")

    @owner_role_id.setter
    def owner_role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner_role_id", value)


@pulumi.type_token("thalassa:index/dbaasPgDatabase:DbaasPgDatabase")
class DbaasPgDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a PostgreSQL database

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the database cluster
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for database cluster",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the database cluster
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for database cluster",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a database cluster for the PostgreSQL database
        example_dbaas_db_cluster = thalassa.DbaasDbCluster("example",
            name="example-db-cluster",
            description="Example database cluster for PostgreSQL database",
            subnet_id=example_subnet.id,
            database_instance_type="db-pgp-small",
            engine="postgres",
            engine_version="15.13",
            allocated_storage=100,
            volume_type_class="block")
        # Create PostgreSQL roles first
        example_dbaas_pg_roles = thalassa.DbaasPgRoles("example",
            db_cluster_id=example_dbaas_db_cluster.id,
            name="myrole",
            password="secure_password_123")
        # Create a PostgreSQL database with Thalassa default values
        example_dbaas_pg_database = thalassa.DbaasPgDatabase("example",
            name="mydatabase2",
            db_cluster_id=example_dbaas_db_cluster.id,
            owner_role_id=example_dbaas_pg_roles.id)
        pulumi.export("pgDatabaseId", example_dbaas_pg_database.id)
        pulumi.export("pgDatabaseName", example_dbaas_pg_database.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] connection_limit: The connection limit of the database
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database cluster
        :param pulumi.Input[_builtins.str] name: The name of the database
        :param pulumi.Input[_builtins.str] owner_role_id: The ID of the owner role
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbaasPgDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PostgreSQL database

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the database cluster
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for database cluster",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the database cluster
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for database cluster",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a database cluster for the PostgreSQL database
        example_dbaas_db_cluster = thalassa.DbaasDbCluster("example",
            name="example-db-cluster",
            description="Example database cluster for PostgreSQL database",
            subnet_id=example_subnet.id,
            database_instance_type="db-pgp-small",
            engine="postgres",
            engine_version="15.13",
            allocated_storage=100,
            volume_type_class="block")
        # Create PostgreSQL roles first
        example_dbaas_pg_roles = thalassa.DbaasPgRoles("example",
            db_cluster_id=example_dbaas_db_cluster.id,
            name="myrole",
            password="secure_password_123")
        # Create a PostgreSQL database with Thalassa default values
        example_dbaas_pg_database = thalassa.DbaasPgDatabase("example",
            name="mydatabase2",
            db_cluster_id=example_dbaas_db_cluster.id,
            owner_role_id=example_dbaas_pg_roles.id)
        pulumi.export("pgDatabaseId", example_dbaas_pg_database.id)
        pulumi.export("pgDatabaseName", example_dbaas_pg_database.name)
        ```

        :param str resource_name: The name of the resource.
        :param DbaasPgDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbaasPgDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbaasPgDatabaseArgs.__new__(DbaasPgDatabaseArgs)

            __props__.__dict__["connection_limit"] = connection_limit
            if db_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'db_cluster_id'")
            __props__.__dict__["db_cluster_id"] = db_cluster_id
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            if owner_role_id is None and not opts.urn:
                raise TypeError("Missing required property 'owner_role_id'")
            __props__.__dict__["owner_role_id"] = owner_role_id
        super(DbaasPgDatabase, __self__).__init__(
            'thalassa:index/dbaasPgDatabase:DbaasPgDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_limit: Optional[pulumi.Input[_builtins.int]] = None,
            db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            owner_role_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DbaasPgDatabase':
        """
        Get an existing DbaasPgDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] connection_limit: The connection limit of the database
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database cluster
        :param pulumi.Input[_builtins.str] name: The name of the database
        :param pulumi.Input[_builtins.str] owner_role_id: The ID of the owner role
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbaasPgDatabaseState.__new__(_DbaasPgDatabaseState)

        __props__.__dict__["connection_limit"] = connection_limit
        __props__.__dict__["db_cluster_id"] = db_cluster_id
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["owner_role_id"] = owner_role_id
        return DbaasPgDatabase(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The connection limit of the database
        """
        return pulumi.get(self, "connection_limit")

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the database cluster
        """
        return pulumi.get(self, "db_cluster_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the database
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="ownerRoleId")
    def owner_role_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the owner role
        """
        return pulumi.get(self, "owner_role_id")

