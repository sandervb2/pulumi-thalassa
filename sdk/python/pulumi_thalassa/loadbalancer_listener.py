# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LoadbalancerListenerArgs', 'LoadbalancerListener']

@pulumi.input_type
class LoadbalancerListenerArgs:
    def __init__(__self__, *,
                 loadbalancer_id: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.int],
                 protocol: pulumi.Input[_builtins.str],
                 target_group_id: pulumi.Input[_builtins.str],
                 allowed_sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 connection_idle_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 max_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LoadbalancerListener resource.
        :param pulumi.Input[_builtins.str] loadbalancer_id: The ID of the loadbalancer to create the listener on
        :param pulumi.Input[_builtins.int] port: The port the listener is listening on
        :param pulumi.Input[_builtins.str] protocol: The protocol the listener is using
        :param pulumi.Input[_builtins.str] target_group_id: The ID of the target group to attach to the listener
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_sources: A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Loadbalancer Listener
        :param pulumi.Input[_builtins.int] connection_idle_timeout: The amount of seconds used for configuring the idle connection timeout on a listener
        :param pulumi.Input[_builtins.str] description: A human readable description about the loadbalancer listener
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Loadbalancer Listener
        :param pulumi.Input[_builtins.int] max_connections: The maximum number of connections that the listener can handle
        :param pulumi.Input[_builtins.str] name: Name of the Loadbalancer Listener
        """
        pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_group_id", target_group_id)
        if allowed_sources is not None:
            pulumi.set(__self__, "allowed_sources", allowed_sources)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if connection_idle_timeout is not None:
            pulumi.set(__self__, "connection_idle_timeout", connection_idle_timeout)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the loadbalancer to create the listener on
        """
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "loadbalancer_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        The port the listener is listening on
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        The protocol the listener is using
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the target group to attach to the listener
        """
        return pulumi.get(self, "target_group_id")

    @target_group_id.setter
    def target_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_group_id", value)

    @_builtins.property
    @pulumi.getter(name="allowedSources")
    def allowed_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        """
        return pulumi.get(self, "allowed_sources")

    @allowed_sources.setter
    def allowed_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_sources", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Loadbalancer Listener
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="connectionIdleTimeout")
    def connection_idle_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The amount of seconds used for configuring the idle connection timeout on a listener
        """
        return pulumi.get(self, "connection_idle_timeout")

    @connection_idle_timeout.setter
    def connection_idle_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "connection_idle_timeout", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the loadbalancer listener
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Loadbalancer Listener
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum number of connections that the listener can handle
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_connections", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Loadbalancer Listener
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)


@pulumi.input_type
class _LoadbalancerListenerState:
    def __init__(__self__, *,
                 allowed_sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 connection_idle_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 loadbalancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 target_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LoadbalancerListener resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_sources: A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Loadbalancer Listener
        :param pulumi.Input[_builtins.int] connection_idle_timeout: The amount of seconds used for configuring the idle connection timeout on a listener
        :param pulumi.Input[_builtins.str] description: A human readable description about the loadbalancer listener
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Loadbalancer Listener
        :param pulumi.Input[_builtins.str] loadbalancer_id: The ID of the loadbalancer to create the listener on
        :param pulumi.Input[_builtins.int] max_connections: The maximum number of connections that the listener can handle
        :param pulumi.Input[_builtins.str] name: Name of the Loadbalancer Listener
        :param pulumi.Input[_builtins.int] port: The port the listener is listening on
        :param pulumi.Input[_builtins.str] protocol: The protocol the listener is using
        :param pulumi.Input[_builtins.str] target_group_id: The ID of the target group to attach to the listener
        """
        if allowed_sources is not None:
            pulumi.set(__self__, "allowed_sources", allowed_sources)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if connection_idle_timeout is not None:
            pulumi.set(__self__, "connection_idle_timeout", connection_idle_timeout)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if loadbalancer_id is not None:
            pulumi.set(__self__, "loadbalancer_id", loadbalancer_id)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if target_group_id is not None:
            pulumi.set(__self__, "target_group_id", target_group_id)

    @_builtins.property
    @pulumi.getter(name="allowedSources")
    def allowed_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        """
        return pulumi.get(self, "allowed_sources")

    @allowed_sources.setter
    def allowed_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_sources", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Loadbalancer Listener
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="connectionIdleTimeout")
    def connection_idle_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The amount of seconds used for configuring the idle connection timeout on a listener
        """
        return pulumi.get(self, "connection_idle_timeout")

    @connection_idle_timeout.setter
    def connection_idle_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "connection_idle_timeout", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the loadbalancer listener
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Loadbalancer Listener
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the loadbalancer to create the listener on
        """
        return pulumi.get(self, "loadbalancer_id")

    @loadbalancer_id.setter
    def loadbalancer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loadbalancer_id", value)

    @_builtins.property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum number of connections that the listener can handle
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_connections", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Loadbalancer Listener
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The port the listener is listening on
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol the listener is using
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the target group to attach to the listener
        """
        return pulumi.get(self, "target_group_id")

    @target_group_id.setter
    def target_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_group_id", value)


@pulumi.type_token("thalassa:index/loadbalancerListener:LoadbalancerListener")
class LoadbalancerListener(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 connection_idle_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 loadbalancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 target_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a listener for a loadbalancer

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the load balancer
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for load balancer listener",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the loadbalancer
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for loadbalancer",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a load balancer
        example_loadbalancer = thalassa.Loadbalancer("example",
            name="example-loadbalancer",
            description="Example load balancer for listener",
            subnet_id=example_subnet.id,
            region="nl-01")
        # Create a target group for the listener
        example_target_group = thalassa.TargetGroup("example",
            name="example-target-group",
            description="Example target group for listener",
            vpc_id=example.id,
            protocol="tcp",
            port=80)
        # Create a load balancer listener with all required attributes
        example_loadbalancer_listener = thalassa.LoadbalancerListener("example",
            loadbalancer_id=example_loadbalancer.id,
            name="example-listener",
            protocol="tcp",
            port=80,
            target_group_id=example_target_group.id)
        pulumi.export("listenerId", example_loadbalancer_listener.id)
        pulumi.export("listenerName", example_loadbalancer_listener.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_sources: A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Loadbalancer Listener
        :param pulumi.Input[_builtins.int] connection_idle_timeout: The amount of seconds used for configuring the idle connection timeout on a listener
        :param pulumi.Input[_builtins.str] description: A human readable description about the loadbalancer listener
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Loadbalancer Listener
        :param pulumi.Input[_builtins.str] loadbalancer_id: The ID of the loadbalancer to create the listener on
        :param pulumi.Input[_builtins.int] max_connections: The maximum number of connections that the listener can handle
        :param pulumi.Input[_builtins.str] name: Name of the Loadbalancer Listener
        :param pulumi.Input[_builtins.int] port: The port the listener is listening on
        :param pulumi.Input[_builtins.str] protocol: The protocol the listener is using
        :param pulumi.Input[_builtins.str] target_group_id: The ID of the target group to attach to the listener
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadbalancerListenerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a listener for a loadbalancer

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the load balancer
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for load balancer listener",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the loadbalancer
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for loadbalancer",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a load balancer
        example_loadbalancer = thalassa.Loadbalancer("example",
            name="example-loadbalancer",
            description="Example load balancer for listener",
            subnet_id=example_subnet.id,
            region="nl-01")
        # Create a target group for the listener
        example_target_group = thalassa.TargetGroup("example",
            name="example-target-group",
            description="Example target group for listener",
            vpc_id=example.id,
            protocol="tcp",
            port=80)
        # Create a load balancer listener with all required attributes
        example_loadbalancer_listener = thalassa.LoadbalancerListener("example",
            loadbalancer_id=example_loadbalancer.id,
            name="example-listener",
            protocol="tcp",
            port=80,
            target_group_id=example_target_group.id)
        pulumi.export("listenerId", example_loadbalancer_listener.id)
        pulumi.export("listenerName", example_loadbalancer_listener.name)
        ```

        :param str resource_name: The name of the resource.
        :param LoadbalancerListenerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadbalancerListenerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 connection_idle_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 loadbalancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_connections: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 target_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadbalancerListenerArgs.__new__(LoadbalancerListenerArgs)

            __props__.__dict__["allowed_sources"] = allowed_sources
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["connection_idle_timeout"] = connection_idle_timeout
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            if loadbalancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'loadbalancer_id'")
            __props__.__dict__["loadbalancer_id"] = loadbalancer_id
            __props__.__dict__["max_connections"] = max_connections
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if target_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_group_id'")
            __props__.__dict__["target_group_id"] = target_group_id
            __props__.__dict__["slug"] = None
        super(LoadbalancerListener, __self__).__init__(
            'thalassa:index/loadbalancerListener:LoadbalancerListener',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_sources: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            connection_idle_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            loadbalancer_id: Optional[pulumi.Input[_builtins.str]] = None,
            max_connections: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.int]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            target_group_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'LoadbalancerListener':
        """
        Get an existing LoadbalancerListener resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_sources: A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Loadbalancer Listener
        :param pulumi.Input[_builtins.int] connection_idle_timeout: The amount of seconds used for configuring the idle connection timeout on a listener
        :param pulumi.Input[_builtins.str] description: A human readable description about the loadbalancer listener
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Loadbalancer Listener
        :param pulumi.Input[_builtins.str] loadbalancer_id: The ID of the loadbalancer to create the listener on
        :param pulumi.Input[_builtins.int] max_connections: The maximum number of connections that the listener can handle
        :param pulumi.Input[_builtins.str] name: Name of the Loadbalancer Listener
        :param pulumi.Input[_builtins.int] port: The port the listener is listening on
        :param pulumi.Input[_builtins.str] protocol: The protocol the listener is using
        :param pulumi.Input[_builtins.str] target_group_id: The ID of the target group to attach to the listener
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadbalancerListenerState.__new__(_LoadbalancerListenerState)

        __props__.__dict__["allowed_sources"] = allowed_sources
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["connection_idle_timeout"] = connection_idle_timeout
        __props__.__dict__["description"] = description
        __props__.__dict__["labels"] = labels
        __props__.__dict__["loadbalancer_id"] = loadbalancer_id
        __props__.__dict__["max_connections"] = max_connections
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["slug"] = slug
        __props__.__dict__["target_group_id"] = target_group_id
        return LoadbalancerListener(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowedSources")
    def allowed_sources(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        A list of CIDR blocks or IP addresses that are allowed to connect to the listener
        """
        return pulumi.get(self, "allowed_sources")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the Loadbalancer Listener
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="connectionIdleTimeout")
    def connection_idle_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The amount of seconds used for configuring the idle connection timeout on a listener
        """
        return pulumi.get(self, "connection_idle_timeout")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A human readable description about the loadbalancer listener
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the Loadbalancer Listener
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="loadbalancerId")
    def loadbalancer_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the loadbalancer to create the listener on
        """
        return pulumi.get(self, "loadbalancer_id")

    @_builtins.property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The maximum number of connections that the listener can handle
        """
        return pulumi.get(self, "max_connections")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Loadbalancer Listener
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.int]:
        """
        The port the listener is listening on
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        The protocol the listener is using
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the target group to attach to the listener
        """
        return pulumi.get(self, "target_group_id")

