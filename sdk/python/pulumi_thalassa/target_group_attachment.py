# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TargetGroupAttachmentInitArgs', 'TargetGroupAttachment']

@pulumi.input_type
class TargetGroupAttachmentInitArgs:
    def __init__(__self__, *,
                 target_group_id: pulumi.Input[_builtins.str],
                 vmi_id: pulumi.Input[_builtins.str],
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a TargetGroupAttachment resource.
        :param pulumi.Input[_builtins.str] target_group_id: The ID of the target group to attach to
        :param pulumi.Input[_builtins.str] vmi_id: The ID of the Virtual Machine Instance to attach
        """
        pulumi.set(__self__, "target_group_id", target_group_id)
        pulumi.set(__self__, "vmi_id", vmi_id)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)

    @_builtins.property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the target group to attach to
        """
        return pulumi.get(self, "target_group_id")

    @target_group_id.setter
    def target_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_group_id", value)

    @_builtins.property
    @pulumi.getter(name="vmiId")
    def vmi_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Virtual Machine Instance to attach
        """
        return pulumi.get(self, "vmi_id")

    @vmi_id.setter
    def vmi_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vmi_id", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)


@pulumi.input_type
class _TargetGroupAttachmentState:
    def __init__(__self__, *,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vmi_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TargetGroupAttachment resources.
        :param pulumi.Input[_builtins.str] target_group_id: The ID of the target group to attach to
        :param pulumi.Input[_builtins.str] vmi_id: The ID of the Virtual Machine Instance to attach
        """
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if target_group_id is not None:
            pulumi.set(__self__, "target_group_id", target_group_id)
        if vmi_id is not None:
            pulumi.set(__self__, "vmi_id", vmi_id)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the target group to attach to
        """
        return pulumi.get(self, "target_group_id")

    @target_group_id.setter
    def target_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_group_id", value)

    @_builtins.property
    @pulumi.getter(name="vmiId")
    def vmi_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Virtual Machine Instance to attach
        """
        return pulumi.get(self, "vmi_id")

    @vmi_id.setter
    def vmi_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vmi_id", value)


@pulumi.type_token("thalassa:index/targetGroupAttachment:TargetGroupAttachment")
class TargetGroupAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vmi_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Attach a Virtual Machine Instance to a target group

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the resources
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for target group attachment",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the resources
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for target group attachment",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a target group
        example_target_group = thalassa.TargetGroup("example",
            name="example-target-group",
            description="Example target group for attachment",
            vpc_id=example.id,
            protocol="tcp",
            port=80)
        # Create a virtual machine instance
        example_virtual_machine_instance = thalassa.VirtualMachineInstance("example",
            name="example-instance",
            subnet_id=example_subnet.id,
            machine_type="pgp-small",
            machine_image="ubuntu-22.04",
            availability_zone="nl-01a",
            root_volume_size_gb=20,
            root_volume_type="Block")
        # Create a target group attachment with all required attributes
        example_target_group_attachment = thalassa.TargetGroupAttachment("example",
            target_group_id=example_target_group.id,
            vmi_id=example_virtual_machine_instance.id)
        pulumi.export("attachmentId", example_target_group_attachment.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] target_group_id: The ID of the target group to attach to
        :param pulumi.Input[_builtins.str] vmi_id: The ID of the Virtual Machine Instance to attach
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TargetGroupAttachmentInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Attach a Virtual Machine Instance to a target group

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the resources
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for target group attachment",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the resources
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for target group attachment",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a target group
        example_target_group = thalassa.TargetGroup("example",
            name="example-target-group",
            description="Example target group for attachment",
            vpc_id=example.id,
            protocol="tcp",
            port=80)
        # Create a virtual machine instance
        example_virtual_machine_instance = thalassa.VirtualMachineInstance("example",
            name="example-instance",
            subnet_id=example_subnet.id,
            machine_type="pgp-small",
            machine_image="ubuntu-22.04",
            availability_zone="nl-01a",
            root_volume_size_gb=20,
            root_volume_type="Block")
        # Create a target group attachment with all required attributes
        example_target_group_attachment = thalassa.TargetGroupAttachment("example",
            target_group_id=example_target_group.id,
            vmi_id=example_virtual_machine_instance.id)
        pulumi.export("attachmentId", example_target_group_attachment.id)
        ```

        :param str resource_name: The name of the resource.
        :param TargetGroupAttachmentInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TargetGroupAttachmentInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vmi_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TargetGroupAttachmentInitArgs.__new__(TargetGroupAttachmentInitArgs)

            __props__.__dict__["organisation_id"] = organisation_id
            if target_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_group_id'")
            __props__.__dict__["target_group_id"] = target_group_id
            if vmi_id is None and not opts.urn:
                raise TypeError("Missing required property 'vmi_id'")
            __props__.__dict__["vmi_id"] = vmi_id
        super(TargetGroupAttachment, __self__).__init__(
            'thalassa:index/targetGroupAttachment:TargetGroupAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            vmi_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'TargetGroupAttachment':
        """
        Get an existing TargetGroupAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] target_group_id: The ID of the target group to attach to
        :param pulumi.Input[_builtins.str] vmi_id: The ID of the Virtual Machine Instance to attach
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TargetGroupAttachmentState.__new__(_TargetGroupAttachmentState)

        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["target_group_id"] = target_group_id
        __props__.__dict__["vmi_id"] = vmi_id
        return TargetGroupAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the target group to attach to
        """
        return pulumi.get(self, "target_group_id")

    @_builtins.property
    @pulumi.getter(name="vmiId")
    def vmi_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Virtual Machine Instance to attach
        """
        return pulumi.get(self, "vmi_id")

