# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetObjectstorageBucketResult',
    'AwaitableGetObjectstorageBucketResult',
    'get_objectstorage_bucket',
    'get_objectstorage_bucket_output',
]

@pulumi.output_type
class GetObjectstorageBucketResult:
    """
    A collection of values returned by getObjectstorageBucket.
    """
    def __init__(__self__, endpoint=None, id=None, name=None, organisation_id=None, policy=None, public=None, region=None, status=None):
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if policy and not isinstance(policy, str):
            raise TypeError("Expected argument 'policy' to be a str")
        pulumi.set(__self__, "policy", policy)
        if public and not isinstance(public, bool):
            raise TypeError("Expected argument 'public' to be a bool")
        pulumi.set(__self__, "public", public)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The endpoint URL for the bucket
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Identity of the bucket
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the bucket
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        The bucket policy as a JSON string
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter
    def public(self) -> _builtins.bool:
        """
        Whether the bucket is publicly accessible
        """
        return pulumi.get(self, "public")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        Region of the bucket
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of the bucket
        """
        return pulumi.get(self, "status")


class AwaitableGetObjectstorageBucketResult(GetObjectstorageBucketResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetObjectstorageBucketResult(
            endpoint=self.endpoint,
            id=self.id,
            name=self.name,
            organisation_id=self.organisation_id,
            policy=self.policy,
            public=self.public,
            region=self.region,
            status=self.status)


def get_objectstorage_bucket(name: Optional[_builtins.str] = None,
                             organisation_id: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetObjectstorageBucketResult:
    """
    Get an object storage bucket


    :param _builtins.str name: Name of the bucket
    :param _builtins.str region: Region of the bucket
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getObjectstorageBucket:getObjectstorageBucket', __args__, opts=opts, typ=GetObjectstorageBucketResult).value

    return AwaitableGetObjectstorageBucketResult(
        endpoint=pulumi.get(__ret__, 'endpoint'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        policy=pulumi.get(__ret__, 'policy'),
        public=pulumi.get(__ret__, 'public'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_objectstorage_bucket_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                                    organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetObjectstorageBucketResult]:
    """
    Get an object storage bucket


    :param _builtins.str name: Name of the bucket
    :param _builtins.str region: Region of the bucket
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getObjectstorageBucket:getObjectstorageBucket', __args__, opts=opts, typ=GetObjectstorageBucketResult)
    return __ret__.apply(lambda __response__: GetObjectstorageBucketResult(
        endpoint=pulumi.get(__response__, 'endpoint'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        policy=pulumi.get(__response__, 'policy'),
        public=pulumi.get(__response__, 'public'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
