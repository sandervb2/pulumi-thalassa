# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'KubernetesClusterApiServerAcl',
    'KubernetesNodePoolNodeTaint',
    'SecurityGroupEgressRule',
    'SecurityGroupIngressRule',
    'TargetGroupAttachment',
    'GetKubernetesClusterApiServerAclResult',
    'GetRegionsRegionResult',
    'GetSecurityGroupEgressRuleResult',
    'GetSecurityGroupIngressRuleResult',
]

@pulumi.output_type
class KubernetesClusterApiServerAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedCidrs":
            suggest = "allowed_cidrs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterApiServerAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterApiServerAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterApiServerAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_cidrs: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] allowed_cidrs: List of allowed CIDRs for API server access
        """
        if allowed_cidrs is not None:
            pulumi.set(__self__, "allowed_cidrs", allowed_cidrs)

    @_builtins.property
    @pulumi.getter(name="allowedCidrs")
    def allowed_cidrs(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of allowed CIDRs for API server access
        """
        return pulumi.get(self, "allowed_cidrs")


@pulumi.output_type
class KubernetesNodePoolNodeTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str effect: Effect of the taint
        :param _builtins.str key: Key of the taint
        :param _builtins.str operator: Operator of the taint
        :param _builtins.str value: Value of the taint. Optional.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        """
        Effect of the taint
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Key of the taint
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        """
        Operator of the taint
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Value of the taint. Optional.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SecurityGroupEgressRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVersion":
            suggest = "ip_version"
        elif key == "remoteType":
            suggest = "remote_type"
        elif key == "portRangeMax":
            suggest = "port_range_max"
        elif key == "portRangeMin":
            suggest = "port_range_min"
        elif key == "remoteAddress":
            suggest = "remote_address"
        elif key == "remoteSecurityGroupIdentity":
            suggest = "remote_security_group_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupEgressRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupEgressRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupEgressRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_version: _builtins.str,
                 name: _builtins.str,
                 policy: _builtins.str,
                 priority: _builtins.int,
                 protocol: _builtins.str,
                 remote_type: _builtins.str,
                 port_range_max: Optional[_builtins.int] = None,
                 port_range_min: Optional[_builtins.int] = None,
                 remote_address: Optional[_builtins.str] = None,
                 remote_security_group_identity: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_version: IP version of the rule (ipv4 or ipv6)
        :param _builtins.str name: Name of the rule
        :param _builtins.str policy: Policy of the rule (allow or drop)
        :param _builtins.int priority: Priority of the rule. Must be greater than 0 and less than 200.
        :param _builtins.str protocol: Protocol of the rule (all, tcp, udp, icmp)
        :param _builtins.str remote_type: Type of the remote address (address or securityGroup)
        :param _builtins.int port_range_max: Maximum port of the rule. Must be greater than 0 and less than 65535.
        :param _builtins.int port_range_min: Minimum port of the rule. Must be greater than 0 and less than 65535.
        :param _builtins.str remote_address: IP address or CIDR block that the rule applies to
        :param _builtins.str remote_security_group_identity: Identity of the security group that the rule applies to
        """
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_type", remote_type)
        if port_range_max is not None:
            pulumi.set(__self__, "port_range_max", port_range_max)
        if port_range_min is not None:
            pulumi.set(__self__, "port_range_min", port_range_min)
        if remote_address is not None:
            pulumi.set(__self__, "remote_address", remote_address)
        if remote_security_group_identity is not None:
            pulumi.set(__self__, "remote_security_group_identity", remote_security_group_identity)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        IP version of the rule (ipv4 or ipv6)
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the rule
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        Policy of the rule (allow or drop)
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Priority of the rule. Must be greater than 0 and less than 200.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol of the rule (all, tcp, udp, icmp)
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteType")
    def remote_type(self) -> _builtins.str:
        """
        Type of the remote address (address or securityGroup)
        """
        return pulumi.get(self, "remote_type")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> Optional[_builtins.int]:
        """
        Maximum port of the rule. Must be greater than 0 and less than 65535.
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> Optional[_builtins.int]:
        """
        Minimum port of the rule. Must be greater than 0 and less than 65535.
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> Optional[_builtins.str]:
        """
        IP address or CIDR block that the rule applies to
        """
        return pulumi.get(self, "remote_address")

    @_builtins.property
    @pulumi.getter(name="remoteSecurityGroupIdentity")
    def remote_security_group_identity(self) -> Optional[_builtins.str]:
        """
        Identity of the security group that the rule applies to
        """
        return pulumi.get(self, "remote_security_group_identity")


@pulumi.output_type
class SecurityGroupIngressRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVersion":
            suggest = "ip_version"
        elif key == "remoteType":
            suggest = "remote_type"
        elif key == "portRangeMax":
            suggest = "port_range_max"
        elif key == "portRangeMin":
            suggest = "port_range_min"
        elif key == "remoteAddress":
            suggest = "remote_address"
        elif key == "remoteSecurityGroupIdentity":
            suggest = "remote_security_group_identity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupIngressRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupIngressRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupIngressRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_version: _builtins.str,
                 name: _builtins.str,
                 policy: _builtins.str,
                 priority: _builtins.int,
                 protocol: _builtins.str,
                 remote_type: _builtins.str,
                 port_range_max: Optional[_builtins.int] = None,
                 port_range_min: Optional[_builtins.int] = None,
                 remote_address: Optional[_builtins.str] = None,
                 remote_security_group_identity: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip_version: IP version of the rule (ipv4 or ipv6)
        :param _builtins.str name: Name of the rule
        :param _builtins.str policy: Policy of the rule (allow or drop)
        :param _builtins.int priority: Priority of the rule. Must be greater than 0 and less than 200.
        :param _builtins.str protocol: Protocol of the rule (all, tcp, udp, icmp)
        :param _builtins.str remote_type: Type of the remote address (address or securityGroup)
        :param _builtins.int port_range_max: Maximum port of the rule. Must be greater than 0 and less than 65535.
        :param _builtins.int port_range_min: Minimum port of the rule. Must be greater than 0 and less than 65535.
        :param _builtins.str remote_address: IP address or CIDR block that the rule applies to
        :param _builtins.str remote_security_group_identity: Identity of the security group that the rule applies to
        """
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_type", remote_type)
        if port_range_max is not None:
            pulumi.set(__self__, "port_range_max", port_range_max)
        if port_range_min is not None:
            pulumi.set(__self__, "port_range_min", port_range_min)
        if remote_address is not None:
            pulumi.set(__self__, "remote_address", remote_address)
        if remote_security_group_identity is not None:
            pulumi.set(__self__, "remote_security_group_identity", remote_security_group_identity)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        IP version of the rule (ipv4 or ipv6)
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the rule
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        Policy of the rule (allow or drop)
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Priority of the rule. Must be greater than 0 and less than 200.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol of the rule (all, tcp, udp, icmp)
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteType")
    def remote_type(self) -> _builtins.str:
        """
        Type of the remote address (address or securityGroup)
        """
        return pulumi.get(self, "remote_type")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> Optional[_builtins.int]:
        """
        Maximum port of the rule. Must be greater than 0 and less than 65535.
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> Optional[_builtins.int]:
        """
        Minimum port of the rule. Must be greater than 0 and less than 65535.
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> Optional[_builtins.str]:
        """
        IP address or CIDR block that the rule applies to
        """
        return pulumi.get(self, "remote_address")

    @_builtins.property
    @pulumi.getter(name="remoteSecurityGroupIdentity")
    def remote_security_group_identity(self) -> Optional[_builtins.str]:
        """
        Identity of the security group that the rule applies to
        """
        return pulumi.get(self, "remote_security_group_identity")


@pulumi.output_type
class TargetGroupAttachment(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The ID of the target (e.g. instance ID)
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the target (e.g. instance ID)
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetKubernetesClusterApiServerAclResult(dict):
    def __init__(__self__, *,
                 allowed_cidrs: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] allowed_cidrs: List of allowed CIDRs for API server access
        """
        pulumi.set(__self__, "allowed_cidrs", allowed_cidrs)

    @_builtins.property
    @pulumi.getter(name="allowedCidrs")
    def allowed_cidrs(self) -> Sequence[_builtins.str]:
        """
        List of allowed CIDRs for API server access
        """
        return pulumi.get(self, "allowed_cidrs")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 id: _builtins.str,
                 labels: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 slug: _builtins.str):
        """
        :param Mapping[str, _builtins.str] annotations: The annotations of the region.
        :param _builtins.str description: The description of the region.
        :param _builtins.str id: The identity of the region.
        :param Mapping[str, _builtins.str] labels: The labels of the region.
        :param _builtins.str name: The name of the region.
        :param _builtins.str slug: The slug of the region.
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        The annotations of the region.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the region.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The identity of the region.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        """
        The labels of the region.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the region.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetSecurityGroupEgressRuleResult(dict):
    def __init__(__self__, *,
                 ip_version: _builtins.str,
                 name: _builtins.str,
                 policy: _builtins.str,
                 port_range_max: _builtins.int,
                 port_range_min: _builtins.int,
                 priority: _builtins.int,
                 protocol: _builtins.str,
                 remote_address: _builtins.str,
                 remote_security_group_identity: _builtins.str,
                 remote_type: _builtins.str):
        """
        :param _builtins.str ip_version: IP version of the rule (ipv4 or ipv6)
        :param _builtins.str name: Name of the rule
        :param _builtins.str policy: Policy of the rule (allow or drop)
        :param _builtins.int port_range_max: Maximum port of the rule
        :param _builtins.int port_range_min: Minimum port of the rule
        :param _builtins.int priority: Priority of the rule
        :param _builtins.str protocol: Protocol of the rule (all, tcp, udp, icmp)
        :param _builtins.str remote_address: IP address or CIDR block that the rule applies to
        :param _builtins.str remote_security_group_identity: Identity of the security group that the rule applies to
        :param _builtins.str remote_type: Type of the remote address (address or securityGroup)
        """
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "port_range_max", port_range_max)
        pulumi.set(__self__, "port_range_min", port_range_min)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_address", remote_address)
        pulumi.set(__self__, "remote_security_group_identity", remote_security_group_identity)
        pulumi.set(__self__, "remote_type", remote_type)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        IP version of the rule (ipv4 or ipv6)
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the rule
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        Policy of the rule (allow or drop)
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> _builtins.int:
        """
        Maximum port of the rule
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> _builtins.int:
        """
        Minimum port of the rule
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Priority of the rule
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol of the rule (all, tcp, udp, icmp)
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> _builtins.str:
        """
        IP address or CIDR block that the rule applies to
        """
        return pulumi.get(self, "remote_address")

    @_builtins.property
    @pulumi.getter(name="remoteSecurityGroupIdentity")
    def remote_security_group_identity(self) -> _builtins.str:
        """
        Identity of the security group that the rule applies to
        """
        return pulumi.get(self, "remote_security_group_identity")

    @_builtins.property
    @pulumi.getter(name="remoteType")
    def remote_type(self) -> _builtins.str:
        """
        Type of the remote address (address or securityGroup)
        """
        return pulumi.get(self, "remote_type")


@pulumi.output_type
class GetSecurityGroupIngressRuleResult(dict):
    def __init__(__self__, *,
                 ip_version: _builtins.str,
                 name: _builtins.str,
                 policy: _builtins.str,
                 port_range_max: _builtins.int,
                 port_range_min: _builtins.int,
                 priority: _builtins.int,
                 protocol: _builtins.str,
                 remote_address: _builtins.str,
                 remote_security_group_identity: _builtins.str,
                 remote_type: _builtins.str):
        """
        :param _builtins.str ip_version: IP version of the rule (ipv4 or ipv6)
        :param _builtins.str name: Name of the rule
        :param _builtins.str policy: Policy of the rule (allow or drop)
        :param _builtins.int port_range_max: Maximum port of the rule
        :param _builtins.int port_range_min: Minimum port of the rule
        :param _builtins.int priority: Priority of the rule
        :param _builtins.str protocol: Protocol of the rule (all, tcp, udp, icmp)
        :param _builtins.str remote_address: IP address or CIDR block that the rule applies to
        :param _builtins.str remote_security_group_identity: Identity of the security group that the rule applies to
        :param _builtins.str remote_type: Type of the remote address (address or securityGroup)
        """
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "port_range_max", port_range_max)
        pulumi.set(__self__, "port_range_min", port_range_min)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "remote_address", remote_address)
        pulumi.set(__self__, "remote_security_group_identity", remote_security_group_identity)
        pulumi.set(__self__, "remote_type", remote_type)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        IP version of the rule (ipv4 or ipv6)
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the rule
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        Policy of the rule (allow or drop)
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> _builtins.int:
        """
        Maximum port of the rule
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> _builtins.int:
        """
        Minimum port of the rule
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        Priority of the rule
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Protocol of the rule (all, tcp, udp, icmp)
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> _builtins.str:
        """
        IP address or CIDR block that the rule applies to
        """
        return pulumi.get(self, "remote_address")

    @_builtins.property
    @pulumi.getter(name="remoteSecurityGroupIdentity")
    def remote_security_group_identity(self) -> _builtins.str:
        """
        Identity of the security group that the rule applies to
        """
        return pulumi.get(self, "remote_security_group_identity")

    @_builtins.property
    @pulumi.getter(name="remoteType")
    def remote_type(self) -> _builtins.str:
        """
        Type of the remote address (address or securityGroup)
        """
        return pulumi.get(self, "remote_type")


