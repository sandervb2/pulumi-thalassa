# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDbaasDbBackupscheduleResult',
    'AwaitableGetDbaasDbBackupscheduleResult',
    'get_dbaas_db_backupschedule',
    'get_dbaas_db_backupschedule_output',
]

@pulumi.output_type
class GetDbaasDbBackupscheduleResult:
    """
    A collection of values returned by getDbaasDbBackupschedule.
    """
    def __init__(__self__, backup_target=None, db_cluster_id=None, id=None, name=None, organisation_id=None, retention_policy=None, schedule=None, suspended=None):
        if backup_target and not isinstance(backup_target, str):
            raise TypeError("Expected argument 'backup_target' to be a str")
        pulumi.set(__self__, "backup_target", backup_target)
        if db_cluster_id and not isinstance(db_cluster_id, str):
            raise TypeError("Expected argument 'db_cluster_id' to be a str")
        pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if retention_policy and not isinstance(retention_policy, str):
            raise TypeError("Expected argument 'retention_policy' to be a str")
        pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if suspended and not isinstance(suspended, bool):
            raise TypeError("Expected argument 'suspended' to be a bool")
        pulumi.set(__self__, "suspended", suspended)

    @_builtins.property
    @pulumi.getter(name="backupTarget")
    def backup_target(self) -> _builtins.str:
        return pulumi.get(self, "backup_target")

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "db_cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> _builtins.str:
        return pulumi.get(self, "retention_policy")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter
    def suspended(self) -> _builtins.bool:
        return pulumi.get(self, "suspended")


class AwaitableGetDbaasDbBackupscheduleResult(GetDbaasDbBackupscheduleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbaasDbBackupscheduleResult(
            backup_target=self.backup_target,
            db_cluster_id=self.db_cluster_id,
            id=self.id,
            name=self.name,
            organisation_id=self.organisation_id,
            retention_policy=self.retention_policy,
            schedule=self.schedule,
            suspended=self.suspended)


def get_dbaas_db_backupschedule(db_cluster_id: Optional[_builtins.str] = None,
                                name: Optional[_builtins.str] = None,
                                organisation_id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbaasDbBackupscheduleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dbClusterId'] = db_cluster_id
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getDbaasDbBackupschedule:getDbaasDbBackupschedule', __args__, opts=opts, typ=GetDbaasDbBackupscheduleResult).value

    return AwaitableGetDbaasDbBackupscheduleResult(
        backup_target=pulumi.get(__ret__, 'backup_target'),
        db_cluster_id=pulumi.get(__ret__, 'db_cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        retention_policy=pulumi.get(__ret__, 'retention_policy'),
        schedule=pulumi.get(__ret__, 'schedule'),
        suspended=pulumi.get(__ret__, 'suspended'))
def get_dbaas_db_backupschedule_output(db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       name: Optional[pulumi.Input[_builtins.str]] = None,
                                       organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDbaasDbBackupscheduleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dbClusterId'] = db_cluster_id
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getDbaasDbBackupschedule:getDbaasDbBackupschedule', __args__, opts=opts, typ=GetDbaasDbBackupscheduleResult)
    return __ret__.apply(lambda __response__: GetDbaasDbBackupscheduleResult(
        backup_target=pulumi.get(__response__, 'backup_target'),
        db_cluster_id=pulumi.get(__response__, 'db_cluster_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        retention_policy=pulumi.get(__response__, 'retention_policy'),
        schedule=pulumi.get(__response__, 'schedule'),
        suspended=pulumi.get(__response__, 'suspended')))
