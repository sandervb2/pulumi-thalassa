# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMachineTypeResult',
    'AwaitableGetMachineTypeResult',
    'get_machine_type',
    'get_machine_type_output',
]

@pulumi.output_type
class GetMachineTypeResult:
    """
    A collection of values returned by getMachineType.
    """
    def __init__(__self__, cpu_cores=None, description=None, id=None, name=None, organisation_id=None, ram_mb=None, slug=None):
        if cpu_cores and not isinstance(cpu_cores, int):
            raise TypeError("Expected argument 'cpu_cores' to be a int")
        pulumi.set(__self__, "cpu_cores", cpu_cores)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if ram_mb and not isinstance(ram_mb, int):
            raise TypeError("Expected argument 'ram_mb' to be a int")
        pulumi.set(__self__, "ram_mb", ram_mb)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> _builtins.int:
        return pulumi.get(self, "cpu_cores")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="ramMb")
    def ram_mb(self) -> _builtins.int:
        return pulumi.get(self, "ram_mb")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "slug")


class AwaitableGetMachineTypeResult(GetMachineTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMachineTypeResult(
            cpu_cores=self.cpu_cores,
            description=self.description,
            id=self.id,
            name=self.name,
            organisation_id=self.organisation_id,
            ram_mb=self.ram_mb,
            slug=self.slug)


def get_machine_type(organisation_id: Optional[_builtins.str] = None,
                     slug: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMachineTypeResult:
    """
    Get an machine type
    """
    __args__ = dict()
    __args__['organisationId'] = organisation_id
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getMachineType:getMachineType', __args__, opts=opts, typ=GetMachineTypeResult).value

    return AwaitableGetMachineTypeResult(
        cpu_cores=pulumi.get(__ret__, 'cpu_cores'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        ram_mb=pulumi.get(__ret__, 'ram_mb'),
        slug=pulumi.get(__ret__, 'slug'))
def get_machine_type_output(organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            slug: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMachineTypeResult]:
    """
    Get an machine type
    """
    __args__ = dict()
    __args__['organisationId'] = organisation_id
    __args__['slug'] = slug
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getMachineType:getMachineType', __args__, opts=opts, typ=GetMachineTypeResult)
    return __ret__.apply(lambda __response__: GetMachineTypeResult(
        cpu_cores=pulumi.get(__response__, 'cpu_cores'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        ram_mb=pulumi.get(__response__, 'ram_mb'),
        slug=pulumi.get(__response__, 'slug')))
