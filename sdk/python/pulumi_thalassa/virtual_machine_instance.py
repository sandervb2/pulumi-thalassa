# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['VirtualMachineInstanceArgs', 'VirtualMachineInstance']

@pulumi.input_type
class VirtualMachineInstanceArgs:
    def __init__(__self__, *,
                 machine_image: pulumi.Input[_builtins.str],
                 machine_type: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_init: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_init_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume_size_gb: Optional[pulumi.Input[_builtins.int]] = None,
                 root_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a VirtualMachineInstance resource.
        :param pulumi.Input[_builtins.str] machine_image: Machine image of the virtual machine instance
        :param pulumi.Input[_builtins.str] machine_type: Machine type of the virtual machine instance
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Virtual Machine Instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the virtual machine instance
        :param pulumi.Input[_builtins.str] availability_zone: Availability zone of the virtual machine instance
        :param pulumi.Input[_builtins.str] cloud_init: Cloud init of the virtual machine instance
        :param pulumi.Input[_builtins.str] cloud_init_template_id: Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection of the virtual machine instance
        :param pulumi.Input[_builtins.str] description: A human readable description about the virtual machine instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the virtual machine instance
        :param pulumi.Input[_builtins.str] name: Name of the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] root_volume_id: Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        :param pulumi.Input[_builtins.int] root_volume_size_gb: Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        :param pulumi.Input[_builtins.str] root_volume_type: Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Virtual Machine Instance
        """
        pulumi.set(__self__, "machine_image", machine_image)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if cloud_init is not None:
            pulumi.set(__self__, "cloud_init", cloud_init)
        if cloud_init_template_id is not None:
            pulumi.set(__self__, "cloud_init_template_id", cloud_init_template_id)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if root_volume_id is not None:
            pulumi.set(__self__, "root_volume_id", root_volume_id)
        if root_volume_size_gb is not None:
            pulumi.set(__self__, "root_volume_size_gb", root_volume_size_gb)
        if root_volume_type is not None:
            pulumi.set(__self__, "root_volume_type", root_volume_type)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)

    @_builtins.property
    @pulumi.getter(name="machineImage")
    def machine_image(self) -> pulumi.Input[_builtins.str]:
        """
        Machine image of the virtual machine instance
        """
        return pulumi.get(self, "machine_image")

    @machine_image.setter
    def machine_image(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "machine_image", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[_builtins.str]:
        """
        Machine type of the virtual machine instance
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Subnet of the Virtual Machine Instance
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the virtual machine instance
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Availability zone of the virtual machine instance
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="cloudInit")
    def cloud_init(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud init of the virtual machine instance
        """
        return pulumi.get(self, "cloud_init")

    @cloud_init.setter
    def cloud_init(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_init", value)

    @_builtins.property
    @pulumi.getter(name="cloudInitTemplateId")
    def cloud_init_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        """
        return pulumi.get(self, "cloud_init_template_id")

    @cloud_init_template_id.setter
    def cloud_init_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_init_template_id", value)

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Delete protection of the virtual machine instance
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the virtual machine instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the virtual machine instance
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Virtual Machine Instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="rootVolumeId")
    def root_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        """
        return pulumi.get(self, "root_volume_id")

    @root_volume_id.setter
    def root_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_volume_id", value)

    @_builtins.property
    @pulumi.getter(name="rootVolumeSizeGb")
    def root_volume_size_gb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        """
        return pulumi.get(self, "root_volume_size_gb")

    @root_volume_size_gb.setter
    def root_volume_size_gb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "root_volume_size_gb", value)

    @_builtins.property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        """
        return pulumi.get(self, "root_volume_type")

    @root_volume_type.setter
    def root_volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_volume_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the Virtual Machine Instance
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)


@pulumi.input_type
class _VirtualMachineInstanceState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 attached_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_init: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_init_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_image: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume_size_gb: Optional[pulumi.Input[_builtins.int]] = None,
                 root_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VirtualMachineInstance resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the virtual machine instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attached_volume_ids: Attached volume ids of the virtual machine instance
        :param pulumi.Input[_builtins.str] availability_zone: Availability zone of the virtual machine instance
        :param pulumi.Input[_builtins.str] cloud_init: Cloud init of the virtual machine instance
        :param pulumi.Input[_builtins.str] cloud_init_template_id: Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection of the virtual machine instance
        :param pulumi.Input[_builtins.str] description: A human readable description about the virtual machine instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ip_addresses: IP addresses of the virtual machine instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the virtual machine instance
        :param pulumi.Input[_builtins.str] machine_image: Machine image of the virtual machine instance
        :param pulumi.Input[_builtins.str] machine_type: Machine type of the virtual machine instance
        :param pulumi.Input[_builtins.str] name: Name of the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] root_volume_id: Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        :param pulumi.Input[_builtins.int] root_volume_size_gb: Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        :param pulumi.Input[_builtins.str] root_volume_type: Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] slug: Slug of the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] state: Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
        :param pulumi.Input[_builtins.str] status: Status of the virtual machine instance
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Virtual Machine Instance
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if attached_volume_ids is not None:
            pulumi.set(__self__, "attached_volume_ids", attached_volume_ids)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if cloud_init is not None:
            pulumi.set(__self__, "cloud_init", cloud_init)
        if cloud_init_template_id is not None:
            pulumi.set(__self__, "cloud_init_template_id", cloud_init_template_id)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_image is not None:
            pulumi.set(__self__, "machine_image", machine_image)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if root_volume_id is not None:
            pulumi.set(__self__, "root_volume_id", root_volume_id)
        if root_volume_size_gb is not None:
            pulumi.set(__self__, "root_volume_size_gb", root_volume_size_gb)
        if root_volume_type is not None:
            pulumi.set(__self__, "root_volume_type", root_volume_type)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the virtual machine instance
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="attachedVolumeIds")
    def attached_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Attached volume ids of the virtual machine instance
        """
        return pulumi.get(self, "attached_volume_ids")

    @attached_volume_ids.setter
    def attached_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "attached_volume_ids", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Availability zone of the virtual machine instance
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="cloudInit")
    def cloud_init(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud init of the virtual machine instance
        """
        return pulumi.get(self, "cloud_init")

    @cloud_init.setter
    def cloud_init(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_init", value)

    @_builtins.property
    @pulumi.getter(name="cloudInitTemplateId")
    def cloud_init_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        """
        return pulumi.get(self, "cloud_init_template_id")

    @cloud_init_template_id.setter
    def cloud_init_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_init_template_id", value)

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Delete protection of the virtual machine instance
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_protection", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the virtual machine instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        IP addresses of the virtual machine instance
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the virtual machine instance
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="machineImage")
    def machine_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine image of the virtual machine instance
        """
        return pulumi.get(self, "machine_image")

    @machine_image.setter
    def machine_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_image", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine type of the virtual machine instance
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Virtual Machine Instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="rootVolumeId")
    def root_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        """
        return pulumi.get(self, "root_volume_id")

    @root_volume_id.setter
    def root_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_volume_id", value)

    @_builtins.property
    @pulumi.getter(name="rootVolumeSizeGb")
    def root_volume_size_gb(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        """
        return pulumi.get(self, "root_volume_size_gb")

    @root_volume_size_gb.setter
    def root_volume_size_gb(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "root_volume_size_gb", value)

    @_builtins.property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        """
        return pulumi.get(self, "root_volume_type")

    @root_volume_type.setter
    def root_volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_volume_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the Virtual Machine Instance
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Slug of the Virtual Machine Instance
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the virtual machine instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet of the Virtual Machine Instance
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.type_token("thalassa:index/virtualMachineInstance:VirtualMachineInstance")
class VirtualMachineInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_init: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_init_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_image: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume_size_gb: Optional[pulumi.Input[_builtins.int]] = None,
                 root_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create an virtual machine instance within a subnet on the Thalassa Cloud platform

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the virtual machine instance
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for virtual machine instance",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the virtual machine instance
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for virtual machine instance",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a security group for the virtual machine instance
        example_security_group = thalassa.SecurityGroup("example",
            name="example-security-group",
            description="Example security group for virtual machine instance",
            vpc_id=example.id)
        # Create a cloud init template (optional)
        example_cloud_init_template = thalassa.CloudInitTemplate("example",
            name="example-cloud-init-template",
            content=\"\"\"#cloud-config
        package_update: true
        package_upgrade: true
        packages:
          - nginx
          - curl
        runcmd:
          - systemctl enable nginx
          - systemctl start nginx
        \"\"\")
        block = thalassa.get_volume_type(name="Block")
        ubuntu = thalassa.get_machine_image(name="ubuntu-22-04-01")
        # Create a virtual machine instance with Thalassa default values
        example_virtual_machine_instance = thalassa.VirtualMachineInstance("example",
            name="example-instance",
            subnet_id=example_subnet.id,
            machine_type="pgp-small",
            machine_image=ubuntu.name,
            availability_zone="nl-01a",
            root_volume_size_gb=20,
            root_volume_type=block.id,
            cloud_init_template_id=example_cloud_init_template.id)
        pulumi.export("instanceId", example_virtual_machine_instance.id)
        pulumi.export("instanceName", example_virtual_machine_instance.name)
        # Create a load balancer for the virtual machine instance
        example_loadbalancer = thalassa.Loadbalancer("example",
            name="example-lb",
            region="nl-01",
            description="Example load balancer for virtual machine instance",
            subnet_id=example_subnet.id)
        # Create a load balancer target group
        example_target_group = thalassa.TargetGroup("example",
            name="example-lb-target-group",
            description="Example load balancer target group for virtual machine instance",
            vpc_id=example.id,
            protocol="tcp",
            port=22)
        # Create a load balancer listener
        example_loadbalancer_listener = thalassa.LoadbalancerListener("example",
            name="example-lb-listener",
            description="Example load balancer listener for virtual machine instance",
            loadbalancer_id=example_loadbalancer.id,
            protocol="tcp",
            port=22,
            target_group_id=example_target_group.id)
        example_target_group_attachment = thalassa.TargetGroupAttachment("example",
            target_group_id=example_target_group.id,
            vmi_id=example_virtual_machine_instance.id)
        pulumi.export("loadBalancerIp", example_loadbalancer.ip_address)
        pulumi.export("loadBalancerPort", example_loadbalancer_listener.port)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the virtual machine instance
        :param pulumi.Input[_builtins.str] availability_zone: Availability zone of the virtual machine instance
        :param pulumi.Input[_builtins.str] cloud_init: Cloud init of the virtual machine instance
        :param pulumi.Input[_builtins.str] cloud_init_template_id: Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection of the virtual machine instance
        :param pulumi.Input[_builtins.str] description: A human readable description about the virtual machine instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the virtual machine instance
        :param pulumi.Input[_builtins.str] machine_image: Machine image of the virtual machine instance
        :param pulumi.Input[_builtins.str] machine_type: Machine type of the virtual machine instance
        :param pulumi.Input[_builtins.str] name: Name of the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] root_volume_id: Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        :param pulumi.Input[_builtins.int] root_volume_size_gb: Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        :param pulumi.Input[_builtins.str] root_volume_type: Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Virtual Machine Instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualMachineInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create an virtual machine instance within a subnet on the Thalassa Cloud platform

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the virtual machine instance
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for virtual machine instance",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the virtual machine instance
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for virtual machine instance",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a security group for the virtual machine instance
        example_security_group = thalassa.SecurityGroup("example",
            name="example-security-group",
            description="Example security group for virtual machine instance",
            vpc_id=example.id)
        # Create a cloud init template (optional)
        example_cloud_init_template = thalassa.CloudInitTemplate("example",
            name="example-cloud-init-template",
            content=\"\"\"#cloud-config
        package_update: true
        package_upgrade: true
        packages:
          - nginx
          - curl
        runcmd:
          - systemctl enable nginx
          - systemctl start nginx
        \"\"\")
        block = thalassa.get_volume_type(name="Block")
        ubuntu = thalassa.get_machine_image(name="ubuntu-22-04-01")
        # Create a virtual machine instance with Thalassa default values
        example_virtual_machine_instance = thalassa.VirtualMachineInstance("example",
            name="example-instance",
            subnet_id=example_subnet.id,
            machine_type="pgp-small",
            machine_image=ubuntu.name,
            availability_zone="nl-01a",
            root_volume_size_gb=20,
            root_volume_type=block.id,
            cloud_init_template_id=example_cloud_init_template.id)
        pulumi.export("instanceId", example_virtual_machine_instance.id)
        pulumi.export("instanceName", example_virtual_machine_instance.name)
        # Create a load balancer for the virtual machine instance
        example_loadbalancer = thalassa.Loadbalancer("example",
            name="example-lb",
            region="nl-01",
            description="Example load balancer for virtual machine instance",
            subnet_id=example_subnet.id)
        # Create a load balancer target group
        example_target_group = thalassa.TargetGroup("example",
            name="example-lb-target-group",
            description="Example load balancer target group for virtual machine instance",
            vpc_id=example.id,
            protocol="tcp",
            port=22)
        # Create a load balancer listener
        example_loadbalancer_listener = thalassa.LoadbalancerListener("example",
            name="example-lb-listener",
            description="Example load balancer listener for virtual machine instance",
            loadbalancer_id=example_loadbalancer.id,
            protocol="tcp",
            port=22,
            target_group_id=example_target_group.id)
        example_target_group_attachment = thalassa.TargetGroupAttachment("example",
            target_group_id=example_target_group.id,
            vmi_id=example_virtual_machine_instance.id)
        pulumi.export("loadBalancerIp", example_loadbalancer.ip_address)
        pulumi.export("loadBalancerPort", example_loadbalancer_listener.port)
        ```

        :param str resource_name: The name of the resource.
        :param VirtualMachineInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualMachineInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_init: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_init_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_image: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_volume_size_gb: Optional[pulumi.Input[_builtins.int]] = None,
                 root_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualMachineInstanceArgs.__new__(VirtualMachineInstanceArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["cloud_init"] = cloud_init
            __props__.__dict__["cloud_init_template_id"] = cloud_init_template_id
            __props__.__dict__["delete_protection"] = delete_protection
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            if machine_image is None and not opts.urn:
                raise TypeError("Missing required property 'machine_image'")
            __props__.__dict__["machine_image"] = machine_image
            if machine_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_type'")
            __props__.__dict__["machine_type"] = machine_type
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            __props__.__dict__["root_volume_id"] = root_volume_id
            __props__.__dict__["root_volume_size_gb"] = root_volume_size_gb
            __props__.__dict__["root_volume_type"] = root_volume_type
            __props__.__dict__["security_group_attachments"] = security_group_attachments
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["attached_volume_ids"] = None
            __props__.__dict__["ip_addresses"] = None
            __props__.__dict__["slug"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
        super(VirtualMachineInstance, __self__).__init__(
            'thalassa:index/virtualMachineInstance:VirtualMachineInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            attached_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            cloud_init: Optional[pulumi.Input[_builtins.str]] = None,
            cloud_init_template_id: Optional[pulumi.Input[_builtins.str]] = None,
            delete_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            machine_image: Optional[pulumi.Input[_builtins.str]] = None,
            machine_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            root_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
            root_volume_size_gb: Optional[pulumi.Input[_builtins.int]] = None,
            root_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VirtualMachineInstance':
        """
        Get an existing VirtualMachineInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the virtual machine instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] attached_volume_ids: Attached volume ids of the virtual machine instance
        :param pulumi.Input[_builtins.str] availability_zone: Availability zone of the virtual machine instance
        :param pulumi.Input[_builtins.str] cloud_init: Cloud init of the virtual machine instance
        :param pulumi.Input[_builtins.str] cloud_init_template_id: Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        :param pulumi.Input[_builtins.bool] delete_protection: Delete protection of the virtual machine instance
        :param pulumi.Input[_builtins.str] description: A human readable description about the virtual machine instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ip_addresses: IP addresses of the virtual machine instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the virtual machine instance
        :param pulumi.Input[_builtins.str] machine_image: Machine image of the virtual machine instance
        :param pulumi.Input[_builtins.str] machine_type: Machine type of the virtual machine instance
        :param pulumi.Input[_builtins.str] name: Name of the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] root_volume_id: Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        :param pulumi.Input[_builtins.int] root_volume_size_gb: Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        :param pulumi.Input[_builtins.str] root_volume_type: Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] slug: Slug of the Virtual Machine Instance
        :param pulumi.Input[_builtins.str] state: Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
        :param pulumi.Input[_builtins.str] status: Status of the virtual machine instance
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Virtual Machine Instance
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualMachineInstanceState.__new__(_VirtualMachineInstanceState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["attached_volume_ids"] = attached_volume_ids
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["cloud_init"] = cloud_init
        __props__.__dict__["cloud_init_template_id"] = cloud_init_template_id
        __props__.__dict__["delete_protection"] = delete_protection
        __props__.__dict__["description"] = description
        __props__.__dict__["ip_addresses"] = ip_addresses
        __props__.__dict__["labels"] = labels
        __props__.__dict__["machine_image"] = machine_image
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["root_volume_id"] = root_volume_id
        __props__.__dict__["root_volume_size_gb"] = root_volume_size_gb
        __props__.__dict__["root_volume_type"] = root_volume_type
        __props__.__dict__["security_group_attachments"] = security_group_attachments
        __props__.__dict__["slug"] = slug
        __props__.__dict__["state"] = state
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        return VirtualMachineInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the virtual machine instance
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="attachedVolumeIds")
    def attached_volume_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Attached volume ids of the virtual machine instance
        """
        return pulumi.get(self, "attached_volume_ids")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Availability zone of the virtual machine instance
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="cloudInit")
    def cloud_init(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cloud init of the virtual machine instance
        """
        return pulumi.get(self, "cloud_init")

    @_builtins.property
    @pulumi.getter(name="cloudInitTemplateId")
    def cloud_init_template_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
        """
        return pulumi.get(self, "cloud_init_template_id")

    @_builtins.property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Delete protection of the virtual machine instance
        """
        return pulumi.get(self, "delete_protection")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A human readable description about the virtual machine instance
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        IP addresses of the virtual machine instance
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the virtual machine instance
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="machineImage")
    def machine_image(self) -> pulumi.Output[_builtins.str]:
        """
        Machine image of the virtual machine instance
        """
        return pulumi.get(self, "machine_image")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[_builtins.str]:
        """
        Machine type of the virtual machine instance
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Virtual Machine Instance
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="rootVolumeId")
    def root_volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
        """
        return pulumi.get(self, "root_volume_id")

    @_builtins.property
    @pulumi.getter(name="rootVolumeSizeGb")
    def root_volume_size_gb(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
        """
        return pulumi.get(self, "root_volume_size_gb")

    @_builtins.property
    @pulumi.getter(name="rootVolumeType")
    def root_volume_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
        """
        return pulumi.get(self, "root_volume_type")

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List identities of security group that will be attached to the Virtual Machine Instance
        """
        return pulumi.get(self, "security_group_attachments")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        """
        Slug of the Virtual Machine Instance
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the virtual machine instance
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Subnet of the Virtual Machine Instance
        """
        return pulumi.get(self, "subnet_id")

