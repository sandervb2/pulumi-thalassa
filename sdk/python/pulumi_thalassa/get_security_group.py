# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSecurityGroupResult',
    'AwaitableGetSecurityGroupResult',
    'get_security_group',
    'get_security_group_output',
]

@pulumi.output_type
class GetSecurityGroupResult:
    """
    A collection of values returned by getSecurityGroup.
    """
    def __init__(__self__, allow_same_group_traffic=None, created_at=None, description=None, egress_rules=None, id=None, identity=None, ingress_rules=None, name=None, organisation_id=None, status=None, updated_at=None, vpc_identity=None):
        if allow_same_group_traffic and not isinstance(allow_same_group_traffic, bool):
            raise TypeError("Expected argument 'allow_same_group_traffic' to be a bool")
        pulumi.set(__self__, "allow_same_group_traffic", allow_same_group_traffic)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if egress_rules and not isinstance(egress_rules, list):
            raise TypeError("Expected argument 'egress_rules' to be a list")
        pulumi.set(__self__, "egress_rules", egress_rules)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity and not isinstance(identity, str):
            raise TypeError("Expected argument 'identity' to be a str")
        pulumi.set(__self__, "identity", identity)
        if ingress_rules and not isinstance(ingress_rules, list):
            raise TypeError("Expected argument 'ingress_rules' to be a list")
        pulumi.set(__self__, "ingress_rules", ingress_rules)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if vpc_identity and not isinstance(vpc_identity, str):
            raise TypeError("Expected argument 'vpc_identity' to be a str")
        pulumi.set(__self__, "vpc_identity", vpc_identity)

    @_builtins.property
    @pulumi.getter(name="allowSameGroupTraffic")
    def allow_same_group_traffic(self) -> _builtins.bool:
        """
        Flag that indicates if the security group allows traffic between instances in the same security group
        """
        return pulumi.get(self, "allow_same_group_traffic")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Creation timestamp of the security group
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the security group
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> Sequence['outputs.GetSecurityGroupEgressRuleResult']:
        """
        List of egress rules for the security group
        """
        return pulumi.get(self, "egress_rules")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identity(self) -> Optional[_builtins.str]:
        """
        Identity of the security group
        """
        return pulumi.get(self, "identity")

    @_builtins.property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> Sequence['outputs.GetSecurityGroupIngressRuleResult']:
        """
        List of ingress rules for the security group
        """
        return pulumi.get(self, "ingress_rules")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the security group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of the security group
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Last update timestamp of the security group
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcIdentity")
    def vpc_identity(self) -> Optional[_builtins.str]:
        """
        Identity of the VPC that the security group belongs to. Required when searching by name.
        """
        return pulumi.get(self, "vpc_identity")


class AwaitableGetSecurityGroupResult(GetSecurityGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityGroupResult(
            allow_same_group_traffic=self.allow_same_group_traffic,
            created_at=self.created_at,
            description=self.description,
            egress_rules=self.egress_rules,
            id=self.id,
            identity=self.identity,
            ingress_rules=self.ingress_rules,
            name=self.name,
            organisation_id=self.organisation_id,
            status=self.status,
            updated_at=self.updated_at,
            vpc_identity=self.vpc_identity)


def get_security_group(identity: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       organisation_id: Optional[_builtins.str] = None,
                       vpc_identity: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityGroupResult:
    """
    A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.


    :param _builtins.str identity: Identity of the security group
    :param _builtins.str name: Name of the security group
    :param _builtins.str vpc_identity: Identity of the VPC that the security group belongs to. Required when searching by name.
    """
    __args__ = dict()
    __args__['identity'] = identity
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    __args__['vpcIdentity'] = vpc_identity
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getSecurityGroup:getSecurityGroup', __args__, opts=opts, typ=GetSecurityGroupResult).value

    return AwaitableGetSecurityGroupResult(
        allow_same_group_traffic=pulumi.get(__ret__, 'allow_same_group_traffic'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        egress_rules=pulumi.get(__ret__, 'egress_rules'),
        id=pulumi.get(__ret__, 'id'),
        identity=pulumi.get(__ret__, 'identity'),
        ingress_rules=pulumi.get(__ret__, 'ingress_rules'),
        name=pulumi.get(__ret__, 'name'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        status=pulumi.get(__ret__, 'status'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        vpc_identity=pulumi.get(__ret__, 'vpc_identity'))
def get_security_group_output(identity: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              vpc_identity: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecurityGroupResult]:
    """
    A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.


    :param _builtins.str identity: Identity of the security group
    :param _builtins.str name: Name of the security group
    :param _builtins.str vpc_identity: Identity of the VPC that the security group belongs to. Required when searching by name.
    """
    __args__ = dict()
    __args__['identity'] = identity
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    __args__['vpcIdentity'] = vpc_identity
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getSecurityGroup:getSecurityGroup', __args__, opts=opts, typ=GetSecurityGroupResult)
    return __ret__.apply(lambda __response__: GetSecurityGroupResult(
        allow_same_group_traffic=pulumi.get(__response__, 'allow_same_group_traffic'),
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        egress_rules=pulumi.get(__response__, 'egress_rules'),
        id=pulumi.get(__response__, 'id'),
        identity=pulumi.get(__response__, 'identity'),
        ingress_rules=pulumi.get(__response__, 'ingress_rules'),
        name=pulumi.get(__response__, 'name'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        status=pulumi.get(__response__, 'status'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        vpc_identity=pulumi.get(__response__, 'vpc_identity')))
