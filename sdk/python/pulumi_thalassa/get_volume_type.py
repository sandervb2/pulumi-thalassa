# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVolumeTypeResult',
    'AwaitableGetVolumeTypeResult',
    'get_volume_type',
    'get_volume_type_output',
]

@pulumi.output_type
class GetVolumeTypeResult:
    """
    A collection of values returned by getVolumeType.
    """
    def __init__(__self__, allow_resize=None, description=None, id=None, name=None, organisation_id=None, storage_type=None):
        if allow_resize and not isinstance(allow_resize, bool):
            raise TypeError("Expected argument 'allow_resize' to be a bool")
        pulumi.set(__self__, "allow_resize", allow_resize)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)

    @_builtins.property
    @pulumi.getter(name="allowResize")
    def allow_resize(self) -> _builtins.bool:
        """
        Whether the volume type allows resizing. If false, the volume size cannot be changed after creation.
        """
        return pulumi.get(self, "allow_resize")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the volume type.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the volume type.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> _builtins.str:
        """
        The storage type of the volume type. For example: 'block'.
        """
        return pulumi.get(self, "storage_type")


class AwaitableGetVolumeTypeResult(GetVolumeTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeTypeResult(
            allow_resize=self.allow_resize,
            description=self.description,
            id=self.id,
            name=self.name,
            organisation_id=self.organisation_id,
            storage_type=self.storage_type)


def get_volume_type(name: Optional[_builtins.str] = None,
                    organisation_id: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumeTypeResult:
    """
    Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.


    :param _builtins.str name: The name of the volume type.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getVolumeType:getVolumeType', __args__, opts=opts, typ=GetVolumeTypeResult).value

    return AwaitableGetVolumeTypeResult(
        allow_resize=pulumi.get(__ret__, 'allow_resize'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        storage_type=pulumi.get(__ret__, 'storage_type'))
def get_volume_type_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                           organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVolumeTypeResult]:
    """
    Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.


    :param _builtins.str name: The name of the volume type.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getVolumeType:getVolumeType', __args__, opts=opts, typ=GetVolumeTypeResult)
    return __ret__.apply(lambda __response__: GetVolumeTypeResult(
        allow_resize=pulumi.get(__response__, 'allow_resize'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        storage_type=pulumi.get(__response__, 'storage_type')))
