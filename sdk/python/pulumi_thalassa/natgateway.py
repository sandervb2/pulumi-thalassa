# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NatgatewayArgs', 'Natgateway']

@pulumi.input_type
class NatgatewayArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Natgateway resource.
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the NatGateway
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the NatGateway
        :param pulumi.Input[_builtins.str] description: A human readable description about the natGateway
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the NatGateway
        :param pulumi.Input[_builtins.str] name: Name of the NatGateway
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the NAT Gateway
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        Subnet of the NatGateway
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the NatGateway
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the natGateway
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the NatGateway
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the NatGateway
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the NAT Gateway
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)


@pulumi.input_type
class _NatgatewayState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Natgateway resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the NatGateway
        :param pulumi.Input[_builtins.str] description: A human readable description about the natGateway
        :param pulumi.Input[_builtins.str] endpoint_ip: Endpoint IP of the NatGateway
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the NatGateway
        :param pulumi.Input[_builtins.str] name: Name of the NatGateway
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the NAT Gateway
        :param pulumi.Input[_builtins.str] status: Status of the NatGateway
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the NatGateway
        :param pulumi.Input[_builtins.str] v4_ip: V4 IP of the NatGateway
        :param pulumi.Input[_builtins.str] v6_ip: V6 IP of the NatGateway
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the NatGateway
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_ip is not None:
            pulumi.set(__self__, "endpoint_ip", endpoint_ip)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if v4_ip is not None:
            pulumi.set(__self__, "v4_ip", v4_ip)
        if v6_ip is not None:
            pulumi.set(__self__, "v6_ip", v6_ip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the NatGateway
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the natGateway
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint IP of the NatGateway
        """
        return pulumi.get(self, "endpoint_ip")

    @endpoint_ip.setter
    def endpoint_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_ip", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the NatGateway
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the NatGateway
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the NAT Gateway
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the NatGateway
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet of the NatGateway
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="v4Ip")
    def v4_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        V4 IP of the NatGateway
        """
        return pulumi.get(self, "v4_ip")

    @v4_ip.setter
    def v4_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "v4_ip", value)

    @_builtins.property
    @pulumi.getter(name="v6Ip")
    def v6_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        V6 IP of the NatGateway
        """
        return pulumi.get(self, "v6_ip")

    @v6_ip.setter
    def v6_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "v6_ip", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC of the NatGateway
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("thalassa:index/natgateway:Natgateway")
class Natgateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create an NAT Gateway within a VPC

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the NAT gateway
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for NAT gateway",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the NAT gateway
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for NAT gateway",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a NAT gateway with all optional attributes
        example_natgateway = thalassa.Natgateway("example",
            name="example-nat-gateway",
            subnet_id=example_subnet.id,
            description="Example NAT gateway for documentation",
            labels={
                "environment": "production",
                "service": "networking",
                "tier": "public",
            },
            annotations={
                "cost-center": "cc-12345",
                "backup-policy": "none",
                "monitoring": "enabled",
            })
        pulumi.export("natGatewayId", example_natgateway.id)
        pulumi.export("natGatewayEndpointIp", example_natgateway.endpoint_ip)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the NatGateway
        :param pulumi.Input[_builtins.str] description: A human readable description about the natGateway
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the NatGateway
        :param pulumi.Input[_builtins.str] name: Name of the NatGateway
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the NAT Gateway
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the NatGateway
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NatgatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create an NAT Gateway within a VPC

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the NAT gateway
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for NAT gateway",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the NAT gateway
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for NAT gateway",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a NAT gateway with all optional attributes
        example_natgateway = thalassa.Natgateway("example",
            name="example-nat-gateway",
            subnet_id=example_subnet.id,
            description="Example NAT gateway for documentation",
            labels={
                "environment": "production",
                "service": "networking",
                "tier": "public",
            },
            annotations={
                "cost-center": "cc-12345",
                "backup-policy": "none",
                "monitoring": "enabled",
            })
        pulumi.export("natGatewayId", example_natgateway.id)
        pulumi.export("natGatewayEndpointIp", example_natgateway.endpoint_ip)
        ```

        :param str resource_name: The name of the resource.
        :param NatgatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NatgatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NatgatewayArgs.__new__(NatgatewayArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            __props__.__dict__["security_group_attachments"] = security_group_attachments
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["endpoint_ip"] = None
            __props__.__dict__["slug"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["v4_ip"] = None
            __props__.__dict__["v6_ip"] = None
            __props__.__dict__["vpc_id"] = None
        super(Natgateway, __self__).__init__(
            'thalassa:index/natgateway:Natgateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_ip: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            v4_ip: Optional[pulumi.Input[_builtins.str]] = None,
            v6_ip: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Natgateway':
        """
        Get an existing Natgateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the NatGateway
        :param pulumi.Input[_builtins.str] description: A human readable description about the natGateway
        :param pulumi.Input[_builtins.str] endpoint_ip: Endpoint IP of the NatGateway
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the NatGateway
        :param pulumi.Input[_builtins.str] name: Name of the NatGateway
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the NAT Gateway
        :param pulumi.Input[_builtins.str] status: Status of the NatGateway
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the NatGateway
        :param pulumi.Input[_builtins.str] v4_ip: V4 IP of the NatGateway
        :param pulumi.Input[_builtins.str] v6_ip: V6 IP of the NatGateway
        :param pulumi.Input[_builtins.str] vpc_id: VPC of the NatGateway
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NatgatewayState.__new__(_NatgatewayState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["description"] = description
        __props__.__dict__["endpoint_ip"] = endpoint_ip
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["security_group_attachments"] = security_group_attachments
        __props__.__dict__["slug"] = slug
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["v4_ip"] = v4_ip
        __props__.__dict__["v6_ip"] = v6_ip
        __props__.__dict__["vpc_id"] = vpc_id
        return Natgateway(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the NatGateway
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A human readable description about the natGateway
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint IP of the NatGateway
        """
        return pulumi.get(self, "endpoint_ip")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the NatGateway
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the NatGateway
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List identities of security group that will be attached to the NAT Gateway
        """
        return pulumi.get(self, "security_group_attachments")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the NatGateway
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        Subnet of the NatGateway
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="v4Ip")
    def v4_ip(self) -> pulumi.Output[_builtins.str]:
        """
        V4 IP of the NatGateway
        """
        return pulumi.get(self, "v4_ip")

    @_builtins.property
    @pulumi.getter(name="v6Ip")
    def v6_ip(self) -> pulumi.Output[_builtins.str]:
        """
        V6 IP of the NatGateway
        """
        return pulumi.get(self, "v6_ip")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        VPC of the NatGateway
        """
        return pulumi.get(self, "vpc_id")

