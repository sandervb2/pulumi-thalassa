# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDbaasPgDatabaseResult',
    'AwaitableGetDbaasPgDatabaseResult',
    'get_dbaas_pg_database',
    'get_dbaas_pg_database_output',
]

@pulumi.output_type
class GetDbaasPgDatabaseResult:
    """
    A collection of values returned by getDbaasPgDatabase.
    """
    def __init__(__self__, connection_limit=None, db_cluster_id=None, id=None, name=None, organisation_id=None, owner_role_id=None):
        if connection_limit and not isinstance(connection_limit, int):
            raise TypeError("Expected argument 'connection_limit' to be a int")
        pulumi.set(__self__, "connection_limit", connection_limit)
        if db_cluster_id and not isinstance(db_cluster_id, str):
            raise TypeError("Expected argument 'db_cluster_id' to be a str")
        pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)
        if owner_role_id and not isinstance(owner_role_id, str):
            raise TypeError("Expected argument 'owner_role_id' to be a str")
        pulumi.set(__self__, "owner_role_id", owner_role_id)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> _builtins.int:
        """
        The connection limit of the database
        """
        return pulumi.get(self, "connection_limit")

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> _builtins.str:
        """
        The ID of the database cluster
        """
        return pulumi.get(self, "db_cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the database
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="ownerRoleId")
    def owner_role_id(self) -> _builtins.str:
        """
        The ID of the owner role
        """
        return pulumi.get(self, "owner_role_id")


class AwaitableGetDbaasPgDatabaseResult(GetDbaasPgDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbaasPgDatabaseResult(
            connection_limit=self.connection_limit,
            db_cluster_id=self.db_cluster_id,
            id=self.id,
            name=self.name,
            organisation_id=self.organisation_id,
            owner_role_id=self.owner_role_id)


def get_dbaas_pg_database(db_cluster_id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          organisation_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbaasPgDatabaseResult:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str db_cluster_id: The ID of the database cluster
    :param _builtins.str name: The name of the database
    """
    __args__ = dict()
    __args__['dbClusterId'] = db_cluster_id
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getDbaasPgDatabase:getDbaasPgDatabase', __args__, opts=opts, typ=GetDbaasPgDatabaseResult).value

    return AwaitableGetDbaasPgDatabaseResult(
        connection_limit=pulumi.get(__ret__, 'connection_limit'),
        db_cluster_id=pulumi.get(__ret__, 'db_cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'),
        owner_role_id=pulumi.get(__ret__, 'owner_role_id'))
def get_dbaas_pg_database_output(db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 name: Optional[pulumi.Input[_builtins.str]] = None,
                                 organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDbaasPgDatabaseResult]:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str db_cluster_id: The ID of the database cluster
    :param _builtins.str name: The name of the database
    """
    __args__ = dict()
    __args__['dbClusterId'] = db_cluster_id
    __args__['name'] = name
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getDbaasPgDatabase:getDbaasPgDatabase', __args__, opts=opts, typ=GetDbaasPgDatabaseResult)
    return __ret__.apply(lambda __response__: GetDbaasPgDatabaseResult(
        connection_limit=pulumi.get(__response__, 'connection_limit'),
        db_cluster_id=pulumi.get(__response__, 'db_cluster_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organisation_id=pulumi.get(__response__, 'organisation_id'),
        owner_role_id=pulumi.get(__response__, 'owner_role_id')))
