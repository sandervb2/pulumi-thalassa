# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ObjectstorageBucketArgs', 'ObjectstorageBucket']

@pulumi.input_type
class ObjectstorageBucketArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[_builtins.str]] = None,
                 public: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a ObjectstorageBucket resource.
        :param pulumi.Input[_builtins.str] region: Region of the bucket
        :param pulumi.Input[_builtins.str] name: Name of the bucket
        :param pulumi.Input[_builtins.str] policy: The bucket policy as a JSON string
        :param pulumi.Input[_builtins.bool] public: Whether the bucket is publicly accessible
        """
        pulumi.set(__self__, "region", region)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Region of the bucket
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the bucket
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bucket policy as a JSON string
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the bucket is publicly accessible
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public", value)


@pulumi.input_type
class _ObjectstorageBucketState:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[_builtins.str]] = None,
                 public: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ObjectstorageBucket resources.
        :param pulumi.Input[_builtins.str] endpoint: The endpoint URL for the bucket
        :param pulumi.Input[_builtins.str] name: Name of the bucket
        :param pulumi.Input[_builtins.str] policy: The bucket policy as a JSON string
        :param pulumi.Input[_builtins.bool] public: Whether the bucket is publicly accessible
        :param pulumi.Input[_builtins.str] region: Region of the bucket
        :param pulumi.Input[_builtins.str] status: Status of the bucket
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint URL for the bucket
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the bucket
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bucket policy as a JSON string
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy", value)

    @_builtins.property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the bucket is publicly accessible
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region of the bucket
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the bucket
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("thalassa:index/objectstorageBucket:ObjectstorageBucket")
class ObjectstorageBucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[_builtins.str]] = None,
                 public: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create and manage an object storage bucket

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_thalassa as thalassa

        # Create a basic object storage bucket
        basic = thalassa.ObjectstorageBucket("basic",
            name="my-basic-bucket",
            region="nl-01")
        # Create a public object storage bucket
        public = thalassa.ObjectstorageBucket("public",
            name="my-public-bucket",
            region="nl-01",
            public=True)
        # Create a bucket with a custom policy
        with_policy = thalassa.ObjectstorageBucket("with_policy",
            name="my-policy-bucket",
            region="nl-01",
            public=False,
            policy=json.dumps({
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "AllowReadAccess",
                    "Effect": "Allow",
                    "Principal": {
                        "Thalassa": "*",
                    },
                    "Action": ["s3:GetObject"],
                    "Resource": ["arn:thalassa:s3:::my-policy-bucket/*"],
                    "Condition": {
                        "StringEquals": {
                            "thalassa:User": "u-exampleuserid",
                        },
                    },
                }],
            }))
        pulumi.export("basicBucketId", basic.id)
        pulumi.export("basicBucketName", basic.name)
        pulumi.export("basicBucketEndpoint", basic.endpoint)
        pulumi.export("publicBucketId", public.id)
        pulumi.export("publicBucketName", public.name)
        pulumi.export("policyBucketId", with_policy.id)
        pulumi.export("policyBucketName", with_policy.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Name of the bucket
        :param pulumi.Input[_builtins.str] policy: The bucket policy as a JSON string
        :param pulumi.Input[_builtins.bool] public: Whether the bucket is publicly accessible
        :param pulumi.Input[_builtins.str] region: Region of the bucket
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ObjectstorageBucketArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create and manage an object storage bucket

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_thalassa as thalassa

        # Create a basic object storage bucket
        basic = thalassa.ObjectstorageBucket("basic",
            name="my-basic-bucket",
            region="nl-01")
        # Create a public object storage bucket
        public = thalassa.ObjectstorageBucket("public",
            name="my-public-bucket",
            region="nl-01",
            public=True)
        # Create a bucket with a custom policy
        with_policy = thalassa.ObjectstorageBucket("with_policy",
            name="my-policy-bucket",
            region="nl-01",
            public=False,
            policy=json.dumps({
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "AllowReadAccess",
                    "Effect": "Allow",
                    "Principal": {
                        "Thalassa": "*",
                    },
                    "Action": ["s3:GetObject"],
                    "Resource": ["arn:thalassa:s3:::my-policy-bucket/*"],
                    "Condition": {
                        "StringEquals": {
                            "thalassa:User": "u-exampleuserid",
                        },
                    },
                }],
            }))
        pulumi.export("basicBucketId", basic.id)
        pulumi.export("basicBucketName", basic.name)
        pulumi.export("basicBucketEndpoint", basic.endpoint)
        pulumi.export("publicBucketId", public.id)
        pulumi.export("publicBucketName", public.name)
        pulumi.export("policyBucketId", with_policy.id)
        pulumi.export("policyBucketName", with_policy.name)
        ```

        :param str resource_name: The name of the resource.
        :param ObjectstorageBucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ObjectstorageBucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy: Optional[pulumi.Input[_builtins.str]] = None,
                 public: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ObjectstorageBucketArgs.__new__(ObjectstorageBucketArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            __props__.__dict__["policy"] = policy
            __props__.__dict__["public"] = public
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["status"] = None
        super(ObjectstorageBucket, __self__).__init__(
            'thalassa:index/objectstorageBucket:ObjectstorageBucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy: Optional[pulumi.Input[_builtins.str]] = None,
            public: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'ObjectstorageBucket':
        """
        Get an existing ObjectstorageBucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint: The endpoint URL for the bucket
        :param pulumi.Input[_builtins.str] name: Name of the bucket
        :param pulumi.Input[_builtins.str] policy: The bucket policy as a JSON string
        :param pulumi.Input[_builtins.bool] public: Whether the bucket is publicly accessible
        :param pulumi.Input[_builtins.str] region: Region of the bucket
        :param pulumi.Input[_builtins.str] status: Status of the bucket
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ObjectstorageBucketState.__new__(_ObjectstorageBucketState)

        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["policy"] = policy
        __props__.__dict__["public"] = public
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return ObjectstorageBucket(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[_builtins.str]:
        """
        The endpoint URL for the bucket
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the bucket
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The bucket policy as a JSON string
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter
    def public(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the bucket is publicly accessible
        """
        return pulumi.get(self, "public")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Region of the bucket
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the bucket
        """
        return pulumi.get(self, "status")

