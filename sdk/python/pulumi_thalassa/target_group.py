# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TargetGroupArgs', 'TargetGroup']

@pulumi.input_type
class TargetGroupArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[_builtins.int],
                 protocol: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check_path: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a TargetGroup resource.
        :param pulumi.Input[_builtins.int] port: The port on which the targets receive traffic
        :param pulumi.Input[_builtins.str] protocol: The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC this target group belongs to
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Target Group
        :param pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentArgs']]] attachments: The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
        :param pulumi.Input[_builtins.str] description: A human readable description about the target group
        :param pulumi.Input[_builtins.int] health_check_interval: The approximate amount of time, in seconds, between health checks of an individual target
        :param pulumi.Input[_builtins.str] health_check_path: The path to use for health checks (only for HTTP/HTTPS)
        :param pulumi.Input[_builtins.int] health_check_port: The port to use for health checks
        :param pulumi.Input[_builtins.str] health_check_protocol: The protocol to use for health checks. Must be one of: tcp, http.
        :param pulumi.Input[_builtins.int] health_check_timeout: The amount of time, in seconds, during which no response means a failed health check
        :param pulumi.Input[_builtins.int] healthy_threshold: The number of consecutive health checks successes required before considering an unhealthy target healthy
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Target Group
        :param pulumi.Input[_builtins.str] name: Name of the Target Group
        :param pulumi.Input[_builtins.int] unhealthy_threshold: The number of consecutive health check failures required before considering a target unhealthy
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_path is not None:
            pulumi.set(__self__, "health_check_path", health_check_path)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if health_check_protocol is not None:
            pulumi.set(__self__, "health_check_protocol", health_check_protocol)
        if health_check_timeout is not None:
            pulumi.set(__self__, "health_check_timeout", health_check_timeout)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.int]:
        """
        The port on which the targets receive traffic
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC this target group belongs to
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Target Group
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentArgs']]]]:
        """
        The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
        """
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentArgs']]]]):
        pulumi.set(self, "attachments", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the target group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The approximate amount of time, in seconds, between health checks of an individual target
        """
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "health_check_interval", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path to use for health checks (only for HTTP/HTTPS)
        """
        return pulumi.get(self, "health_check_path")

    @health_check_path.setter
    def health_check_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_path", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The port to use for health checks
        """
        return pulumi.get(self, "health_check_port")

    @health_check_port.setter
    def health_check_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "health_check_port", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckProtocol")
    def health_check_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol to use for health checks. Must be one of: tcp, http.
        """
        return pulumi.get(self, "health_check_protocol")

    @health_check_protocol.setter
    def health_check_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_protocol", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The amount of time, in seconds, during which no response means a failed health check
        """
        return pulumi.get(self, "health_check_timeout")

    @health_check_timeout.setter
    def health_check_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "health_check_timeout", value)

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of consecutive health checks successes required before considering an unhealthy target healthy
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "healthy_threshold", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Target Group
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Target Group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of consecutive health check failures required before considering a target unhealthy
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unhealthy_threshold", value)


@pulumi.input_type
class _TargetGroupState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check_path: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TargetGroup resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Target Group
        :param pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentArgs']]] attachments: The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
        :param pulumi.Input[_builtins.str] description: A human readable description about the target group
        :param pulumi.Input[_builtins.int] health_check_interval: The approximate amount of time, in seconds, between health checks of an individual target
        :param pulumi.Input[_builtins.str] health_check_path: The path to use for health checks (only for HTTP/HTTPS)
        :param pulumi.Input[_builtins.int] health_check_port: The port to use for health checks
        :param pulumi.Input[_builtins.str] health_check_protocol: The protocol to use for health checks. Must be one of: tcp, http.
        :param pulumi.Input[_builtins.int] health_check_timeout: The amount of time, in seconds, during which no response means a failed health check
        :param pulumi.Input[_builtins.int] healthy_threshold: The number of consecutive health checks successes required before considering an unhealthy target healthy
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Target Group
        :param pulumi.Input[_builtins.str] name: Name of the Target Group
        :param pulumi.Input[_builtins.int] port: The port on which the targets receive traffic
        :param pulumi.Input[_builtins.str] protocol: The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
        :param pulumi.Input[_builtins.int] unhealthy_threshold: The number of consecutive health check failures required before considering a target unhealthy
        :param pulumi.Input[_builtins.str] vpc_id: The VPC this target group belongs to
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_path is not None:
            pulumi.set(__self__, "health_check_path", health_check_path)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if health_check_protocol is not None:
            pulumi.set(__self__, "health_check_protocol", health_check_protocol)
        if health_check_timeout is not None:
            pulumi.set(__self__, "health_check_timeout", health_check_timeout)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Target Group
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentArgs']]]]:
        """
        The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
        """
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentArgs']]]]):
        pulumi.set(self, "attachments", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the target group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The approximate amount of time, in seconds, between health checks of an individual target
        """
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "health_check_interval", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path to use for health checks (only for HTTP/HTTPS)
        """
        return pulumi.get(self, "health_check_path")

    @health_check_path.setter
    def health_check_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_path", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The port to use for health checks
        """
        return pulumi.get(self, "health_check_port")

    @health_check_port.setter
    def health_check_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "health_check_port", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckProtocol")
    def health_check_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol to use for health checks. Must be one of: tcp, http.
        """
        return pulumi.get(self, "health_check_protocol")

    @health_check_protocol.setter
    def health_check_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_protocol", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The amount of time, in seconds, during which no response means a failed health check
        """
        return pulumi.get(self, "health_check_timeout")

    @health_check_timeout.setter
    def health_check_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "health_check_timeout", value)

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of consecutive health checks successes required before considering an unhealthy target healthy
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "healthy_threshold", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Target Group
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Target Group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The port on which the targets receive traffic
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of consecutive health check failures required before considering a target unhealthy
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "unhealthy_threshold", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC this target group belongs to
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("thalassa:index/targetGroup:TargetGroup")
class TargetGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupAttachmentArgs', 'TargetGroupAttachmentArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check_path: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a target group for a load balancer

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the target group
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for target group",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a target group with all optional attributes
        example_target_group = thalassa.TargetGroup("example",
            name="example-target-group",
            vpc_id=example.id,
            protocol="tcp",
            port=80,
            description="Example target group for documentation with all optional attributes",
            labels={
                "environment": "production",
                "service": "web",
                "tier": "backend",
            },
            health_check_protocol="http",
            health_check_port=80,
            health_check_path="/health",
            health_check_interval=30,
            health_check_timeout=5,
            healthy_threshold=3,
            unhealthy_threshold=3)
        pulumi.export("targetGroupId", example_target_group.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Target Group
        :param pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupAttachmentArgs', 'TargetGroupAttachmentArgsDict']]]] attachments: The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
        :param pulumi.Input[_builtins.str] description: A human readable description about the target group
        :param pulumi.Input[_builtins.int] health_check_interval: The approximate amount of time, in seconds, between health checks of an individual target
        :param pulumi.Input[_builtins.str] health_check_path: The path to use for health checks (only for HTTP/HTTPS)
        :param pulumi.Input[_builtins.int] health_check_port: The port to use for health checks
        :param pulumi.Input[_builtins.str] health_check_protocol: The protocol to use for health checks. Must be one of: tcp, http.
        :param pulumi.Input[_builtins.int] health_check_timeout: The amount of time, in seconds, during which no response means a failed health check
        :param pulumi.Input[_builtins.int] healthy_threshold: The number of consecutive health checks successes required before considering an unhealthy target healthy
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Target Group
        :param pulumi.Input[_builtins.str] name: Name of the Target Group
        :param pulumi.Input[_builtins.int] port: The port on which the targets receive traffic
        :param pulumi.Input[_builtins.str] protocol: The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
        :param pulumi.Input[_builtins.int] unhealthy_threshold: The number of consecutive health check failures required before considering a target unhealthy
        :param pulumi.Input[_builtins.str] vpc_id: The VPC this target group belongs to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TargetGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a target group for a load balancer

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the target group
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for target group",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a target group with all optional attributes
        example_target_group = thalassa.TargetGroup("example",
            name="example-target-group",
            vpc_id=example.id,
            protocol="tcp",
            port=80,
            description="Example target group for documentation with all optional attributes",
            labels={
                "environment": "production",
                "service": "web",
                "tier": "backend",
            },
            health_check_protocol="http",
            health_check_port=80,
            health_check_path="/health",
            health_check_interval=30,
            health_check_timeout=5,
            healthy_threshold=3,
            unhealthy_threshold=3)
        pulumi.export("targetGroupId", example_target_group.id)
        ```

        :param str resource_name: The name of the resource.
        :param TargetGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TargetGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupAttachmentArgs', 'TargetGroupAttachmentArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check_path: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
                 health_check_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TargetGroupArgs.__new__(TargetGroupArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["attachments"] = attachments
            __props__.__dict__["description"] = description
            __props__.__dict__["health_check_interval"] = health_check_interval
            __props__.__dict__["health_check_path"] = health_check_path
            __props__.__dict__["health_check_port"] = health_check_port
            __props__.__dict__["health_check_protocol"] = health_check_protocol
            __props__.__dict__["health_check_timeout"] = health_check_timeout
            __props__.__dict__["healthy_threshold"] = healthy_threshold
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["unhealthy_threshold"] = unhealthy_threshold
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["slug"] = None
        super(TargetGroup, __self__).__init__(
            'thalassa:index/targetGroup:TargetGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupAttachmentArgs', 'TargetGroupAttachmentArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            health_check_interval: Optional[pulumi.Input[_builtins.int]] = None,
            health_check_path: Optional[pulumi.Input[_builtins.str]] = None,
            health_check_port: Optional[pulumi.Input[_builtins.int]] = None,
            health_check_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            health_check_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            healthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.int]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            unhealthy_threshold: Optional[pulumi.Input[_builtins.int]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'TargetGroup':
        """
        Get an existing TargetGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Target Group
        :param pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupAttachmentArgs', 'TargetGroupAttachmentArgsDict']]]] attachments: The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
        :param pulumi.Input[_builtins.str] description: A human readable description about the target group
        :param pulumi.Input[_builtins.int] health_check_interval: The approximate amount of time, in seconds, between health checks of an individual target
        :param pulumi.Input[_builtins.str] health_check_path: The path to use for health checks (only for HTTP/HTTPS)
        :param pulumi.Input[_builtins.int] health_check_port: The port to use for health checks
        :param pulumi.Input[_builtins.str] health_check_protocol: The protocol to use for health checks. Must be one of: tcp, http.
        :param pulumi.Input[_builtins.int] health_check_timeout: The amount of time, in seconds, during which no response means a failed health check
        :param pulumi.Input[_builtins.int] healthy_threshold: The number of consecutive health checks successes required before considering an unhealthy target healthy
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Target Group
        :param pulumi.Input[_builtins.str] name: Name of the Target Group
        :param pulumi.Input[_builtins.int] port: The port on which the targets receive traffic
        :param pulumi.Input[_builtins.str] protocol: The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
        :param pulumi.Input[_builtins.int] unhealthy_threshold: The number of consecutive health check failures required before considering a target unhealthy
        :param pulumi.Input[_builtins.str] vpc_id: The VPC this target group belongs to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TargetGroupState.__new__(_TargetGroupState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["attachments"] = attachments
        __props__.__dict__["description"] = description
        __props__.__dict__["health_check_interval"] = health_check_interval
        __props__.__dict__["health_check_path"] = health_check_path
        __props__.__dict__["health_check_port"] = health_check_port
        __props__.__dict__["health_check_protocol"] = health_check_protocol
        __props__.__dict__["health_check_timeout"] = health_check_timeout
        __props__.__dict__["healthy_threshold"] = healthy_threshold
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["slug"] = slug
        __props__.__dict__["unhealthy_threshold"] = unhealthy_threshold
        __props__.__dict__["vpc_id"] = vpc_id
        return TargetGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the Target Group
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> pulumi.Output[Sequence['outputs.TargetGroupAttachment']]:
        """
        The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
        """
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A human readable description about the target group
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The approximate amount of time, in seconds, between health checks of an individual target
        """
        return pulumi.get(self, "health_check_interval")

    @_builtins.property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The path to use for health checks (only for HTTP/HTTPS)
        """
        return pulumi.get(self, "health_check_path")

    @_builtins.property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The port to use for health checks
        """
        return pulumi.get(self, "health_check_port")

    @_builtins.property
    @pulumi.getter(name="healthCheckProtocol")
    def health_check_protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The protocol to use for health checks. Must be one of: tcp, http.
        """
        return pulumi.get(self, "health_check_protocol")

    @_builtins.property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The amount of time, in seconds, during which no response means a failed health check
        """
        return pulumi.get(self, "health_check_timeout")

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The number of consecutive health checks successes required before considering an unhealthy target healthy
        """
        return pulumi.get(self, "healthy_threshold")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the Target Group
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Target Group
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.int]:
        """
        The port on which the targets receive traffic
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The number of consecutive health check failures required before considering a target unhealthy
        """
        return pulumi.get(self, "unhealthy_threshold")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC this target group belongs to
        """
        return pulumi.get(self, "vpc_id")

