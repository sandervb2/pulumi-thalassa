# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KubernetesNodePoolArgs', 'KubernetesNodePool']

@pulumi.input_type
class KubernetesNodePoolArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 machine_type: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_autohealing: Optional[pulumi.Input[_builtins.bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesNodePoolNodeTaintArgs']]]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_strategy: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KubernetesNodePool resource.
        :param pulumi.Input[_builtins.str] availability_zone: Availability zone for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] cluster_id: Kubernetes Cluster of the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] machine_type: Machine type for the Kubernetes Node Pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        :param pulumi.Input[_builtins.str] description: A human readable description about the Kubernetes Node Pool
        :param pulumi.Input[_builtins.bool] enable_autohealing: Enable autohealing for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] kubernetes_version: Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        :param pulumi.Input[_builtins.int] max_replicas: Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        :param pulumi.Input[_builtins.int] min_replicas: Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        :param pulumi.Input[_builtins.str] name: Name of the Kubernetes Node Pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_annotations: Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_labels: Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        :param pulumi.Input[Sequence[pulumi.Input['KubernetesNodePoolNodeTaintArgs']]] node_taints: Taints for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.int] replicas: Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the machines in the Node Pool
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        :param pulumi.Input[_builtins.str] upgrade_strategy: Upgrade strategy for the Kubernetes Node Pool
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "machine_type", machine_type)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_autohealing is not None:
            pulumi.set(__self__, "enable_autohealing", enable_autohealing)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_annotations is not None:
            pulumi.set(__self__, "node_annotations", node_annotations)
        if node_labels is not None:
            pulumi.set(__self__, "node_labels", node_labels)
        if node_taints is not None:
            pulumi.set(__self__, "node_taints", node_taints)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if upgrade_strategy is not None:
            pulumi.set(__self__, "upgrade_strategy", upgrade_strategy)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[_builtins.str]:
        """
        Availability zone for the Kubernetes Node Pool
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Kubernetes Cluster of the Kubernetes Node Pool
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[_builtins.str]:
        """
        Machine type for the Kubernetes Node Pool
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the Kubernetes Node Pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableAutohealing")
    def enable_autohealing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable autohealing for the Kubernetes Node Pool
        """
        return pulumi.get(self, "enable_autohealing")

    @enable_autohealing.setter
    def enable_autohealing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_autohealing", value)

    @_builtins.property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kubernetes_version", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replicas", value)

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replicas", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Kubernetes Node Pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nodeAnnotations")
    def node_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        """
        return pulumi.get(self, "node_annotations")

    @node_annotations.setter
    def node_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_annotations", value)

    @_builtins.property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        """
        return pulumi.get(self, "node_labels")

    @node_labels.setter
    def node_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_labels", value)

    @_builtins.property
    @pulumi.getter(name="nodeTaints")
    def node_taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesNodePoolNodeTaintArgs']]]]:
        """
        Taints for the Kubernetes Node Pool
        """
        return pulumi.get(self, "node_taints")

    @node_taints.setter
    def node_taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesNodePoolNodeTaintArgs']]]]):
        pulumi.set(self, "node_taints", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replicas", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the machines in the Node Pool
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Upgrade strategy for the Kubernetes Node Pool
        """
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_strategy", value)


@pulumi.input_type
class _KubernetesNodePoolState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_autohealing: Optional[pulumi.Input[_builtins.bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesNodePoolNodeTaintArgs']]]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_strategy: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KubernetesNodePool resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        :param pulumi.Input[_builtins.str] availability_zone: Availability zone for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] cluster_id: Kubernetes Cluster of the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] description: A human readable description about the Kubernetes Node Pool
        :param pulumi.Input[_builtins.bool] enable_autohealing: Enable autohealing for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] kubernetes_version: Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        :param pulumi.Input[_builtins.str] machine_type: Machine type for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.int] max_replicas: Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        :param pulumi.Input[_builtins.int] min_replicas: Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        :param pulumi.Input[_builtins.str] name: Name of the Kubernetes Node Pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_annotations: Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_labels: Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        :param pulumi.Input[Sequence[pulumi.Input['KubernetesNodePoolNodeTaintArgs']]] node_taints: Taints for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.int] replicas: Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the machines in the Node Pool
        :param pulumi.Input[_builtins.str] slug: Slug of the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] status: Status of the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        :param pulumi.Input[_builtins.str] upgrade_strategy: Upgrade strategy for the Kubernetes Node Pool
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_autohealing is not None:
            pulumi.set(__self__, "enable_autohealing", enable_autohealing)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_annotations is not None:
            pulumi.set(__self__, "node_annotations", node_annotations)
        if node_labels is not None:
            pulumi.set(__self__, "node_labels", node_labels)
        if node_taints is not None:
            pulumi.set(__self__, "node_taints", node_taints)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if security_group_attachments is not None:
            pulumi.set(__self__, "security_group_attachments", security_group_attachments)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if upgrade_strategy is not None:
            pulumi.set(__self__, "upgrade_strategy", upgrade_strategy)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Availability zone for the Kubernetes Node Pool
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes Cluster of the Kubernetes Node Pool
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human readable description about the Kubernetes Node Pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enableAutohealing")
    def enable_autohealing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable autohealing for the Kubernetes Node Pool
        """
        return pulumi.get(self, "enable_autohealing")

    @enable_autohealing.setter
    def enable_autohealing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_autohealing", value)

    @_builtins.property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kubernetes_version", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine type for the Kubernetes Node Pool
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replicas", value)

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replicas", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Kubernetes Node Pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nodeAnnotations")
    def node_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        """
        return pulumi.get(self, "node_annotations")

    @node_annotations.setter
    def node_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_annotations", value)

    @_builtins.property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        """
        return pulumi.get(self, "node_labels")

    @node_labels.setter
    def node_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_labels", value)

    @_builtins.property
    @pulumi.getter(name="nodeTaints")
    def node_taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesNodePoolNodeTaintArgs']]]]:
        """
        Taints for the Kubernetes Node Pool
        """
        return pulumi.get(self, "node_taints")

    @node_taints.setter
    def node_taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubernetesNodePoolNodeTaintArgs']]]]):
        pulumi.set(self, "node_taints", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "replicas", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List identities of security group that will be attached to the machines in the Node Pool
        """
        return pulumi.get(self, "security_group_attachments")

    @security_group_attachments.setter
    def security_group_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_attachments", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Slug of the Kubernetes Node Pool
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the Kubernetes Node Pool
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Upgrade strategy for the Kubernetes Node Pool
        """
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "upgrade_strategy", value)


@pulumi.type_token("thalassa:index/kubernetesNodePool:KubernetesNodePool")
class KubernetesNodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_autohealing: Optional[pulumi.Input[_builtins.bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KubernetesNodePoolNodeTaintArgs', 'KubernetesNodePoolNodeTaintArgsDict']]]]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create an Kubernetes Node Pool for a Kubernetes Cluster. This resource is only available for managed Kubernetes Clusters. A Node Pool is a group of nodes that are identically configured and are automatically joined to the Kubernetes Cluster. Node Pools can be scaled up and down as needed.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        :param pulumi.Input[_builtins.str] availability_zone: Availability zone for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] cluster_id: Kubernetes Cluster of the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] description: A human readable description about the Kubernetes Node Pool
        :param pulumi.Input[_builtins.bool] enable_autohealing: Enable autohealing for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] kubernetes_version: Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        :param pulumi.Input[_builtins.str] machine_type: Machine type for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.int] max_replicas: Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        :param pulumi.Input[_builtins.int] min_replicas: Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        :param pulumi.Input[_builtins.str] name: Name of the Kubernetes Node Pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_annotations: Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_labels: Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KubernetesNodePoolNodeTaintArgs', 'KubernetesNodePoolNodeTaintArgsDict']]]] node_taints: Taints for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.int] replicas: Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the machines in the Node Pool
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        :param pulumi.Input[_builtins.str] upgrade_strategy: Upgrade strategy for the Kubernetes Node Pool
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KubernetesNodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create an Kubernetes Node Pool for a Kubernetes Cluster. This resource is only available for managed Kubernetes Clusters. A Node Pool is a group of nodes that are identically configured and are automatically joined to the Kubernetes Cluster. Node Pools can be scaled up and down as needed.

        :param str resource_name: The name of the resource.
        :param KubernetesNodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubernetesNodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_autohealing: Optional[pulumi.Input[_builtins.bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KubernetesNodePoolNodeTaintArgs', 'KubernetesNodePoolNodeTaintArgsDict']]]]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.int]] = None,
                 security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubernetesNodePoolArgs.__new__(KubernetesNodePoolArgs)

            __props__.__dict__["annotations"] = annotations
            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_autohealing"] = enable_autohealing
            __props__.__dict__["kubernetes_version"] = kubernetes_version
            __props__.__dict__["labels"] = labels
            if machine_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_type'")
            __props__.__dict__["machine_type"] = machine_type
            __props__.__dict__["max_replicas"] = max_replicas
            __props__.__dict__["min_replicas"] = min_replicas
            __props__.__dict__["name"] = name
            __props__.__dict__["node_annotations"] = node_annotations
            __props__.__dict__["node_labels"] = node_labels
            __props__.__dict__["node_taints"] = node_taints
            __props__.__dict__["organisation_id"] = organisation_id
            __props__.__dict__["replicas"] = replicas
            __props__.__dict__["security_group_attachments"] = security_group_attachments
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["upgrade_strategy"] = upgrade_strategy
            __props__.__dict__["slug"] = None
            __props__.__dict__["status"] = None
        super(KubernetesNodePool, __self__).__init__(
            'thalassa:index/kubernetesNodePool:KubernetesNodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enable_autohealing: Optional[pulumi.Input[_builtins.bool]] = None,
            kubernetes_version: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            machine_type: Optional[pulumi.Input[_builtins.str]] = None,
            max_replicas: Optional[pulumi.Input[_builtins.int]] = None,
            min_replicas: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            node_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            node_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            node_taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KubernetesNodePoolNodeTaintArgs', 'KubernetesNodePoolNodeTaintArgsDict']]]]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            replicas: Optional[pulumi.Input[_builtins.int]] = None,
            security_group_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            upgrade_strategy: Optional[pulumi.Input[_builtins.str]] = None) -> 'KubernetesNodePool':
        """
        Get an existing KubernetesNodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        :param pulumi.Input[_builtins.str] availability_zone: Availability zone for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] cluster_id: Kubernetes Cluster of the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] description: A human readable description about the Kubernetes Node Pool
        :param pulumi.Input[_builtins.bool] enable_autohealing: Enable autohealing for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] kubernetes_version: Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        :param pulumi.Input[_builtins.str] machine_type: Machine type for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.int] max_replicas: Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        :param pulumi.Input[_builtins.int] min_replicas: Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        :param pulumi.Input[_builtins.str] name: Name of the Kubernetes Node Pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_annotations: Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] node_labels: Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KubernetesNodePoolNodeTaintArgs', 'KubernetesNodePoolNodeTaintArgsDict']]]] node_taints: Taints for the Kubernetes Node Pool
        :param pulumi.Input[_builtins.int] replicas: Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_group_attachments: List identities of security group that will be attached to the machines in the Node Pool
        :param pulumi.Input[_builtins.str] slug: Slug of the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] status: Status of the Kubernetes Node Pool
        :param pulumi.Input[_builtins.str] subnet_id: Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        :param pulumi.Input[_builtins.str] upgrade_strategy: Upgrade strategy for the Kubernetes Node Pool
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KubernetesNodePoolState.__new__(_KubernetesNodePoolState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_autohealing"] = enable_autohealing
        __props__.__dict__["kubernetes_version"] = kubernetes_version
        __props__.__dict__["labels"] = labels
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["max_replicas"] = max_replicas
        __props__.__dict__["min_replicas"] = min_replicas
        __props__.__dict__["name"] = name
        __props__.__dict__["node_annotations"] = node_annotations
        __props__.__dict__["node_labels"] = node_labels
        __props__.__dict__["node_taints"] = node_taints
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["security_group_attachments"] = security_group_attachments
        __props__.__dict__["slug"] = slug
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["upgrade_strategy"] = upgrade_strategy
        return KubernetesNodePool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        """
        Availability zone for the Kubernetes Node Pool
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Kubernetes Cluster of the Kubernetes Node Pool
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A human readable description about the Kubernetes Node Pool
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableAutohealing")
    def enable_autohealing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable autohealing for the Kubernetes Node Pool
        """
        return pulumi.get(self, "enable_autohealing")

    @_builtins.property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
        """
        return pulumi.get(self, "kubernetes_version")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[_builtins.str]:
        """
        Machine type for the Kubernetes Node Pool
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        """
        return pulumi.get(self, "max_replicas")

    @_builtins.property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.
        """
        return pulumi.get(self, "min_replicas")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Kubernetes Node Pool
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeAnnotations")
    def node_annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
        """
        return pulumi.get(self, "node_annotations")

    @_builtins.property
    @pulumi.getter(name="nodeLabels")
    def node_labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
        """
        return pulumi.get(self, "node_labels")

    @_builtins.property
    @pulumi.getter(name="nodeTaints")
    def node_taints(self) -> pulumi.Output[Optional[Sequence['outputs.KubernetesNodePoolNodeTaint']]]:
        """
        Taints for the Kubernetes Node Pool
        """
        return pulumi.get(self, "node_taints")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.
        """
        return pulumi.get(self, "replicas")

    @_builtins.property
    @pulumi.getter(name="securityGroupAttachments")
    def security_group_attachments(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List identities of security group that will be attached to the machines in the Node Pool
        """
        return pulumi.get(self, "security_group_attachments")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        """
        Slug of the Kubernetes Node Pool
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the Kubernetes Node Pool
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Upgrade strategy for the Kubernetes Node Pool
        """
        return pulumi.get(self, "upgrade_strategy")

