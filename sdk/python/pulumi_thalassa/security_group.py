# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SecurityGroupArgs', 'SecurityGroup']

@pulumi.input_type
class SecurityGroupArgs:
    def __init__(__self__, *,
                 vpc_id: pulumi.Input[_builtins.str],
                 allow_same_group_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupEgressRuleArgs']]]] = None,
                 ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupIngressRuleArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SecurityGroup resource.
        :param pulumi.Input[_builtins.str] vpc_id: Identity of the VPC that the security group belongs to
        :param pulumi.Input[_builtins.bool] allow_same_group_traffic: Flag that indicates if the security group allows traffic between instances in the same security group
        :param pulumi.Input[_builtins.str] description: Description of the security group
        :param pulumi.Input[Sequence[pulumi.Input['SecurityGroupEgressRuleArgs']]] egress_rules: List of egress rules for the security group
        :param pulumi.Input[Sequence[pulumi.Input['SecurityGroupIngressRuleArgs']]] ingress_rules: List of ingress rules for the security group
        :param pulumi.Input[_builtins.str] name: Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        if allow_same_group_traffic is not None:
            pulumi.set(__self__, "allow_same_group_traffic", allow_same_group_traffic)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egress_rules is not None:
            pulumi.set(__self__, "egress_rules", egress_rules)
        if ingress_rules is not None:
            pulumi.set(__self__, "ingress_rules", ingress_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        Identity of the VPC that the security group belongs to
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="allowSameGroupTraffic")
    def allow_same_group_traffic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag that indicates if the security group allows traffic between instances in the same security group
        """
        return pulumi.get(self, "allow_same_group_traffic")

    @allow_same_group_traffic.setter
    def allow_same_group_traffic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_same_group_traffic", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the security group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupEgressRuleArgs']]]]:
        """
        List of egress rules for the security group
        """
        return pulumi.get(self, "egress_rules")

    @egress_rules.setter
    def egress_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupEgressRuleArgs']]]]):
        pulumi.set(self, "egress_rules", value)

    @_builtins.property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupIngressRuleArgs']]]]:
        """
        List of ingress rules for the security group
        """
        return pulumi.get(self, "ingress_rules")

    @ingress_rules.setter
    def ingress_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupIngressRuleArgs']]]]):
        pulumi.set(self, "ingress_rules", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)


@pulumi.input_type
class _SecurityGroupState:
    def __init__(__self__, *,
                 allow_same_group_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupEgressRuleArgs']]]] = None,
                 identity: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupIngressRuleArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SecurityGroup resources.
        :param pulumi.Input[_builtins.bool] allow_same_group_traffic: Flag that indicates if the security group allows traffic between instances in the same security group
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the security group
        :param pulumi.Input[_builtins.str] description: Description of the security group
        :param pulumi.Input[Sequence[pulumi.Input['SecurityGroupEgressRuleArgs']]] egress_rules: List of egress rules for the security group
        :param pulumi.Input[_builtins.str] identity: Identity of the security group
        :param pulumi.Input[Sequence[pulumi.Input['SecurityGroupIngressRuleArgs']]] ingress_rules: List of ingress rules for the security group
        :param pulumi.Input[_builtins.str] name: Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        :param pulumi.Input[_builtins.str] status: Status of the security group
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the security group
        :param pulumi.Input[_builtins.str] vpc_id: Identity of the VPC that the security group belongs to
        """
        if allow_same_group_traffic is not None:
            pulumi.set(__self__, "allow_same_group_traffic", allow_same_group_traffic)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egress_rules is not None:
            pulumi.set(__self__, "egress_rules", egress_rules)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if ingress_rules is not None:
            pulumi.set(__self__, "ingress_rules", ingress_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="allowSameGroupTraffic")
    def allow_same_group_traffic(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag that indicates if the security group allows traffic between instances in the same security group
        """
        return pulumi.get(self, "allow_same_group_traffic")

    @allow_same_group_traffic.setter
    def allow_same_group_traffic(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_same_group_traffic", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation timestamp of the security group
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the security group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupEgressRuleArgs']]]]:
        """
        List of egress rules for the security group
        """
        return pulumi.get(self, "egress_rules")

    @egress_rules.setter
    def egress_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupEgressRuleArgs']]]]):
        pulumi.set(self, "egress_rules", value)

    @_builtins.property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the security group
        """
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity", value)

    @_builtins.property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupIngressRuleArgs']]]]:
        """
        List of ingress rules for the security group
        """
        return pulumi.get(self, "ingress_rules")

    @ingress_rules.setter
    def ingress_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupIngressRuleArgs']]]]):
        pulumi.set(self, "ingress_rules", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the security group
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update timestamp of the security group
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the VPC that the security group belongs to
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("thalassa:index/securityGroup:SecurityGroup")
class SecurityGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_same_group_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupEgressRuleArgs', 'SecurityGroupEgressRuleArgsDict']]]]] = None,
                 ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupIngressRuleArgs', 'SecurityGroupIngressRuleArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for security group",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a security group
        example_security_group = thalassa.SecurityGroup("example",
            name="example-security-group",
            description="Example security group for documentation",
            vpc_id=example.id,
            allow_same_group_traffic=False,
            ingress_rules=[
                {
                    "name": "allow-http",
                    "ip_version": "ipv4",
                    "protocol": "tcp",
                    "priority": 100,
                    "remote_type": "address",
                    "remote_address": "10.0.0.0/0",
                    "port_range_min": 80,
                    "port_range_max": 80,
                    "policy": "allow",
                },
                {
                    "name": "allow-https",
                    "ip_version": "ipv4",
                    "protocol": "tcp",
                    "priority": 101,
                    "remote_type": "address",
                    "remote_address": "0.0.0.0/0",
                    "port_range_min": 443,
                    "port_range_max": 443,
                    "policy": "allow",
                },
            ],
            egress_rules=[{
                "name": "allow-all",
                "ip_version": "ipv4",
                "protocol": "all",
                "priority": 100,
                "remote_type": "address",
                "remote_address": "0.0.0.0/0",
                "policy": "allow",
            }])
        pulumi.export("securityGroupId", example_security_group.id)
        pulumi.export("securityGroupName", example_security_group.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_same_group_traffic: Flag that indicates if the security group allows traffic between instances in the same security group
        :param pulumi.Input[_builtins.str] description: Description of the security group
        :param pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupEgressRuleArgs', 'SecurityGroupEgressRuleArgsDict']]]] egress_rules: List of egress rules for the security group
        :param pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupIngressRuleArgs', 'SecurityGroupIngressRuleArgsDict']]]] ingress_rules: List of ingress rules for the security group
        :param pulumi.Input[_builtins.str] name: Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        :param pulumi.Input[_builtins.str] vpc_id: Identity of the VPC that the security group belongs to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for security group",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a security group
        example_security_group = thalassa.SecurityGroup("example",
            name="example-security-group",
            description="Example security group for documentation",
            vpc_id=example.id,
            allow_same_group_traffic=False,
            ingress_rules=[
                {
                    "name": "allow-http",
                    "ip_version": "ipv4",
                    "protocol": "tcp",
                    "priority": 100,
                    "remote_type": "address",
                    "remote_address": "10.0.0.0/0",
                    "port_range_min": 80,
                    "port_range_max": 80,
                    "policy": "allow",
                },
                {
                    "name": "allow-https",
                    "ip_version": "ipv4",
                    "protocol": "tcp",
                    "priority": 101,
                    "remote_type": "address",
                    "remote_address": "0.0.0.0/0",
                    "port_range_min": 443,
                    "port_range_max": 443,
                    "policy": "allow",
                },
            ],
            egress_rules=[{
                "name": "allow-all",
                "ip_version": "ipv4",
                "protocol": "all",
                "priority": 100,
                "remote_type": "address",
                "remote_address": "0.0.0.0/0",
                "policy": "allow",
            }])
        pulumi.export("securityGroupId", example_security_group.id)
        pulumi.export("securityGroupName", example_security_group.name)
        ```

        :param str resource_name: The name of the resource.
        :param SecurityGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_same_group_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupEgressRuleArgs', 'SecurityGroupEgressRuleArgsDict']]]]] = None,
                 ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupIngressRuleArgs', 'SecurityGroupIngressRuleArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityGroupArgs.__new__(SecurityGroupArgs)

            __props__.__dict__["allow_same_group_traffic"] = allow_same_group_traffic
            __props__.__dict__["description"] = description
            __props__.__dict__["egress_rules"] = egress_rules
            __props__.__dict__["ingress_rules"] = ingress_rules
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["identity"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(SecurityGroup, __self__).__init__(
            'thalassa:index/securityGroup:SecurityGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_same_group_traffic: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            egress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupEgressRuleArgs', 'SecurityGroupEgressRuleArgsDict']]]]] = None,
            identity: Optional[pulumi.Input[_builtins.str]] = None,
            ingress_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupIngressRuleArgs', 'SecurityGroupIngressRuleArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SecurityGroup':
        """
        Get an existing SecurityGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_same_group_traffic: Flag that indicates if the security group allows traffic between instances in the same security group
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the security group
        :param pulumi.Input[_builtins.str] description: Description of the security group
        :param pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupEgressRuleArgs', 'SecurityGroupEgressRuleArgsDict']]]] egress_rules: List of egress rules for the security group
        :param pulumi.Input[_builtins.str] identity: Identity of the security group
        :param pulumi.Input[Sequence[pulumi.Input[Union['SecurityGroupIngressRuleArgs', 'SecurityGroupIngressRuleArgsDict']]]] ingress_rules: List of ingress rules for the security group
        :param pulumi.Input[_builtins.str] name: Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        :param pulumi.Input[_builtins.str] status: Status of the security group
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the security group
        :param pulumi.Input[_builtins.str] vpc_id: Identity of the VPC that the security group belongs to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityGroupState.__new__(_SecurityGroupState)

        __props__.__dict__["allow_same_group_traffic"] = allow_same_group_traffic
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["egress_rules"] = egress_rules
        __props__.__dict__["identity"] = identity
        __props__.__dict__["ingress_rules"] = ingress_rules
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vpc_id"] = vpc_id
        return SecurityGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowSameGroupTraffic")
    def allow_same_group_traffic(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Flag that indicates if the security group allows traffic between instances in the same security group
        """
        return pulumi.get(self, "allow_same_group_traffic")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Creation timestamp of the security group
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the security group
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="egressRules")
    def egress_rules(self) -> pulumi.Output[Optional[Sequence['outputs.SecurityGroupEgressRule']]]:
        """
        List of egress rules for the security group
        """
        return pulumi.get(self, "egress_rules")

    @_builtins.property
    @pulumi.getter
    def identity(self) -> pulumi.Output[_builtins.str]:
        """
        Identity of the security group
        """
        return pulumi.get(self, "identity")

    @_builtins.property
    @pulumi.getter(name="ingressRules")
    def ingress_rules(self) -> pulumi.Output[Optional[Sequence['outputs.SecurityGroupIngressRule']]]:
        """
        List of ingress rules for the security group
        """
        return pulumi.get(self, "ingress_rules")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the security group
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last update timestamp of the security group
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identity of the VPC that the security group belongs to
        """
        return pulumi.get(self, "vpc_id")

