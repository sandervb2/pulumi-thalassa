# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RouteTableRouteArgs', 'RouteTableRoute']

@pulumi.input_type
class RouteTableRouteArgs:
    def __init__(__self__, *,
                 destination_cidr: pulumi.Input[_builtins.str],
                 route_table_id: pulumi.Input[_builtins.str],
                 gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 target_natgateway: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RouteTableRoute resource.
        :param pulumi.Input[_builtins.str] destination_cidr: Destination CIDR of the Route
        :param pulumi.Input[_builtins.str] route_table_id: RouteTable of the Route
        :param pulumi.Input[_builtins.str] gateway_address: Gateway Address of the Route
        :param pulumi.Input[_builtins.str] notes: Notes for the Route
        :param pulumi.Input[_builtins.str] organisation_id: Organisation of the RouteTable
        :param pulumi.Input[_builtins.str] target_gateway: Target Gateway of the Route
        :param pulumi.Input[_builtins.str] target_natgateway: Target NAT Gateway of the Route
        """
        pulumi.set(__self__, "destination_cidr", destination_cidr)
        pulumi.set(__self__, "route_table_id", route_table_id)
        if gateway_address is not None:
            pulumi.set(__self__, "gateway_address", gateway_address)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if target_gateway is not None:
            pulumi.set(__self__, "target_gateway", target_gateway)
        if target_natgateway is not None:
            pulumi.set(__self__, "target_natgateway", target_natgateway)

    @_builtins.property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> pulumi.Input[_builtins.str]:
        """
        Destination CIDR of the Route
        """
        return pulumi.get(self, "destination_cidr")

    @destination_cidr.setter
    def destination_cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_cidr", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Input[_builtins.str]:
        """
        RouteTable of the Route
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "route_table_id", value)

    @_builtins.property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway Address of the Route
        """
        return pulumi.get(self, "gateway_address")

    @gateway_address.setter
    def gateway_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_address", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Notes for the Route
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Organisation of the RouteTable
        """
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="targetGateway")
    def target_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target Gateway of the Route
        """
        return pulumi.get(self, "target_gateway")

    @target_gateway.setter
    def target_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_gateway", value)

    @_builtins.property
    @pulumi.getter(name="targetNatgateway")
    def target_natgateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target NAT Gateway of the Route
        """
        return pulumi.get(self, "target_natgateway")

    @target_natgateway.setter
    def target_natgateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_natgateway", value)


@pulumi.input_type
class _RouteTableRouteState:
    def __init__(__self__, *,
                 destination_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 target_natgateway: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RouteTableRoute resources.
        :param pulumi.Input[_builtins.str] destination_cidr: Destination CIDR of the Route
        :param pulumi.Input[_builtins.str] gateway_address: Gateway Address of the Route
        :param pulumi.Input[_builtins.str] notes: Notes for the Route
        :param pulumi.Input[_builtins.str] organisation_id: Organisation of the RouteTable
        :param pulumi.Input[_builtins.str] route_table_id: RouteTable of the Route
        :param pulumi.Input[_builtins.str] target_gateway: Target Gateway of the Route
        :param pulumi.Input[_builtins.str] target_natgateway: Target NAT Gateway of the Route
        """
        if destination_cidr is not None:
            pulumi.set(__self__, "destination_cidr", destination_cidr)
        if gateway_address is not None:
            pulumi.set(__self__, "gateway_address", gateway_address)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if target_gateway is not None:
            pulumi.set(__self__, "target_gateway", target_gateway)
        if target_natgateway is not None:
            pulumi.set(__self__, "target_natgateway", target_natgateway)

    @_builtins.property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination CIDR of the Route
        """
        return pulumi.get(self, "destination_cidr")

    @destination_cidr.setter
    def destination_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_cidr", value)

    @_builtins.property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway Address of the Route
        """
        return pulumi.get(self, "gateway_address")

    @gateway_address.setter
    def gateway_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_address", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Notes for the Route
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Organisation of the RouteTable
        """
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        RouteTable of the Route
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_table_id", value)

    @_builtins.property
    @pulumi.getter(name="targetGateway")
    def target_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target Gateway of the Route
        """
        return pulumi.get(self, "target_gateway")

    @target_gateway.setter
    def target_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_gateway", value)

    @_builtins.property
    @pulumi.getter(name="targetNatgateway")
    def target_natgateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target NAT Gateway of the Route
        """
        return pulumi.get(self, "target_natgateway")

    @target_natgateway.setter
    def target_natgateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_natgateway", value)


@pulumi.type_token("thalassa:index/routeTableRoute:RouteTableRoute")
class RouteTableRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 target_natgateway: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create an route table route with a destination cidr block, target gateway, target nat gateway and gateway address within a route table.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the route table
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for route table route",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the NAT gateway
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for NAT gateway",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a route table
        example_route_table = thalassa.RouteTable("example",
            name="example-route-table",
            description="Example route table for route",
            vpc_id=example.id)
        # Create a NAT gateway for the route
        example_natgateway = thalassa.Natgateway("example",
            name="example-nat-gateway",
            subnet_id=example_subnet.id)
        # Create a route table route
        example_route_table_route = thalassa.RouteTableRoute("example",
            route_table_id=example_route_table.id,
            destination_cidr="0.0.0.0/0",
            target_natgateway=example_natgateway.id)
        pulumi.export("routeId", example_route_table_route.id)
        pulumi.export("routeDestination", example_route_table_route.destination_cidr)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] destination_cidr: Destination CIDR of the Route
        :param pulumi.Input[_builtins.str] gateway_address: Gateway Address of the Route
        :param pulumi.Input[_builtins.str] notes: Notes for the Route
        :param pulumi.Input[_builtins.str] organisation_id: Organisation of the RouteTable
        :param pulumi.Input[_builtins.str] route_table_id: RouteTable of the Route
        :param pulumi.Input[_builtins.str] target_gateway: Target Gateway of the Route
        :param pulumi.Input[_builtins.str] target_natgateway: Target NAT Gateway of the Route
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteTableRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create an route table route with a destination cidr block, target gateway, target nat gateway and gateway address within a route table.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the route table
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for route table route",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the NAT gateway
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for NAT gateway",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a route table
        example_route_table = thalassa.RouteTable("example",
            name="example-route-table",
            description="Example route table for route",
            vpc_id=example.id)
        # Create a NAT gateway for the route
        example_natgateway = thalassa.Natgateway("example",
            name="example-nat-gateway",
            subnet_id=example_subnet.id)
        # Create a route table route
        example_route_table_route = thalassa.RouteTableRoute("example",
            route_table_id=example_route_table.id,
            destination_cidr="0.0.0.0/0",
            target_natgateway=example_natgateway.id)
        pulumi.export("routeId", example_route_table_route.id)
        pulumi.export("routeDestination", example_route_table_route.destination_cidr)
        ```

        :param str resource_name: The name of the resource.
        :param RouteTableRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteTableRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 target_natgateway: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteTableRouteArgs.__new__(RouteTableRouteArgs)

            if destination_cidr is None and not opts.urn:
                raise TypeError("Missing required property 'destination_cidr'")
            __props__.__dict__["destination_cidr"] = destination_cidr
            __props__.__dict__["gateway_address"] = gateway_address
            __props__.__dict__["notes"] = notes
            __props__.__dict__["organisation_id"] = organisation_id
            if route_table_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_table_id'")
            __props__.__dict__["route_table_id"] = route_table_id
            __props__.__dict__["target_gateway"] = target_gateway
            __props__.__dict__["target_natgateway"] = target_natgateway
        super(RouteTableRoute, __self__).__init__(
            'thalassa:index/routeTableRoute:RouteTableRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
            notes: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_gateway: Optional[pulumi.Input[_builtins.str]] = None,
            target_natgateway: Optional[pulumi.Input[_builtins.str]] = None) -> 'RouteTableRoute':
        """
        Get an existing RouteTableRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] destination_cidr: Destination CIDR of the Route
        :param pulumi.Input[_builtins.str] gateway_address: Gateway Address of the Route
        :param pulumi.Input[_builtins.str] notes: Notes for the Route
        :param pulumi.Input[_builtins.str] organisation_id: Organisation of the RouteTable
        :param pulumi.Input[_builtins.str] route_table_id: RouteTable of the Route
        :param pulumi.Input[_builtins.str] target_gateway: Target Gateway of the Route
        :param pulumi.Input[_builtins.str] target_natgateway: Target NAT Gateway of the Route
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteTableRouteState.__new__(_RouteTableRouteState)

        __props__.__dict__["destination_cidr"] = destination_cidr
        __props__.__dict__["gateway_address"] = gateway_address
        __props__.__dict__["notes"] = notes
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["route_table_id"] = route_table_id
        __props__.__dict__["target_gateway"] = target_gateway
        __props__.__dict__["target_natgateway"] = target_natgateway
        return RouteTableRoute(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="destinationCidr")
    def destination_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        Destination CIDR of the Route
        """
        return pulumi.get(self, "destination_cidr")

    @_builtins.property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Gateway Address of the Route
        """
        return pulumi.get(self, "gateway_address")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Notes for the Route
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Organisation of the RouteTable
        """
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[_builtins.str]:
        """
        RouteTable of the Route
        """
        return pulumi.get(self, "route_table_id")

    @_builtins.property
    @pulumi.getter(name="targetGateway")
    def target_gateway(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Target Gateway of the Route
        """
        return pulumi.get(self, "target_gateway")

    @_builtins.property
    @pulumi.getter(name="targetNatgateway")
    def target_natgateway(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Target NAT Gateway of the Route
        """
        return pulumi.get(self, "target_natgateway")

