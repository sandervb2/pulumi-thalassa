# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DbaasDbBackupscheduleArgs', 'DbaasDbBackupschedule']

@pulumi.input_type
class DbaasDbBackupscheduleArgs:
    def __init__(__self__, *,
                 db_cluster_id: pulumi.Input[_builtins.str],
                 backup_target: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 suspended: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a DbaasDbBackupschedule resource.
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database cluster
        :param pulumi.Input[_builtins.str] backup_target: The backup target of the database backup schedule (primary, prefer-standby)
        :param pulumi.Input[_builtins.str] name: The name of the database backup schedule
        :param pulumi.Input[_builtins.str] retention_policy: The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
        :param pulumi.Input[_builtins.str] schedule: The cron schedule of the database backup schedule (0 0 * * *)
        :param pulumi.Input[_builtins.bool] suspended: Whether the database backup schedule is suspended
        """
        pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        if backup_target is not None:
            pulumi.set(__self__, "backup_target", backup_target)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the database cluster
        """
        return pulumi.get(self, "db_cluster_id")

    @db_cluster_id.setter
    def db_cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "db_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="backupTarget")
    def backup_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup target of the database backup schedule (primary, prefer-standby)
        """
        return pulumi.get(self, "backup_target")

    @backup_target.setter
    def backup_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_target", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the database backup schedule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retention_policy", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cron schedule of the database backup schedule (0 0 * * *)
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the database backup schedule is suspended
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "suspended", value)


@pulumi.input_type
class _DbaasDbBackupscheduleState:
    def __init__(__self__, *,
                 backup_target: Optional[pulumi.Input[_builtins.str]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 suspended: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering DbaasDbBackupschedule resources.
        :param pulumi.Input[_builtins.str] backup_target: The backup target of the database backup schedule (primary, prefer-standby)
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database cluster
        :param pulumi.Input[_builtins.str] name: The name of the database backup schedule
        :param pulumi.Input[_builtins.str] retention_policy: The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
        :param pulumi.Input[_builtins.str] schedule: The cron schedule of the database backup schedule (0 0 * * *)
        :param pulumi.Input[_builtins.bool] suspended: Whether the database backup schedule is suspended
        """
        if backup_target is not None:
            pulumi.set(__self__, "backup_target", backup_target)
        if db_cluster_id is not None:
            pulumi.set(__self__, "db_cluster_id", db_cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if retention_policy is not None:
            pulumi.set(__self__, "retention_policy", retention_policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)

    @_builtins.property
    @pulumi.getter(name="backupTarget")
    def backup_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backup target of the database backup schedule (primary, prefer-standby)
        """
        return pulumi.get(self, "backup_target")

    @backup_target.setter
    def backup_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_target", value)

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the database cluster
        """
        return pulumi.get(self, "db_cluster_id")

    @db_cluster_id.setter
    def db_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "db_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the database backup schedule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
        """
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "retention_policy", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cron schedule of the database backup schedule (0 0 * * *)
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the database backup schedule is suspended
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "suspended", value)


@pulumi.type_token("thalassa:index/dbaasDbBackupschedule:DbaasDbBackupschedule")
class DbaasDbBackupschedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_target: Optional[pulumi.Input[_builtins.str]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 suspended: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a database backup schedule

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the database cluster
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for database cluster",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the database cluster
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for database cluster",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a database cluster for the backup schedule
        example_dbaas_db_cluster = thalassa.DbaasDbCluster("example",
            name="example-db-cluster",
            description="Example database cluster for backup schedule",
            subnet_id=example_subnet.id,
            database_instance_type="db-pgp-small",
            engine="postgres",
            engine_version="15.13",
            allocated_storage=100,
            volume_type_class="block")
        # Create a database backup schedule with Thalassa default values
        example_dbaas_db_backupschedule = thalassa.DbaasDbBackupschedule("example",
            db_cluster_id=example_dbaas_db_cluster.id,
            name="example-backup-schedule",
            schedule="0 2 * * *",
            retention_policy="7d")
        pulumi.export("backupScheduleId", example_dbaas_db_backupschedule.id)
        pulumi.export("backupScheduleName", example_dbaas_db_backupschedule.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_target: The backup target of the database backup schedule (primary, prefer-standby)
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database cluster
        :param pulumi.Input[_builtins.str] name: The name of the database backup schedule
        :param pulumi.Input[_builtins.str] retention_policy: The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
        :param pulumi.Input[_builtins.str] schedule: The cron schedule of the database backup schedule (0 0 * * *)
        :param pulumi.Input[_builtins.bool] suspended: Whether the database backup schedule is suspended
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbaasDbBackupscheduleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a database backup schedule

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the database cluster
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for database cluster",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the database cluster
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for database cluster",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a database cluster for the backup schedule
        example_dbaas_db_cluster = thalassa.DbaasDbCluster("example",
            name="example-db-cluster",
            description="Example database cluster for backup schedule",
            subnet_id=example_subnet.id,
            database_instance_type="db-pgp-small",
            engine="postgres",
            engine_version="15.13",
            allocated_storage=100,
            volume_type_class="block")
        # Create a database backup schedule with Thalassa default values
        example_dbaas_db_backupschedule = thalassa.DbaasDbBackupschedule("example",
            db_cluster_id=example_dbaas_db_cluster.id,
            name="example-backup-schedule",
            schedule="0 2 * * *",
            retention_policy="7d")
        pulumi.export("backupScheduleId", example_dbaas_db_backupschedule.id)
        pulumi.export("backupScheduleName", example_dbaas_db_backupschedule.name)
        ```

        :param str resource_name: The name of the resource.
        :param DbaasDbBackupscheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbaasDbBackupscheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_target: Optional[pulumi.Input[_builtins.str]] = None,
                 db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 suspended: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbaasDbBackupscheduleArgs.__new__(DbaasDbBackupscheduleArgs)

            __props__.__dict__["backup_target"] = backup_target
            if db_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'db_cluster_id'")
            __props__.__dict__["db_cluster_id"] = db_cluster_id
            __props__.__dict__["name"] = name
            __props__.__dict__["organisation_id"] = organisation_id
            __props__.__dict__["retention_policy"] = retention_policy
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["suspended"] = suspended
        super(DbaasDbBackupschedule, __self__).__init__(
            'thalassa:index/dbaasDbBackupschedule:DbaasDbBackupschedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_target: Optional[pulumi.Input[_builtins.str]] = None,
            db_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            retention_policy: Optional[pulumi.Input[_builtins.str]] = None,
            schedule: Optional[pulumi.Input[_builtins.str]] = None,
            suspended: Optional[pulumi.Input[_builtins.bool]] = None) -> 'DbaasDbBackupschedule':
        """
        Get an existing DbaasDbBackupschedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_target: The backup target of the database backup schedule (primary, prefer-standby)
        :param pulumi.Input[_builtins.str] db_cluster_id: The ID of the database cluster
        :param pulumi.Input[_builtins.str] name: The name of the database backup schedule
        :param pulumi.Input[_builtins.str] retention_policy: The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
        :param pulumi.Input[_builtins.str] schedule: The cron schedule of the database backup schedule (0 0 * * *)
        :param pulumi.Input[_builtins.bool] suspended: Whether the database backup schedule is suspended
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbaasDbBackupscheduleState.__new__(_DbaasDbBackupscheduleState)

        __props__.__dict__["backup_target"] = backup_target
        __props__.__dict__["db_cluster_id"] = db_cluster_id
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["retention_policy"] = retention_policy
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["suspended"] = suspended
        return DbaasDbBackupschedule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupTarget")
    def backup_target(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The backup target of the database backup schedule (primary, prefer-standby)
        """
        return pulumi.get(self, "backup_target")

    @_builtins.property
    @pulumi.getter(name="dbClusterId")
    def db_cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the database cluster
        """
        return pulumi.get(self, "db_cluster_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the database backup schedule
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
        """
        return pulumi.get(self, "retention_policy")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The cron schedule of the database backup schedule (0 0 * * *)
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter
    def suspended(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the database backup schedule is suspended
        """
        return pulumi.get(self, "suspended")

