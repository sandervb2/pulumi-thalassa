# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['BlockVolumeAttachmentArgs', 'BlockVolumeAttachment']

@pulumi.input_type
class BlockVolumeAttachmentArgs:
    def __init__(__self__, *,
                 vmi_id: pulumi.Input[_builtins.str],
                 volume_id: pulumi.Input[_builtins.str],
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_for_attached: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_attached_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 wait_for_detached: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_detached_timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a BlockVolumeAttachment resource.
        :param pulumi.Input[_builtins.str] vmi_id: The ID of the virtual machine to attach the volume to
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume to attach
        :param pulumi.Input[_builtins.bool] wait_for_attached: Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        :param pulumi.Input[_builtins.int] wait_for_attached_timeout: The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        :param pulumi.Input[_builtins.bool] wait_for_detached: Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        :param pulumi.Input[_builtins.int] wait_for_detached_timeout: The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        pulumi.set(__self__, "vmi_id", vmi_id)
        pulumi.set(__self__, "volume_id", volume_id)
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if wait_for_attached is not None:
            pulumi.set(__self__, "wait_for_attached", wait_for_attached)
        if wait_for_attached_timeout is not None:
            pulumi.set(__self__, "wait_for_attached_timeout", wait_for_attached_timeout)
        if wait_for_detached is not None:
            pulumi.set(__self__, "wait_for_detached", wait_for_detached)
        if wait_for_detached_timeout is not None:
            pulumi.set(__self__, "wait_for_detached_timeout", wait_for_detached_timeout)

    @_builtins.property
    @pulumi.getter(name="vmiId")
    def vmi_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the virtual machine to attach the volume to
        """
        return pulumi.get(self, "vmi_id")

    @vmi_id.setter
    def vmi_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vmi_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the volume to attach
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter(name="waitForAttached")
    def wait_for_attached(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        """
        return pulumi.get(self, "wait_for_attached")

    @wait_for_attached.setter
    def wait_for_attached(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_attached", value)

    @_builtins.property
    @pulumi.getter(name="waitForAttachedTimeout")
    def wait_for_attached_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        return pulumi.get(self, "wait_for_attached_timeout")

    @wait_for_attached_timeout.setter
    def wait_for_attached_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "wait_for_attached_timeout", value)

    @_builtins.property
    @pulumi.getter(name="waitForDetached")
    def wait_for_detached(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        """
        return pulumi.get(self, "wait_for_detached")

    @wait_for_detached.setter
    def wait_for_detached(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_detached", value)

    @_builtins.property
    @pulumi.getter(name="waitForDetachedTimeout")
    def wait_for_detached_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        return pulumi.get(self, "wait_for_detached_timeout")

    @wait_for_detached_timeout.setter
    def wait_for_detached_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "wait_for_detached_timeout", value)


@pulumi.input_type
class _BlockVolumeAttachmentState:
    def __init__(__self__, *,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 serial: Optional[pulumi.Input[_builtins.str]] = None,
                 vmi_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_for_attached: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_attached_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 wait_for_detached: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_detached_timeout: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering BlockVolumeAttachment resources.
        :param pulumi.Input[_builtins.str] serial: The device name to use for the volume attachment (e.g., /dev/sdb)
        :param pulumi.Input[_builtins.str] vmi_id: The ID of the virtual machine to attach the volume to
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume to attach
        :param pulumi.Input[_builtins.bool] wait_for_attached: Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        :param pulumi.Input[_builtins.int] wait_for_attached_timeout: The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        :param pulumi.Input[_builtins.bool] wait_for_detached: Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        :param pulumi.Input[_builtins.int] wait_for_detached_timeout: The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        if organisation_id is not None:
            pulumi.set(__self__, "organisation_id", organisation_id)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if vmi_id is not None:
            pulumi.set(__self__, "vmi_id", vmi_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if wait_for_attached is not None:
            pulumi.set(__self__, "wait_for_attached", wait_for_attached)
        if wait_for_attached_timeout is not None:
            pulumi.set(__self__, "wait_for_attached_timeout", wait_for_attached_timeout)
        if wait_for_detached is not None:
            pulumi.set(__self__, "wait_for_detached", wait_for_detached)
        if wait_for_detached_timeout is not None:
            pulumi.set(__self__, "wait_for_detached_timeout", wait_for_detached_timeout)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @organisation_id.setter
    def organisation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organisation_id", value)

    @_builtins.property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The device name to use for the volume attachment (e.g., /dev/sdb)
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial", value)

    @_builtins.property
    @pulumi.getter(name="vmiId")
    def vmi_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the virtual machine to attach the volume to
        """
        return pulumi.get(self, "vmi_id")

    @vmi_id.setter
    def vmi_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vmi_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the volume to attach
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter(name="waitForAttached")
    def wait_for_attached(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        """
        return pulumi.get(self, "wait_for_attached")

    @wait_for_attached.setter
    def wait_for_attached(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_attached", value)

    @_builtins.property
    @pulumi.getter(name="waitForAttachedTimeout")
    def wait_for_attached_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        return pulumi.get(self, "wait_for_attached_timeout")

    @wait_for_attached_timeout.setter
    def wait_for_attached_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "wait_for_attached_timeout", value)

    @_builtins.property
    @pulumi.getter(name="waitForDetached")
    def wait_for_detached(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        """
        return pulumi.get(self, "wait_for_detached")

    @wait_for_detached.setter
    def wait_for_detached(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_detached", value)

    @_builtins.property
    @pulumi.getter(name="waitForDetachedTimeout")
    def wait_for_detached_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        return pulumi.get(self, "wait_for_detached_timeout")

    @wait_for_detached_timeout.setter
    def wait_for_detached_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "wait_for_detached_timeout", value)


@pulumi.type_token("thalassa:index/blockVolumeAttachment:BlockVolumeAttachment")
class BlockVolumeAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vmi_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_for_attached: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_attached_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 wait_for_detached: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_detached_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        Attach a block volume to a virtual machine. Volume must not be attached to another virtual machine.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the resources
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for block volume attachment",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the resources
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for block volume attachment",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a block volume
        example_block_volume = thalassa.BlockVolume("example",
            name="example-block-volume",
            description="Example block volume for attachment",
            region="nl-01",
            volume_type="Block",
            size_gb=50)
        # Create a virtual machine instance
        example_virtual_machine_instance = thalassa.VirtualMachineInstance("example",
            name="example-instance",
            subnet_id=example_subnet.id,
            machine_type="pgp-small",
            machine_image="ubuntu-22.04",
            availability_zone="nl-01a",
            root_volume_size_gb=20,
            root_volume_type="Block")
        # Create a block volume attachment with Thalassa default values
        example_block_volume_attachment = thalassa.BlockVolumeAttachment("example",
            volume_id=example_block_volume.id,
            vmi_id=example_virtual_machine_instance.id)
        pulumi.export("attachmentId", example_block_volume_attachment.id)
        pulumi.export("deviceSerial", example_block_volume_attachment.serial)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] vmi_id: The ID of the virtual machine to attach the volume to
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume to attach
        :param pulumi.Input[_builtins.bool] wait_for_attached: Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        :param pulumi.Input[_builtins.int] wait_for_attached_timeout: The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        :param pulumi.Input[_builtins.bool] wait_for_detached: Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        :param pulumi.Input[_builtins.int] wait_for_detached_timeout: The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BlockVolumeAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Attach a block volume to a virtual machine. Volume must not be attached to another virtual machine.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a VPC for the resources
        example = thalassa.Vpc("example",
            name="example-vpc",
            description="Example VPC for block volume attachment",
            region="nl-01",
            cidrs=["10.0.0.0/16"])
        # Create a subnet for the resources
        example_subnet = thalassa.Subnet("example",
            name="example-subnet",
            description="Example subnet for block volume attachment",
            vpc_id=example.id,
            cidr="10.0.1.0/24")
        # Create a block volume
        example_block_volume = thalassa.BlockVolume("example",
            name="example-block-volume",
            description="Example block volume for attachment",
            region="nl-01",
            volume_type="Block",
            size_gb=50)
        # Create a virtual machine instance
        example_virtual_machine_instance = thalassa.VirtualMachineInstance("example",
            name="example-instance",
            subnet_id=example_subnet.id,
            machine_type="pgp-small",
            machine_image="ubuntu-22.04",
            availability_zone="nl-01a",
            root_volume_size_gb=20,
            root_volume_type="Block")
        # Create a block volume attachment with Thalassa default values
        example_block_volume_attachment = thalassa.BlockVolumeAttachment("example",
            volume_id=example_block_volume.id,
            vmi_id=example_virtual_machine_instance.id)
        pulumi.export("attachmentId", example_block_volume_attachment.id)
        pulumi.export("deviceSerial", example_block_volume_attachment.serial)
        ```

        :param str resource_name: The name of the resource.
        :param BlockVolumeAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BlockVolumeAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vmi_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_for_attached: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_attached_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 wait_for_detached: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_detached_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BlockVolumeAttachmentArgs.__new__(BlockVolumeAttachmentArgs)

            __props__.__dict__["organisation_id"] = organisation_id
            if vmi_id is None and not opts.urn:
                raise TypeError("Missing required property 'vmi_id'")
            __props__.__dict__["vmi_id"] = vmi_id
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["wait_for_attached"] = wait_for_attached
            __props__.__dict__["wait_for_attached_timeout"] = wait_for_attached_timeout
            __props__.__dict__["wait_for_detached"] = wait_for_detached
            __props__.__dict__["wait_for_detached_timeout"] = wait_for_detached_timeout
            __props__.__dict__["serial"] = None
        super(BlockVolumeAttachment, __self__).__init__(
            'thalassa:index/blockVolumeAttachment:BlockVolumeAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            organisation_id: Optional[pulumi.Input[_builtins.str]] = None,
            serial: Optional[pulumi.Input[_builtins.str]] = None,
            vmi_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None,
            wait_for_attached: Optional[pulumi.Input[_builtins.bool]] = None,
            wait_for_attached_timeout: Optional[pulumi.Input[_builtins.int]] = None,
            wait_for_detached: Optional[pulumi.Input[_builtins.bool]] = None,
            wait_for_detached_timeout: Optional[pulumi.Input[_builtins.int]] = None) -> 'BlockVolumeAttachment':
        """
        Get an existing BlockVolumeAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] serial: The device name to use for the volume attachment (e.g., /dev/sdb)
        :param pulumi.Input[_builtins.str] vmi_id: The ID of the virtual machine to attach the volume to
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume to attach
        :param pulumi.Input[_builtins.bool] wait_for_attached: Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        :param pulumi.Input[_builtins.int] wait_for_attached_timeout: The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        :param pulumi.Input[_builtins.bool] wait_for_detached: Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        :param pulumi.Input[_builtins.int] wait_for_detached_timeout: The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BlockVolumeAttachmentState.__new__(_BlockVolumeAttachmentState)

        __props__.__dict__["organisation_id"] = organisation_id
        __props__.__dict__["serial"] = serial
        __props__.__dict__["vmi_id"] = vmi_id
        __props__.__dict__["volume_id"] = volume_id
        __props__.__dict__["wait_for_attached"] = wait_for_attached
        __props__.__dict__["wait_for_attached_timeout"] = wait_for_attached_timeout
        __props__.__dict__["wait_for_detached"] = wait_for_detached
        __props__.__dict__["wait_for_detached_timeout"] = wait_for_detached_timeout
        return BlockVolumeAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "organisation_id")

    @_builtins.property
    @pulumi.getter
    def serial(self) -> pulumi.Output[_builtins.str]:
        """
        The device name to use for the volume attachment (e.g., /dev/sdb)
        """
        return pulumi.get(self, "serial")

    @_builtins.property
    @pulumi.getter(name="vmiId")
    def vmi_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the virtual machine to attach the volume to
        """
        return pulumi.get(self, "vmi_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the volume to attach
        """
        return pulumi.get(self, "volume_id")

    @_builtins.property
    @pulumi.getter(name="waitForAttached")
    def wait_for_attached(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
        """
        return pulumi.get(self, "wait_for_attached")

    @_builtins.property
    @pulumi.getter(name="waitForAttachedTimeout")
    def wait_for_attached_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        return pulumi.get(self, "wait_for_attached_timeout")

    @_builtins.property
    @pulumi.getter(name="waitForDetached")
    def wait_for_detached(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
        """
        return pulumi.get(self, "wait_for_detached")

    @_builtins.property
    @pulumi.getter(name="waitForDetachedTimeout")
    def wait_for_detached_timeout(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
        """
        return pulumi.get(self, "wait_for_detached_timeout")

