// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Kubernetes cluster in the Thalassa cloud platform. This resource supports both managed clusters and hosted control plane clusters, allowing you to deploy production-ready Kubernetes environments with configurable networking, security policies, and auto-upgrade capabilities. The cluster can be customized with specific CNI plugins (Cilium or custom), network CIDRs, pod security standards, audit logging, and API server access controls.
 */
export class KubernetesCluster extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterState, opts?: pulumi.CustomResourceOptions): KubernetesCluster {
        return new KubernetesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/kubernetesCluster:KubernetesCluster';

    /**
     * Returns true if the given object is an instance of KubernetesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesCluster.__pulumiType;
    }

    /**
     * Annotations for the Kubernetes Cluster
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * API server ACLs for the Kubernetes Cluster
     */
    declare public readonly apiServerAcls: pulumi.Output<outputs.KubernetesClusterApiServerAcl[] | undefined>;
    /**
     * Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
     */
    declare public readonly auditLogProfile: pulumi.Output<string | undefined>;
    /**
     * Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
     */
    declare public readonly autoUpgradePolicy: pulumi.Output<string | undefined>;
    /**
     * Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
     */
    declare public readonly clusterType: pulumi.Output<string | undefined>;
    /**
     * Cluster version of the Kubernetes Cluster, can be a name, slug or identity
     */
    declare public readonly clusterVersion: pulumi.Output<string>;
    /**
     * Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
     */
    declare public readonly defaultNetworkPolicy: pulumi.Output<string | undefined>;
    /**
     * Delete protection of the Kubernetes Cluster
     */
    declare public readonly deleteProtection: pulumi.Output<boolean | undefined>;
    /**
     * A human readable description about the Kubernetes Cluster
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Kubernetes API server CA certificate of the Kubernetes Cluster
     */
    declare public /*out*/ readonly kubernetesApiServerCaCertificate: pulumi.Output<string>;
    /**
     * Kubernetes API server endpoint of the Kubernetes Cluster
     */
    declare public /*out*/ readonly kubernetesApiServerEndpoint: pulumi.Output<string>;
    /**
     * Labels for the Kubernetes Cluster
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
     */
    declare public readonly maintenanceDay: pulumi.Output<number | undefined>;
    /**
     * Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
     */
    declare public readonly maintenanceStartAt: pulumi.Output<number | undefined>;
    /**
     * Name of the Kubernetes Cluster
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * CNI of the Kubernetes Cluster
     */
    declare public readonly networkingCni: pulumi.Output<string>;
    /**
     * Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
     */
    declare public readonly networkingPodCidr: pulumi.Output<string | undefined>;
    /**
     * Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
     */
    declare public readonly networkingServiceCidr: pulumi.Output<string | undefined>;
    declare public readonly organisationId: pulumi.Output<string>;
    /**
     * Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
     */
    declare public readonly podSecurityStandardsProfile: pulumi.Output<string | undefined>;
    /**
     * Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * List identities of security group that will be attached to the Kubernetes Cluster
     */
    declare public readonly securityGroupAttachments: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * Status of the Kubernetes Cluster
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Subnet of the Kubernetes Cluster. Required for managed clusters.
     */
    declare public readonly subnetId: pulumi.Output<string | undefined>;
    /**
     * VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.
     */
    declare public /*out*/ readonly vpcId: pulumi.Output<string>;

    /**
     * Create a KubernetesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterArgs | KubernetesClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["apiServerAcls"] = state?.apiServerAcls;
            resourceInputs["auditLogProfile"] = state?.auditLogProfile;
            resourceInputs["autoUpgradePolicy"] = state?.autoUpgradePolicy;
            resourceInputs["clusterType"] = state?.clusterType;
            resourceInputs["clusterVersion"] = state?.clusterVersion;
            resourceInputs["defaultNetworkPolicy"] = state?.defaultNetworkPolicy;
            resourceInputs["deleteProtection"] = state?.deleteProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["kubernetesApiServerCaCertificate"] = state?.kubernetesApiServerCaCertificate;
            resourceInputs["kubernetesApiServerEndpoint"] = state?.kubernetesApiServerEndpoint;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maintenanceDay"] = state?.maintenanceDay;
            resourceInputs["maintenanceStartAt"] = state?.maintenanceStartAt;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkingCni"] = state?.networkingCni;
            resourceInputs["networkingPodCidr"] = state?.networkingPodCidr;
            resourceInputs["networkingServiceCidr"] = state?.networkingServiceCidr;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["podSecurityStandardsProfile"] = state?.podSecurityStandardsProfile;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupAttachments"] = state?.securityGroupAttachments;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as KubernetesClusterArgs | undefined;
            if (args?.clusterVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterVersion'");
            }
            if (args?.networkingCni === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkingCni'");
            }
            if (args?.organisationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organisationId'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["apiServerAcls"] = args?.apiServerAcls;
            resourceInputs["auditLogProfile"] = args?.auditLogProfile;
            resourceInputs["autoUpgradePolicy"] = args?.autoUpgradePolicy;
            resourceInputs["clusterType"] = args?.clusterType;
            resourceInputs["clusterVersion"] = args?.clusterVersion;
            resourceInputs["defaultNetworkPolicy"] = args?.defaultNetworkPolicy;
            resourceInputs["deleteProtection"] = args?.deleteProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maintenanceDay"] = args?.maintenanceDay;
            resourceInputs["maintenanceStartAt"] = args?.maintenanceStartAt;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkingCni"] = args?.networkingCni;
            resourceInputs["networkingPodCidr"] = args?.networkingPodCidr;
            resourceInputs["networkingServiceCidr"] = args?.networkingServiceCidr;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["podSecurityStandardsProfile"] = args?.podSecurityStandardsProfile;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupAttachments"] = args?.securityGroupAttachments;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["kubernetesApiServerCaCertificate"] = undefined /*out*/;
            resourceInputs["kubernetesApiServerEndpoint"] = undefined /*out*/;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesCluster resources.
 */
export interface KubernetesClusterState {
    /**
     * Annotations for the Kubernetes Cluster
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * API server ACLs for the Kubernetes Cluster
     */
    apiServerAcls?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterApiServerAcl>[]>;
    /**
     * Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
     */
    auditLogProfile?: pulumi.Input<string>;
    /**
     * Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
     */
    autoUpgradePolicy?: pulumi.Input<string>;
    /**
     * Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Cluster version of the Kubernetes Cluster, can be a name, slug or identity
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
     */
    defaultNetworkPolicy?: pulumi.Input<string>;
    /**
     * Delete protection of the Kubernetes Cluster
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * A human readable description about the Kubernetes Cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Kubernetes API server CA certificate of the Kubernetes Cluster
     */
    kubernetesApiServerCaCertificate?: pulumi.Input<string>;
    /**
     * Kubernetes API server endpoint of the Kubernetes Cluster
     */
    kubernetesApiServerEndpoint?: pulumi.Input<string>;
    /**
     * Labels for the Kubernetes Cluster
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
     */
    maintenanceDay?: pulumi.Input<number>;
    /**
     * Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
     */
    maintenanceStartAt?: pulumi.Input<number>;
    /**
     * Name of the Kubernetes Cluster
     */
    name?: pulumi.Input<string>;
    /**
     * CNI of the Kubernetes Cluster
     */
    networkingCni?: pulumi.Input<string>;
    /**
     * Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
     */
    networkingPodCidr?: pulumi.Input<string>;
    /**
     * Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
     */
    networkingServiceCidr?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
     */
    podSecurityStandardsProfile?: pulumi.Input<string>;
    /**
     * Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
     */
    region?: pulumi.Input<string>;
    /**
     * List identities of security group that will be attached to the Kubernetes Cluster
     */
    securityGroupAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    slug?: pulumi.Input<string>;
    /**
     * Status of the Kubernetes Cluster
     */
    status?: pulumi.Input<string>;
    /**
     * Subnet of the Kubernetes Cluster. Required for managed clusters.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesCluster resource.
 */
export interface KubernetesClusterArgs {
    /**
     * Annotations for the Kubernetes Cluster
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * API server ACLs for the Kubernetes Cluster
     */
    apiServerAcls?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterApiServerAcl>[]>;
    /**
     * Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.
     */
    auditLogProfile?: pulumi.Input<string>;
    /**
     * Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.
     */
    autoUpgradePolicy?: pulumi.Input<string>;
    /**
     * Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Cluster version of the Kubernetes Cluster, can be a name, slug or identity
     */
    clusterVersion: pulumi.Input<string>;
    /**
     * Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.
     */
    defaultNetworkPolicy?: pulumi.Input<string>;
    /**
     * Delete protection of the Kubernetes Cluster
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * A human readable description about the Kubernetes Cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the Kubernetes Cluster
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
     */
    maintenanceDay?: pulumi.Input<number>;
    /**
     * Time of day when the cluster will be upgraded in minutes from midnight (0-1439)
     */
    maintenanceStartAt?: pulumi.Input<number>;
    /**
     * Name of the Kubernetes Cluster
     */
    name?: pulumi.Input<string>;
    /**
     * CNI of the Kubernetes Cluster
     */
    networkingCni: pulumi.Input<string>;
    /**
     * Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
     */
    networkingPodCidr?: pulumi.Input<string>;
    /**
     * Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.
     */
    networkingServiceCidr?: pulumi.Input<string>;
    organisationId: pulumi.Input<string>;
    /**
     * Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.
     */
    podSecurityStandardsProfile?: pulumi.Input<string>;
    /**
     * Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
     */
    region?: pulumi.Input<string>;
    /**
     * List identities of security group that will be attached to the Kubernetes Cluster
     */
    securityGroupAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet of the Kubernetes Cluster. Required for managed clusters.
     */
    subnetId?: pulumi.Input<string>;
}
