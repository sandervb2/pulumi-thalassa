// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Create a target group for a load balancer
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the target group
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for target group",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a target group with all optional attributes
 * const exampleTargetGroup = new thalassa.TargetGroup("example", {
 *     name: "example-target-group",
 *     vpcId: example.id,
 *     protocol: "tcp",
 *     port: 80,
 *     description: "Example target group for documentation with all optional attributes",
 *     labels: {
 *         environment: "production",
 *         service: "web",
 *         tier: "backend",
 *     },
 *     healthCheckProtocol: "http",
 *     healthCheckPort: 80,
 *     healthCheckPath: "/health",
 *     healthCheckInterval: 30,
 *     healthCheckTimeout: 5,
 *     healthyThreshold: 3,
 *     unhealthyThreshold: 3,
 * });
 * export const targetGroupId = exampleTargetGroup.id;
 * ```
 */
export class TargetGroup extends pulumi.CustomResource {
    /**
     * Get an existing TargetGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TargetGroupState, opts?: pulumi.CustomResourceOptions): TargetGroup {
        return new TargetGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/targetGroup:TargetGroup';

    /**
     * Returns true if the given object is an instance of TargetGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TargetGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TargetGroup.__pulumiType;
    }

    /**
     * Annotations for the Target Group
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
     */
    declare public readonly attachments: pulumi.Output<outputs.TargetGroupAttachment[]>;
    /**
     * A human readable description about the target group
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The approximate amount of time, in seconds, between health checks of an individual target
     */
    declare public readonly healthCheckInterval: pulumi.Output<number | undefined>;
    /**
     * The path to use for health checks (only for HTTP/HTTPS)
     */
    declare public readonly healthCheckPath: pulumi.Output<string | undefined>;
    /**
     * The port to use for health checks
     */
    declare public readonly healthCheckPort: pulumi.Output<number | undefined>;
    /**
     * The protocol to use for health checks. Must be one of: tcp, http.
     */
    declare public readonly healthCheckProtocol: pulumi.Output<string | undefined>;
    /**
     * The amount of time, in seconds, during which no response means a failed health check
     */
    declare public readonly healthCheckTimeout: pulumi.Output<number | undefined>;
    /**
     * The number of consecutive health checks successes required before considering an unhealthy target healthy
     */
    declare public readonly healthyThreshold: pulumi.Output<number | undefined>;
    /**
     * Labels for the Target Group
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the Target Group
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * The port on which the targets receive traffic
     */
    declare public readonly port: pulumi.Output<number>;
    /**
     * The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
     */
    declare public readonly protocol: pulumi.Output<string>;
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * The number of consecutive health check failures required before considering a target unhealthy
     */
    declare public readonly unhealthyThreshold: pulumi.Output<number | undefined>;
    /**
     * The VPC this target group belongs to
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a TargetGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TargetGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TargetGroupArgs | TargetGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TargetGroupState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["attachments"] = state?.attachments;
            resourceInputs["description"] = state?.description;
            resourceInputs["healthCheckInterval"] = state?.healthCheckInterval;
            resourceInputs["healthCheckPath"] = state?.healthCheckPath;
            resourceInputs["healthCheckPort"] = state?.healthCheckPort;
            resourceInputs["healthCheckProtocol"] = state?.healthCheckProtocol;
            resourceInputs["healthCheckTimeout"] = state?.healthCheckTimeout;
            resourceInputs["healthyThreshold"] = state?.healthyThreshold;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["port"] = state?.port;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["unhealthyThreshold"] = state?.unhealthyThreshold;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as TargetGroupArgs | undefined;
            if (args?.port === undefined && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["attachments"] = args?.attachments;
            resourceInputs["description"] = args?.description;
            resourceInputs["healthCheckInterval"] = args?.healthCheckInterval;
            resourceInputs["healthCheckPath"] = args?.healthCheckPath;
            resourceInputs["healthCheckPort"] = args?.healthCheckPort;
            resourceInputs["healthCheckProtocol"] = args?.healthCheckProtocol;
            resourceInputs["healthCheckTimeout"] = args?.healthCheckTimeout;
            resourceInputs["healthyThreshold"] = args?.healthyThreshold;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["port"] = args?.port;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["unhealthyThreshold"] = args?.unhealthyThreshold;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["slug"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TargetGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TargetGroup resources.
 */
export interface TargetGroupState {
    /**
     * Annotations for the Target Group
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
     */
    attachments?: pulumi.Input<pulumi.Input<inputs.TargetGroupAttachment>[]>;
    /**
     * A human readable description about the target group
     */
    description?: pulumi.Input<string>;
    /**
     * The approximate amount of time, in seconds, between health checks of an individual target
     */
    healthCheckInterval?: pulumi.Input<number>;
    /**
     * The path to use for health checks (only for HTTP/HTTPS)
     */
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The port to use for health checks
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * The protocol to use for health checks. Must be one of: tcp, http.
     */
    healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, during which no response means a failed health check
     */
    healthCheckTimeout?: pulumi.Input<number>;
    /**
     * The number of consecutive health checks successes required before considering an unhealthy target healthy
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * Labels for the Target Group
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Target Group
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The port on which the targets receive traffic
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
     */
    protocol?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    /**
     * The number of consecutive health check failures required before considering a target unhealthy
     */
    unhealthyThreshold?: pulumi.Input<number>;
    /**
     * The VPC this target group belongs to
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TargetGroup resource.
 */
export interface TargetGroupArgs {
    /**
     * Annotations for the Target Group
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.
     */
    attachments?: pulumi.Input<pulumi.Input<inputs.TargetGroupAttachment>[]>;
    /**
     * A human readable description about the target group
     */
    description?: pulumi.Input<string>;
    /**
     * The approximate amount of time, in seconds, between health checks of an individual target
     */
    healthCheckInterval?: pulumi.Input<number>;
    /**
     * The path to use for health checks (only for HTTP/HTTPS)
     */
    healthCheckPath?: pulumi.Input<string>;
    /**
     * The port to use for health checks
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * The protocol to use for health checks. Must be one of: tcp, http.
     */
    healthCheckProtocol?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, during which no response means a failed health check
     */
    healthCheckTimeout?: pulumi.Input<number>;
    /**
     * The number of consecutive health checks successes required before considering an unhealthy target healthy
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * Labels for the Target Group
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Target Group
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The port on which the targets receive traffic
     */
    port: pulumi.Input<number>;
    /**
     * The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.
     */
    protocol: pulumi.Input<string>;
    /**
     * The number of consecutive health check failures required before considering a target unhealthy
     */
    unhealthyThreshold?: pulumi.Input<number>;
    /**
     * The VPC this target group belongs to
     */
    vpcId: pulumi.Input<string>;
}
