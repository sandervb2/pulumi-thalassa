// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create a database backup schedule
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the database cluster
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for database cluster",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a subnet for the database cluster
 * const exampleSubnet = new thalassa.Subnet("example", {
 *     name: "example-subnet",
 *     description: "Example subnet for database cluster",
 *     vpcId: example.id,
 *     cidr: "10.0.1.0/24",
 * });
 * // Create a database cluster for the backup schedule
 * const exampleDbaasDbCluster = new thalassa.DbaasDbCluster("example", {
 *     name: "example-db-cluster",
 *     description: "Example database cluster for backup schedule",
 *     subnetId: exampleSubnet.id,
 *     databaseInstanceType: "db-pgp-small",
 *     engine: "postgres",
 *     engineVersion: "15.13",
 *     allocatedStorage: 100,
 *     volumeTypeClass: "block",
 * });
 * // Create a database backup schedule with Thalassa default values
 * const exampleDbaasDbBackupschedule = new thalassa.DbaasDbBackupschedule("example", {
 *     dbClusterId: exampleDbaasDbCluster.id,
 *     name: "example-backup-schedule",
 *     schedule: "0 2 * * *",
 *     retentionPolicy: "7d",
 * });
 * export const backupScheduleId = exampleDbaasDbBackupschedule.id;
 * export const backupScheduleName = exampleDbaasDbBackupschedule.name;
 * ```
 */
export class DbaasDbBackupschedule extends pulumi.CustomResource {
    /**
     * Get an existing DbaasDbBackupschedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbaasDbBackupscheduleState, opts?: pulumi.CustomResourceOptions): DbaasDbBackupschedule {
        return new DbaasDbBackupschedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/dbaasDbBackupschedule:DbaasDbBackupschedule';

    /**
     * Returns true if the given object is an instance of DbaasDbBackupschedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbaasDbBackupschedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbaasDbBackupschedule.__pulumiType;
    }

    /**
     * The backup target of the database backup schedule (primary, prefer-standby)
     */
    declare public readonly backupTarget: pulumi.Output<string | undefined>;
    /**
     * The ID of the database cluster
     */
    declare public readonly dbClusterId: pulumi.Output<string>;
    /**
     * The name of the database backup schedule
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
     */
    declare public readonly retentionPolicy: pulumi.Output<string | undefined>;
    /**
     * The cron schedule of the database backup schedule (0 0 * * *)
     */
    declare public readonly schedule: pulumi.Output<string | undefined>;
    /**
     * Whether the database backup schedule is suspended
     */
    declare public readonly suspended: pulumi.Output<boolean | undefined>;

    /**
     * Create a DbaasDbBackupschedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbaasDbBackupscheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbaasDbBackupscheduleArgs | DbaasDbBackupscheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbaasDbBackupscheduleState | undefined;
            resourceInputs["backupTarget"] = state?.backupTarget;
            resourceInputs["dbClusterId"] = state?.dbClusterId;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["retentionPolicy"] = state?.retentionPolicy;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["suspended"] = state?.suspended;
        } else {
            const args = argsOrState as DbaasDbBackupscheduleArgs | undefined;
            if (args?.dbClusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterId'");
            }
            resourceInputs["backupTarget"] = args?.backupTarget;
            resourceInputs["dbClusterId"] = args?.dbClusterId;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["retentionPolicy"] = args?.retentionPolicy;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["suspended"] = args?.suspended;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbaasDbBackupschedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbaasDbBackupschedule resources.
 */
export interface DbaasDbBackupscheduleState {
    /**
     * The backup target of the database backup schedule (primary, prefer-standby)
     */
    backupTarget?: pulumi.Input<string>;
    /**
     * The ID of the database cluster
     */
    dbClusterId?: pulumi.Input<string>;
    /**
     * The name of the database backup schedule
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
     */
    retentionPolicy?: pulumi.Input<string>;
    /**
     * The cron schedule of the database backup schedule (0 0 * * *)
     */
    schedule?: pulumi.Input<string>;
    /**
     * Whether the database backup schedule is suspended
     */
    suspended?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DbaasDbBackupschedule resource.
 */
export interface DbaasDbBackupscheduleArgs {
    /**
     * The backup target of the database backup schedule (primary, prefer-standby)
     */
    backupTarget?: pulumi.Input<string>;
    /**
     * The ID of the database cluster
     */
    dbClusterId: pulumi.Input<string>;
    /**
     * The name of the database backup schedule
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)
     */
    retentionPolicy?: pulumi.Input<string>;
    /**
     * The cron schedule of the database backup schedule (0 0 * * *)
     */
    schedule?: pulumi.Input<string>;
    /**
     * Whether the database backup schedule is suspended
     */
    suspended?: pulumi.Input<boolean>;
}
