// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Attach a block volume to a virtual machine. Volume must not be attached to another virtual machine.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the resources
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for block volume attachment",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a subnet for the resources
 * const exampleSubnet = new thalassa.Subnet("example", {
 *     name: "example-subnet",
 *     description: "Example subnet for block volume attachment",
 *     vpcId: example.id,
 *     cidr: "10.0.1.0/24",
 * });
 * // Create a block volume
 * const exampleBlockVolume = new thalassa.BlockVolume("example", {
 *     name: "example-block-volume",
 *     description: "Example block volume for attachment",
 *     region: "nl-01",
 *     volumeType: "Block",
 *     sizeGb: 50,
 * });
 * // Create a virtual machine instance
 * const exampleVirtualMachineInstance = new thalassa.VirtualMachineInstance("example", {
 *     name: "example-instance",
 *     subnetId: exampleSubnet.id,
 *     machineType: "pgp-small",
 *     machineImage: "ubuntu-22.04",
 *     availabilityZone: "nl-01a",
 *     rootVolumeSizeGb: 20,
 *     rootVolumeType: "Block",
 * });
 * // Create a block volume attachment with Thalassa default values
 * const exampleBlockVolumeAttachment = new thalassa.BlockVolumeAttachment("example", {
 *     volumeId: exampleBlockVolume.id,
 *     vmiId: exampleVirtualMachineInstance.id,
 * });
 * export const attachmentId = exampleBlockVolumeAttachment.id;
 * export const deviceSerial = exampleBlockVolumeAttachment.serial;
 * ```
 */
export class BlockVolumeAttachment extends pulumi.CustomResource {
    /**
     * Get an existing BlockVolumeAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockVolumeAttachmentState, opts?: pulumi.CustomResourceOptions): BlockVolumeAttachment {
        return new BlockVolumeAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/blockVolumeAttachment:BlockVolumeAttachment';

    /**
     * Returns true if the given object is an instance of BlockVolumeAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockVolumeAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockVolumeAttachment.__pulumiType;
    }

    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * The device name to use for the volume attachment (e.g., /dev/sdb)
     */
    declare public /*out*/ readonly serial: pulumi.Output<string>;
    /**
     * The ID of the virtual machine to attach the volume to
     */
    declare public readonly vmiId: pulumi.Output<string>;
    /**
     * The ID of the volume to attach
     */
    declare public readonly volumeId: pulumi.Output<string>;
    /**
     * Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
     */
    declare public readonly waitForAttached: pulumi.Output<boolean | undefined>;
    /**
     * The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
     */
    declare public readonly waitForAttachedTimeout: pulumi.Output<number | undefined>;
    /**
     * Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
     */
    declare public readonly waitForDetached: pulumi.Output<boolean | undefined>;
    /**
     * The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
     */
    declare public readonly waitForDetachedTimeout: pulumi.Output<number | undefined>;

    /**
     * Create a BlockVolumeAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockVolumeAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockVolumeAttachmentArgs | BlockVolumeAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockVolumeAttachmentState | undefined;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["vmiId"] = state?.vmiId;
            resourceInputs["volumeId"] = state?.volumeId;
            resourceInputs["waitForAttached"] = state?.waitForAttached;
            resourceInputs["waitForAttachedTimeout"] = state?.waitForAttachedTimeout;
            resourceInputs["waitForDetached"] = state?.waitForDetached;
            resourceInputs["waitForDetachedTimeout"] = state?.waitForDetachedTimeout;
        } else {
            const args = argsOrState as BlockVolumeAttachmentArgs | undefined;
            if (args?.vmiId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmiId'");
            }
            if (args?.volumeId === undefined && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["vmiId"] = args?.vmiId;
            resourceInputs["volumeId"] = args?.volumeId;
            resourceInputs["waitForAttached"] = args?.waitForAttached;
            resourceInputs["waitForAttachedTimeout"] = args?.waitForAttachedTimeout;
            resourceInputs["waitForDetached"] = args?.waitForDetached;
            resourceInputs["waitForDetachedTimeout"] = args?.waitForDetachedTimeout;
            resourceInputs["serial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockVolumeAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BlockVolumeAttachment resources.
 */
export interface BlockVolumeAttachmentState {
    organisationId?: pulumi.Input<string>;
    /**
     * The device name to use for the volume attachment (e.g., /dev/sdb)
     */
    serial?: pulumi.Input<string>;
    /**
     * The ID of the virtual machine to attach the volume to
     */
    vmiId?: pulumi.Input<string>;
    /**
     * The ID of the volume to attach
     */
    volumeId?: pulumi.Input<string>;
    /**
     * Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
     */
    waitForAttached?: pulumi.Input<boolean>;
    /**
     * The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
     */
    waitForAttachedTimeout?: pulumi.Input<number>;
    /**
     * Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
     */
    waitForDetached?: pulumi.Input<boolean>;
    /**
     * The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
     */
    waitForDetachedTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BlockVolumeAttachment resource.
 */
export interface BlockVolumeAttachmentArgs {
    organisationId?: pulumi.Input<string>;
    /**
     * The ID of the virtual machine to attach the volume to
     */
    vmiId: pulumi.Input<string>;
    /**
     * The ID of the volume to attach
     */
    volumeId: pulumi.Input<string>;
    /**
     * Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.
     */
    waitForAttached?: pulumi.Input<boolean>;
    /**
     * The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.
     */
    waitForAttachedTimeout?: pulumi.Input<number>;
    /**
     * Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.
     */
    waitForDetached?: pulumi.Input<boolean>;
    /**
     * The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.
     */
    waitForDetachedTimeout?: pulumi.Input<number>;
}
