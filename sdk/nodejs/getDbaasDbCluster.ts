// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get an DB Cluster
 */
export function getDbaasDbCluster(args: GetDbaasDbClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetDbaasDbClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thalassa:index/getDbaasDbCluster:getDbaasDbCluster", {
        "name": args.name,
        "organisationId": args.organisationId,
        "slug": args.slug,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbaasDbCluster.
 */
export interface GetDbaasDbClusterArgs {
    /**
     * Name of the DB Cluster
     */
    name: string;
    organisationId?: string;
    /**
     * Slug of the DB Cluster
     */
    slug?: string;
}

/**
 * A collection of values returned by getDbaasDbCluster.
 */
export interface GetDbaasDbClusterResult {
    /**
     * Amount of storage allocated to the cluster in GB
     */
    readonly allocatedStorage: number;
    /**
     * Annotations of the DB Cluster
     */
    readonly annotations: {[key: string]: string};
    /**
     * Flag indicating if the cluster should automatically upgrade to the latest minor version
     */
    readonly autoMinorVersionUpgrade: boolean;
    /**
     * Database instance type of the DB Cluster
     */
    readonly databaseInstanceType: string;
    /**
     * Name of the database on the cluster
     */
    readonly databaseName: string;
    /**
     * Flag indicating if the cluster should be protected from deletion
     */
    readonly deleteProtection: boolean;
    /**
     * Description of the DB Cluster
     */
    readonly description: string;
    /**
     * IPv4 address of the cluster endpoint
     */
    readonly endpointIpv4: string;
    /**
     * IPv6 address of the cluster endpoint
     */
    readonly endpointIpv6: string;
    /**
     * Database engine of the cluster
     */
    readonly engine: string;
    /**
     * Version of the database engine
     */
    readonly engineVersion: string;
    /**
     * Identity of the DB Cluster
     */
    readonly id: string;
    /**
     * Labels of the DB Cluster
     */
    readonly labels: {[key: string]: string};
    /**
     * Name of the DB Cluster
     */
    readonly name: string;
    readonly organisationId?: string;
    /**
     * Map of parameter name to database engine specific parameter value
     */
    readonly parameters: {[key: string]: string};
    /**
     * Port of the cluster endpoint
     */
    readonly port: number;
    /**
     * Number of instances in the cluster
     */
    readonly replicas: number;
    /**
     * List of security groups associated with the cluster
     */
    readonly securityGroups: string[];
    /**
     * Slug of the DB Cluster
     */
    readonly slug: string;
    /**
     * Status of the cluster
     */
    readonly status: string;
    /**
     * Subnet of the DB Cluster
     */
    readonly subnetId: string;
    /**
     * Storage type used to determine the size of the cluster storage
     */
    readonly volumeTypeClass: string;
}
/**
 * Get an DB Cluster
 */
export function getDbaasDbClusterOutput(args: GetDbaasDbClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDbaasDbClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("thalassa:index/getDbaasDbCluster:getDbaasDbCluster", {
        "name": args.name,
        "organisationId": args.organisationId,
        "slug": args.slug,
    }, opts);
}

/**
 * A collection of arguments for invoking getDbaasDbCluster.
 */
export interface GetDbaasDbClusterOutputArgs {
    /**
     * Name of the DB Cluster
     */
    name: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Slug of the DB Cluster
     */
    slug?: pulumi.Input<string>;
}
