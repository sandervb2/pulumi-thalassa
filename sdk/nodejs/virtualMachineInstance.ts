// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create an virtual machine instance within a subnet on the Thalassa Cloud platform
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the virtual machine instance
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for virtual machine instance",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a subnet for the virtual machine instance
 * const exampleSubnet = new thalassa.Subnet("example", {
 *     name: "example-subnet",
 *     description: "Example subnet for virtual machine instance",
 *     vpcId: example.id,
 *     cidr: "10.0.1.0/24",
 * });
 * // Create a security group for the virtual machine instance
 * const exampleSecurityGroup = new thalassa.SecurityGroup("example", {
 *     name: "example-security-group",
 *     description: "Example security group for virtual machine instance",
 *     vpcId: example.id,
 * });
 * // Create a cloud init template (optional)
 * const exampleCloudInitTemplate = new thalassa.CloudInitTemplate("example", {
 *     name: "example-cloud-init-template",
 *     content: `#cloud-config
 * package_update: true
 * package_upgrade: true
 * packages:
 *   - nginx
 *   - curl
 * runcmd:
 *   - systemctl enable nginx
 *   - systemctl start nginx
 * `,
 * });
 * const block = thalassa.getVolumeType({
 *     name: "Block",
 * });
 * const ubuntu = thalassa.getMachineImage({
 *     name: "ubuntu-22-04-01",
 * });
 * // Create a virtual machine instance with Thalassa default values
 * const exampleVirtualMachineInstance = new thalassa.VirtualMachineInstance("example", {
 *     name: "example-instance",
 *     subnetId: exampleSubnet.id,
 *     machineType: "pgp-small",
 *     machineImage: ubuntu.then(ubuntu => ubuntu.name),
 *     availabilityZone: "nl-01a",
 *     rootVolumeSizeGb: 20,
 *     rootVolumeType: block.then(block => block.id),
 *     cloudInitTemplateId: exampleCloudInitTemplate.id,
 * });
 * export const instanceId = exampleVirtualMachineInstance.id;
 * export const instanceName = exampleVirtualMachineInstance.name;
 * // Create a load balancer for the virtual machine instance
 * const exampleLoadbalancer = new thalassa.Loadbalancer("example", {
 *     name: "example-lb",
 *     region: "nl-01",
 *     description: "Example load balancer for virtual machine instance",
 *     subnetId: exampleSubnet.id,
 * });
 * // Create a load balancer target group
 * const exampleTargetGroup = new thalassa.TargetGroup("example", {
 *     name: "example-lb-target-group",
 *     description: "Example load balancer target group for virtual machine instance",
 *     vpcId: example.id,
 *     protocol: "tcp",
 *     port: 22,
 * });
 * // Create a load balancer listener
 * const exampleLoadbalancerListener = new thalassa.LoadbalancerListener("example", {
 *     name: "example-lb-listener",
 *     description: "Example load balancer listener for virtual machine instance",
 *     loadbalancerId: exampleLoadbalancer.id,
 *     protocol: "tcp",
 *     port: 22,
 *     targetGroupId: exampleTargetGroup.id,
 * });
 * const exampleTargetGroupAttachment = new thalassa.TargetGroupAttachment("example", {
 *     targetGroupId: exampleTargetGroup.id,
 *     vmiId: exampleVirtualMachineInstance.id,
 * });
 * export const loadBalancerIp = exampleLoadbalancer.ipAddress;
 * export const loadBalancerPort = exampleLoadbalancerListener.port;
 * ```
 */
export class VirtualMachineInstance extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineInstanceState, opts?: pulumi.CustomResourceOptions): VirtualMachineInstance {
        return new VirtualMachineInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/virtualMachineInstance:VirtualMachineInstance';

    /**
     * Returns true if the given object is an instance of VirtualMachineInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineInstance.__pulumiType;
    }

    /**
     * Annotations for the virtual machine instance
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Attached volume ids of the virtual machine instance
     */
    declare public /*out*/ readonly attachedVolumeIds: pulumi.Output<string[]>;
    /**
     * Availability zone of the virtual machine instance
     */
    declare public readonly availabilityZone: pulumi.Output<string | undefined>;
    /**
     * Cloud init of the virtual machine instance
     */
    declare public readonly cloudInit: pulumi.Output<string | undefined>;
    /**
     * Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
     */
    declare public readonly cloudInitTemplateId: pulumi.Output<string | undefined>;
    /**
     * Delete protection of the virtual machine instance
     */
    declare public readonly deleteProtection: pulumi.Output<boolean | undefined>;
    /**
     * A human readable description about the virtual machine instance
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * IP addresses of the virtual machine instance
     */
    declare public /*out*/ readonly ipAddresses: pulumi.Output<string[]>;
    /**
     * Labels for the virtual machine instance
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Machine image of the virtual machine instance
     */
    declare public readonly machineImage: pulumi.Output<string>;
    /**
     * Machine type of the virtual machine instance
     */
    declare public readonly machineType: pulumi.Output<string>;
    /**
     * Name of the Virtual Machine Instance
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
     */
    declare public readonly rootVolumeId: pulumi.Output<string>;
    /**
     * Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
     */
    declare public readonly rootVolumeSizeGb: pulumi.Output<number | undefined>;
    /**
     * Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
     */
    declare public readonly rootVolumeType: pulumi.Output<string | undefined>;
    /**
     * List identities of security group that will be attached to the Virtual Machine Instance
     */
    declare public readonly securityGroupAttachments: pulumi.Output<string[] | undefined>;
    /**
     * Slug of the Virtual Machine Instance
     */
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Status of the virtual machine instance
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Subnet of the Virtual Machine Instance
     */
    declare public readonly subnetId: pulumi.Output<string>;

    /**
     * Create a VirtualMachineInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineInstanceArgs | VirtualMachineInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineInstanceState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["attachedVolumeIds"] = state?.attachedVolumeIds;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["cloudInit"] = state?.cloudInit;
            resourceInputs["cloudInitTemplateId"] = state?.cloudInitTemplateId;
            resourceInputs["deleteProtection"] = state?.deleteProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["ipAddresses"] = state?.ipAddresses;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["machineImage"] = state?.machineImage;
            resourceInputs["machineType"] = state?.machineType;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["rootVolumeId"] = state?.rootVolumeId;
            resourceInputs["rootVolumeSizeGb"] = state?.rootVolumeSizeGb;
            resourceInputs["rootVolumeType"] = state?.rootVolumeType;
            resourceInputs["securityGroupAttachments"] = state?.securityGroupAttachments;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["state"] = state?.state;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
        } else {
            const args = argsOrState as VirtualMachineInstanceArgs | undefined;
            if (args?.machineImage === undefined && !opts.urn) {
                throw new Error("Missing required property 'machineImage'");
            }
            if (args?.machineType === undefined && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["cloudInit"] = args?.cloudInit;
            resourceInputs["cloudInitTemplateId"] = args?.cloudInitTemplateId;
            resourceInputs["deleteProtection"] = args?.deleteProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["machineImage"] = args?.machineImage;
            resourceInputs["machineType"] = args?.machineType;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["rootVolumeId"] = args?.rootVolumeId;
            resourceInputs["rootVolumeSizeGb"] = args?.rootVolumeSizeGb;
            resourceInputs["rootVolumeType"] = args?.rootVolumeType;
            resourceInputs["securityGroupAttachments"] = args?.securityGroupAttachments;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["attachedVolumeIds"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachineInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachineInstance resources.
 */
export interface VirtualMachineInstanceState {
    /**
     * Annotations for the virtual machine instance
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Attached volume ids of the virtual machine instance
     */
    attachedVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Availability zone of the virtual machine instance
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Cloud init of the virtual machine instance
     */
    cloudInit?: pulumi.Input<string>;
    /**
     * Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
     */
    cloudInitTemplateId?: pulumi.Input<string>;
    /**
     * Delete protection of the virtual machine instance
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * A human readable description about the virtual machine instance
     */
    description?: pulumi.Input<string>;
    /**
     * IP addresses of the virtual machine instance
     */
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Labels for the virtual machine instance
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Machine image of the virtual machine instance
     */
    machineImage?: pulumi.Input<string>;
    /**
     * Machine type of the virtual machine instance
     */
    machineType?: pulumi.Input<string>;
    /**
     * Name of the Virtual Machine Instance
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
     */
    rootVolumeId?: pulumi.Input<string>;
    /**
     * Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
     */
    rootVolumeSizeGb?: pulumi.Input<number>;
    /**
     * Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
     */
    rootVolumeType?: pulumi.Input<string>;
    /**
     * List identities of security group that will be attached to the Virtual Machine Instance
     */
    securityGroupAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Slug of the Virtual Machine Instance
     */
    slug?: pulumi.Input<string>;
    /**
     * Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'
     */
    state?: pulumi.Input<string>;
    /**
     * Status of the virtual machine instance
     */
    status?: pulumi.Input<string>;
    /**
     * Subnet of the Virtual Machine Instance
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualMachineInstance resource.
 */
export interface VirtualMachineInstanceArgs {
    /**
     * Annotations for the virtual machine instance
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Availability zone of the virtual machine instance
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Cloud init of the virtual machine instance
     */
    cloudInit?: pulumi.Input<string>;
    /**
     * Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.
     */
    cloudInitTemplateId?: pulumi.Input<string>;
    /**
     * Delete protection of the virtual machine instance
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * A human readable description about the virtual machine instance
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the virtual machine instance
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Machine image of the virtual machine instance
     */
    machineImage: pulumi.Input<string>;
    /**
     * Machine type of the virtual machine instance
     */
    machineType: pulumi.Input<string>;
    /**
     * Name of the Virtual Machine Instance
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.
     */
    rootVolumeId?: pulumi.Input<string>;
    /**
     * Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.
     */
    rootVolumeSizeGb?: pulumi.Input<number>;
    /**
     * Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.
     */
    rootVolumeType?: pulumi.Input<string>;
    /**
     * List identities of security group that will be attached to the Virtual Machine Instance
     */
    securityGroupAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet of the Virtual Machine Instance
     */
    subnetId: pulumi.Input<string>;
}
