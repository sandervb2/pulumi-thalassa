// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create a listener for a loadbalancer
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the load balancer
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for load balancer listener",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a subnet for the loadbalancer
 * const exampleSubnet = new thalassa.Subnet("example", {
 *     name: "example-subnet",
 *     description: "Example subnet for loadbalancer",
 *     vpcId: example.id,
 *     cidr: "10.0.1.0/24",
 * });
 * // Create a load balancer
 * const exampleLoadbalancer = new thalassa.Loadbalancer("example", {
 *     name: "example-loadbalancer",
 *     description: "Example load balancer for listener",
 *     subnetId: exampleSubnet.id,
 *     region: "nl-01",
 * });
 * // Create a target group for the listener
 * const exampleTargetGroup = new thalassa.TargetGroup("example", {
 *     name: "example-target-group",
 *     description: "Example target group for listener",
 *     vpcId: example.id,
 *     protocol: "tcp",
 *     port: 80,
 * });
 * // Create a load balancer listener with all required attributes
 * const exampleLoadbalancerListener = new thalassa.LoadbalancerListener("example", {
 *     loadbalancerId: exampleLoadbalancer.id,
 *     name: "example-listener",
 *     protocol: "tcp",
 *     port: 80,
 *     targetGroupId: exampleTargetGroup.id,
 * });
 * export const listenerId = exampleLoadbalancerListener.id;
 * export const listenerName = exampleLoadbalancerListener.name;
 * ```
 */
export class LoadbalancerListener extends pulumi.CustomResource {
    /**
     * Get an existing LoadbalancerListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerListenerState, opts?: pulumi.CustomResourceOptions): LoadbalancerListener {
        return new LoadbalancerListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/loadbalancerListener:LoadbalancerListener';

    /**
     * Returns true if the given object is an instance of LoadbalancerListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadbalancerListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadbalancerListener.__pulumiType;
    }

    /**
     * A list of CIDR blocks or IP addresses that are allowed to connect to the listener
     */
    declare public readonly allowedSources: pulumi.Output<string[] | undefined>;
    /**
     * Annotations for the Loadbalancer Listener
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The amount of seconds used for configuring the idle connection timeout on a listener
     */
    declare public readonly connectionIdleTimeout: pulumi.Output<number | undefined>;
    /**
     * A human readable description about the loadbalancer listener
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Labels for the Loadbalancer Listener
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the loadbalancer to create the listener on
     */
    declare public readonly loadbalancerId: pulumi.Output<string>;
    /**
     * The maximum number of connections that the listener can handle
     */
    declare public readonly maxConnections: pulumi.Output<number | undefined>;
    /**
     * Name of the Loadbalancer Listener
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * The port the listener is listening on
     */
    declare public readonly port: pulumi.Output<number>;
    /**
     * The protocol the listener is using
     */
    declare public readonly protocol: pulumi.Output<string>;
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * The ID of the target group to attach to the listener
     */
    declare public readonly targetGroupId: pulumi.Output<string>;

    /**
     * Create a LoadbalancerListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerListenerArgs | LoadbalancerListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerListenerState | undefined;
            resourceInputs["allowedSources"] = state?.allowedSources;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["connectionIdleTimeout"] = state?.connectionIdleTimeout;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["loadbalancerId"] = state?.loadbalancerId;
            resourceInputs["maxConnections"] = state?.maxConnections;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["port"] = state?.port;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["targetGroupId"] = state?.targetGroupId;
        } else {
            const args = argsOrState as LoadbalancerListenerArgs | undefined;
            if (args?.loadbalancerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if (args?.port === undefined && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.targetGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetGroupId'");
            }
            resourceInputs["allowedSources"] = args?.allowedSources;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["connectionIdleTimeout"] = args?.connectionIdleTimeout;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["loadbalancerId"] = args?.loadbalancerId;
            resourceInputs["maxConnections"] = args?.maxConnections;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["port"] = args?.port;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["targetGroupId"] = args?.targetGroupId;
            resourceInputs["slug"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadbalancerListener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadbalancerListener resources.
 */
export interface LoadbalancerListenerState {
    /**
     * A list of CIDR blocks or IP addresses that are allowed to connect to the listener
     */
    allowedSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations for the Loadbalancer Listener
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of seconds used for configuring the idle connection timeout on a listener
     */
    connectionIdleTimeout?: pulumi.Input<number>;
    /**
     * A human readable description about the loadbalancer listener
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the Loadbalancer Listener
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the loadbalancer to create the listener on
     */
    loadbalancerId?: pulumi.Input<string>;
    /**
     * The maximum number of connections that the listener can handle
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Name of the Loadbalancer Listener
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The port the listener is listening on
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol the listener is using
     */
    protocol?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    /**
     * The ID of the target group to attach to the listener
     */
    targetGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadbalancerListener resource.
 */
export interface LoadbalancerListenerArgs {
    /**
     * A list of CIDR blocks or IP addresses that are allowed to connect to the listener
     */
    allowedSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations for the Loadbalancer Listener
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of seconds used for configuring the idle connection timeout on a listener
     */
    connectionIdleTimeout?: pulumi.Input<number>;
    /**
     * A human readable description about the loadbalancer listener
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the Loadbalancer Listener
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the loadbalancer to create the listener on
     */
    loadbalancerId: pulumi.Input<string>;
    /**
     * The maximum number of connections that the listener can handle
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Name of the Loadbalancer Listener
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The port the listener is listening on
     */
    port: pulumi.Input<number>;
    /**
     * The protocol the listener is using
     */
    protocol: pulumi.Input<string>;
    /**
     * The ID of the target group to attach to the listener
     */
    targetGroupId: pulumi.Input<string>;
}
