// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage an organisation role in Thalassa Cloud
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create an organisation role
 * const example = new thalassa.IamRole("example", {
 *     name: "example-role",
 *     description: "An example organisation role for demonstration purposes",
 *     labels: {
 *         environment: "development",
 *         project: "example",
 *     },
 *     annotations: {
 *         "example.com/created-by": "terraform",
 *     },
 * });
 * export const roleId = example.id;
 * export const roleName = example.name;
 * export const roleSlug = example.slug;
 * export const roleDescription = example.description;
 * ```
 */
export class IamRole extends pulumi.CustomResource {
    /**
     * Get an existing IamRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamRoleState, opts?: pulumi.CustomResourceOptions): IamRole {
        return new IamRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/iamRole:IamRole';

    /**
     * Returns true if the given object is an instance of IamRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamRole.__pulumiType;
    }

    /**
     * Annotations for the organisation role
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Creation timestamp of the organisation role
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Description of the organisation role
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Labels for the organisation role
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the organisation role
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether the role is read-only and cannot be modified.
     */
    declare public /*out*/ readonly roleIsReadOnly: pulumi.Output<boolean>;
    /**
     * Slug of the organisation role
     */
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * Whether the role is a system role
     */
    declare public /*out*/ readonly system: pulumi.Output<boolean>;
    /**
     * Last update timestamp of the organisation role
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a IamRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IamRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamRoleArgs | IamRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamRoleState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["roleIsReadOnly"] = state?.roleIsReadOnly;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["system"] = state?.system;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as IamRoleArgs | undefined;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["roleIsReadOnly"] = undefined /*out*/;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["system"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamRole resources.
 */
export interface IamRoleState {
    /**
     * Annotations for the organisation role
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Creation timestamp of the organisation role
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the organisation role
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the organisation role
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the organisation role
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the role is read-only and cannot be modified.
     */
    roleIsReadOnly?: pulumi.Input<boolean>;
    /**
     * Slug of the organisation role
     */
    slug?: pulumi.Input<string>;
    /**
     * Whether the role is a system role
     */
    system?: pulumi.Input<boolean>;
    /**
     * Last update timestamp of the organisation role
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamRole resource.
 */
export interface IamRoleArgs {
    /**
     * Annotations for the organisation role
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the organisation role
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the organisation role
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the organisation role
     */
    name?: pulumi.Input<string>;
}
