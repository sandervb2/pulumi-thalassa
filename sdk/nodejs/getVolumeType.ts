// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.
 */
export function getVolumeType(args: GetVolumeTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumeTypeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thalassa:index/getVolumeType:getVolumeType", {
        "name": args.name,
        "organisationId": args.organisationId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumeType.
 */
export interface GetVolumeTypeArgs {
    /**
     * The name of the volume type.
     */
    name: string;
    organisationId?: string;
}

/**
 * A collection of values returned by getVolumeType.
 */
export interface GetVolumeTypeResult {
    /**
     * Whether the volume type allows resizing. If false, the volume size cannot be changed after creation.
     */
    readonly allowResize: boolean;
    /**
     * The description of the volume type.
     */
    readonly description: string;
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * The name of the volume type.
     */
    readonly name: string;
    readonly organisationId?: string;
    /**
     * The storage type of the volume type. For example: 'block'.
     */
    readonly storageType: string;
}
/**
 * Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.
 */
export function getVolumeTypeOutput(args: GetVolumeTypeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVolumeTypeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("thalassa:index/getVolumeType:getVolumeType", {
        "name": args.name,
        "organisationId": args.organisationId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumeType.
 */
export interface GetVolumeTypeOutputArgs {
    /**
     * The name of the volume type.
     */
    name: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
}
