// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create and manage an object storage bucket
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a basic object storage bucket
 * const basic = new thalassa.ObjectstorageBucket("basic", {
 *     name: "my-basic-bucket",
 *     region: "nl-01",
 * });
 * // Create a public object storage bucket
 * const _public = new thalassa.ObjectstorageBucket("public", {
 *     name: "my-public-bucket",
 *     region: "nl-01",
 *     "public": true,
 * });
 * // Create a bucket with a custom policy
 * const withPolicy = new thalassa.ObjectstorageBucket("with_policy", {
 *     name: "my-policy-bucket",
 *     region: "nl-01",
 *     "public": false,
 *     policy: JSON.stringify({
 *         Version: "2012-10-17",
 *         Statement: [{
 *             Sid: "AllowReadAccess",
 *             Effect: "Allow",
 *             Principal: {
 *                 Thalassa: "*",
 *             },
 *             Action: ["s3:GetObject"],
 *             Resource: ["arn:thalassa:s3:::my-policy-bucket/*"],
 *             Condition: {
 *                 StringEquals: {
 *                     "thalassa:User": "u-exampleuserid",
 *                 },
 *             },
 *         }],
 *     }),
 * });
 * export const basicBucketId = basic.id;
 * export const basicBucketName = basic.name;
 * export const basicBucketEndpoint = basic.endpoint;
 * export const publicBucketId = _public.id;
 * export const publicBucketName = _public.name;
 * export const policyBucketId = withPolicy.id;
 * export const policyBucketName = withPolicy.name;
 * ```
 */
export class ObjectstorageBucket extends pulumi.CustomResource {
    /**
     * Get an existing ObjectstorageBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectstorageBucketState, opts?: pulumi.CustomResourceOptions): ObjectstorageBucket {
        return new ObjectstorageBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/objectstorageBucket:ObjectstorageBucket';

    /**
     * Returns true if the given object is an instance of ObjectstorageBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectstorageBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectstorageBucket.__pulumiType;
    }

    /**
     * The endpoint URL for the bucket
     */
    declare public /*out*/ readonly endpoint: pulumi.Output<string>;
    /**
     * Name of the bucket
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * The bucket policy as a JSON string
     */
    declare public readonly policy: pulumi.Output<string | undefined>;
    /**
     * Whether the bucket is publicly accessible
     */
    declare public readonly public: pulumi.Output<boolean | undefined>;
    /**
     * Region of the bucket
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Status of the bucket
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a ObjectstorageBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectstorageBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectstorageBucketArgs | ObjectstorageBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectstorageBucketState | undefined;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["public"] = state?.public;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as ObjectstorageBucketArgs | undefined;
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["public"] = args?.public;
            resourceInputs["region"] = args?.region;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectstorageBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ObjectstorageBucket resources.
 */
export interface ObjectstorageBucketState {
    /**
     * The endpoint URL for the bucket
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Name of the bucket
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The bucket policy as a JSON string
     */
    policy?: pulumi.Input<string>;
    /**
     * Whether the bucket is publicly accessible
     */
    public?: pulumi.Input<boolean>;
    /**
     * Region of the bucket
     */
    region?: pulumi.Input<string>;
    /**
     * Status of the bucket
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectstorageBucket resource.
 */
export interface ObjectstorageBucketArgs {
    /**
     * Name of the bucket
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The bucket policy as a JSON string
     */
    policy?: pulumi.Input<string>;
    /**
     * Whether the bucket is publicly accessible
     */
    public?: pulumi.Input<boolean>;
    /**
     * Region of the bucket
     */
    region: pulumi.Input<string>;
}
