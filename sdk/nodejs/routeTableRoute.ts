// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create an route table route with a destination cidr block, target gateway, target nat gateway and gateway address within a route table.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the route table
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for route table route",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a subnet for the NAT gateway
 * const exampleSubnet = new thalassa.Subnet("example", {
 *     name: "example-subnet",
 *     description: "Example subnet for NAT gateway",
 *     vpcId: example.id,
 *     cidr: "10.0.1.0/24",
 * });
 * // Create a route table
 * const exampleRouteTable = new thalassa.RouteTable("example", {
 *     name: "example-route-table",
 *     description: "Example route table for route",
 *     vpcId: example.id,
 * });
 * // Create a NAT gateway for the route
 * const exampleNatgateway = new thalassa.Natgateway("example", {
 *     name: "example-nat-gateway",
 *     subnetId: exampleSubnet.id,
 * });
 * // Create a route table route
 * const exampleRouteTableRoute = new thalassa.RouteTableRoute("example", {
 *     routeTableId: exampleRouteTable.id,
 *     destinationCidr: "0.0.0.0/0",
 *     targetNatgateway: exampleNatgateway.id,
 * });
 * export const routeId = exampleRouteTableRoute.id;
 * export const routeDestination = exampleRouteTableRoute.destinationCidr;
 * ```
 */
export class RouteTableRoute extends pulumi.CustomResource {
    /**
     * Get an existing RouteTableRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteTableRouteState, opts?: pulumi.CustomResourceOptions): RouteTableRoute {
        return new RouteTableRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/routeTableRoute:RouteTableRoute';

    /**
     * Returns true if the given object is an instance of RouteTableRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteTableRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteTableRoute.__pulumiType;
    }

    /**
     * Destination CIDR of the Route
     */
    declare public readonly destinationCidr: pulumi.Output<string>;
    /**
     * Gateway Address of the Route
     */
    declare public readonly gatewayAddress: pulumi.Output<string | undefined>;
    /**
     * Notes for the Route
     */
    declare public readonly notes: pulumi.Output<string | undefined>;
    /**
     * Organisation of the RouteTable
     */
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * RouteTable of the Route
     */
    declare public readonly routeTableId: pulumi.Output<string>;
    /**
     * Target Gateway of the Route
     */
    declare public readonly targetGateway: pulumi.Output<string | undefined>;
    /**
     * Target NAT Gateway of the Route
     */
    declare public readonly targetNatgateway: pulumi.Output<string | undefined>;

    /**
     * Create a RouteTableRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteTableRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteTableRouteArgs | RouteTableRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteTableRouteState | undefined;
            resourceInputs["destinationCidr"] = state?.destinationCidr;
            resourceInputs["gatewayAddress"] = state?.gatewayAddress;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["routeTableId"] = state?.routeTableId;
            resourceInputs["targetGateway"] = state?.targetGateway;
            resourceInputs["targetNatgateway"] = state?.targetNatgateway;
        } else {
            const args = argsOrState as RouteTableRouteArgs | undefined;
            if (args?.destinationCidr === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationCidr'");
            }
            if (args?.routeTableId === undefined && !opts.urn) {
                throw new Error("Missing required property 'routeTableId'");
            }
            resourceInputs["destinationCidr"] = args?.destinationCidr;
            resourceInputs["gatewayAddress"] = args?.gatewayAddress;
            resourceInputs["notes"] = args?.notes;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["routeTableId"] = args?.routeTableId;
            resourceInputs["targetGateway"] = args?.targetGateway;
            resourceInputs["targetNatgateway"] = args?.targetNatgateway;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteTableRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteTableRoute resources.
 */
export interface RouteTableRouteState {
    /**
     * Destination CIDR of the Route
     */
    destinationCidr?: pulumi.Input<string>;
    /**
     * Gateway Address of the Route
     */
    gatewayAddress?: pulumi.Input<string>;
    /**
     * Notes for the Route
     */
    notes?: pulumi.Input<string>;
    /**
     * Organisation of the RouteTable
     */
    organisationId?: pulumi.Input<string>;
    /**
     * RouteTable of the Route
     */
    routeTableId?: pulumi.Input<string>;
    /**
     * Target Gateway of the Route
     */
    targetGateway?: pulumi.Input<string>;
    /**
     * Target NAT Gateway of the Route
     */
    targetNatgateway?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteTableRoute resource.
 */
export interface RouteTableRouteArgs {
    /**
     * Destination CIDR of the Route
     */
    destinationCidr: pulumi.Input<string>;
    /**
     * Gateway Address of the Route
     */
    gatewayAddress?: pulumi.Input<string>;
    /**
     * Notes for the Route
     */
    notes?: pulumi.Input<string>;
    /**
     * Organisation of the RouteTable
     */
    organisationId?: pulumi.Input<string>;
    /**
     * RouteTable of the Route
     */
    routeTableId: pulumi.Input<string>;
    /**
     * Target Gateway of the Route
     */
    targetGateway?: pulumi.Input<string>;
    /**
     * Target NAT Gateway of the Route
     */
    targetNatgateway?: pulumi.Input<string>;
}
