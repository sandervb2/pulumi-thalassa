// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Create an Kubernetes Node Pool for a Kubernetes Cluster. This resource is only available for managed Kubernetes Clusters. A Node Pool is a group of nodes that are identically configured and are automatically joined to the Kubernetes Cluster. Node Pools can be scaled up and down as needed.
 */
export class KubernetesNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesNodePool {
        return new KubernetesNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/kubernetesNodePool:KubernetesNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodePool.__pulumiType;
    }

    /**
     * Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use nodeAnnotations instead.
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Availability zone for the Kubernetes Node Pool
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    /**
     * Kubernetes Cluster of the Kubernetes Node Pool
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * A human readable description about the Kubernetes Node Pool
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Enable autohealing for the Kubernetes Node Pool
     */
    declare public readonly enableAutohealing: pulumi.Output<boolean | undefined>;
    /**
     * Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
     */
    declare public readonly kubernetesVersion: pulumi.Output<string | undefined>;
    /**
     * Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use nodeLabels instead.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Machine type for the Kubernetes Node Pool
     */
    declare public readonly machineType: pulumi.Output<string>;
    /**
     * Maximum number of replicas for the Kubernetes Node Pool. May only be set when enableAutoscaling is true.
     */
    declare public readonly maxReplicas: pulumi.Output<number | undefined>;
    /**
     * Minimum number of replicas for the Kubernetes Node Pool. May only be set when enableAutoscaling is true.
     */
    declare public readonly minReplicas: pulumi.Output<number | undefined>;
    /**
     * Name of the Kubernetes Node Pool
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
     */
    declare public readonly nodeAnnotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
     */
    declare public readonly nodeLabels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Taints for the Kubernetes Node Pool
     */
    declare public readonly nodeTaints: pulumi.Output<outputs.KubernetesNodePoolNodeTaint[] | undefined>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * Number of replicas for the Kubernetes Node Pool. Do not set this when enableAutoscaling is true.
     */
    declare public readonly replicas: pulumi.Output<number | undefined>;
    /**
     * List identities of security group that will be attached to the machines in the Node Pool
     */
    declare public readonly securityGroupAttachments: pulumi.Output<string[] | undefined>;
    /**
     * Slug of the Kubernetes Node Pool
     */
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * Status of the Kubernetes Node Pool
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
     */
    declare public readonly subnetId: pulumi.Output<string | undefined>;
    /**
     * Upgrade strategy for the Kubernetes Node Pool
     */
    declare public readonly upgradeStrategy: pulumi.Output<string | undefined>;

    /**
     * Create a KubernetesNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNodePoolArgs | KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesNodePoolState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableAutohealing"] = state?.enableAutohealing;
            resourceInputs["kubernetesVersion"] = state?.kubernetesVersion;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["machineType"] = state?.machineType;
            resourceInputs["maxReplicas"] = state?.maxReplicas;
            resourceInputs["minReplicas"] = state?.minReplicas;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeAnnotations"] = state?.nodeAnnotations;
            resourceInputs["nodeLabels"] = state?.nodeLabels;
            resourceInputs["nodeTaints"] = state?.nodeTaints;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["replicas"] = state?.replicas;
            resourceInputs["securityGroupAttachments"] = state?.securityGroupAttachments;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["upgradeStrategy"] = state?.upgradeStrategy;
        } else {
            const args = argsOrState as KubernetesNodePoolArgs | undefined;
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.machineType === undefined && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableAutohealing"] = args?.enableAutohealing;
            resourceInputs["kubernetesVersion"] = args?.kubernetesVersion;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["machineType"] = args?.machineType;
            resourceInputs["maxReplicas"] = args?.maxReplicas;
            resourceInputs["minReplicas"] = args?.minReplicas;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeAnnotations"] = args?.nodeAnnotations;
            resourceInputs["nodeLabels"] = args?.nodeLabels;
            resourceInputs["nodeTaints"] = args?.nodeTaints;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["replicas"] = args?.replicas;
            resourceInputs["securityGroupAttachments"] = args?.securityGroupAttachments;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["upgradeStrategy"] = args?.upgradeStrategy;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodePool resources.
 */
export interface KubernetesNodePoolState {
    /**
     * Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use nodeAnnotations instead.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Availability zone for the Kubernetes Node Pool
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Kubernetes Cluster of the Kubernetes Node Pool
     */
    clusterId?: pulumi.Input<string>;
    /**
     * A human readable description about the Kubernetes Node Pool
     */
    description?: pulumi.Input<string>;
    /**
     * Enable autohealing for the Kubernetes Node Pool
     */
    enableAutohealing?: pulumi.Input<boolean>;
    /**
     * Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use nodeLabels instead.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Machine type for the Kubernetes Node Pool
     */
    machineType?: pulumi.Input<string>;
    /**
     * Maximum number of replicas for the Kubernetes Node Pool. May only be set when enableAutoscaling is true.
     */
    maxReplicas?: pulumi.Input<number>;
    /**
     * Minimum number of replicas for the Kubernetes Node Pool. May only be set when enableAutoscaling is true.
     */
    minReplicas?: pulumi.Input<number>;
    /**
     * Name of the Kubernetes Node Pool
     */
    name?: pulumi.Input<string>;
    /**
     * Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
     */
    nodeAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Taints for the Kubernetes Node Pool
     */
    nodeTaints?: pulumi.Input<pulumi.Input<inputs.KubernetesNodePoolNodeTaint>[]>;
    organisationId?: pulumi.Input<string>;
    /**
     * Number of replicas for the Kubernetes Node Pool. Do not set this when enableAutoscaling is true.
     */
    replicas?: pulumi.Input<number>;
    /**
     * List identities of security group that will be attached to the machines in the Node Pool
     */
    securityGroupAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Slug of the Kubernetes Node Pool
     */
    slug?: pulumi.Input<string>;
    /**
     * Status of the Kubernetes Node Pool
     */
    status?: pulumi.Input<string>;
    /**
     * Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Upgrade strategy for the Kubernetes Node Pool
     */
    upgradeStrategy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesNodePool resource.
 */
export interface KubernetesNodePoolArgs {
    /**
     * Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use nodeAnnotations instead.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Availability zone for the Kubernetes Node Pool
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Kubernetes Cluster of the Kubernetes Node Pool
     */
    clusterId: pulumi.Input<string>;
    /**
     * A human readable description about the Kubernetes Node Pool
     */
    description?: pulumi.Input<string>;
    /**
     * Enable autohealing for the Kubernetes Node Pool
     */
    enableAutohealing?: pulumi.Input<boolean>;
    /**
     * Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use nodeLabels instead.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Machine type for the Kubernetes Node Pool
     */
    machineType: pulumi.Input<string>;
    /**
     * Maximum number of replicas for the Kubernetes Node Pool. May only be set when enableAutoscaling is true.
     */
    maxReplicas?: pulumi.Input<number>;
    /**
     * Minimum number of replicas for the Kubernetes Node Pool. May only be set when enableAutoscaling is true.
     */
    minReplicas?: pulumi.Input<number>;
    /**
     * Name of the Kubernetes Node Pool
     */
    name?: pulumi.Input<string>;
    /**
     * Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.
     */
    nodeAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Taints for the Kubernetes Node Pool
     */
    nodeTaints?: pulumi.Input<pulumi.Input<inputs.KubernetesNodePoolNodeTaint>[]>;
    organisationId?: pulumi.Input<string>;
    /**
     * Number of replicas for the Kubernetes Node Pool. Do not set this when enableAutoscaling is true.
     */
    replicas?: pulumi.Input<number>;
    /**
     * List identities of security group that will be attached to the machines in the Node Pool
     */
    securityGroupAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Upgrade strategy for the Kubernetes Node Pool
     */
    upgradeStrategy?: pulumi.Input<string>;
}
