// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.
 */
export function getSecurityGroup(args?: GetSecurityGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityGroupResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thalassa:index/getSecurityGroup:getSecurityGroup", {
        "identity": args.identity,
        "name": args.name,
        "organisationId": args.organisationId,
        "vpcIdentity": args.vpcIdentity,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGroup.
 */
export interface GetSecurityGroupArgs {
    /**
     * Identity of the security group
     */
    identity?: string;
    /**
     * Name of the security group
     */
    name?: string;
    organisationId?: string;
    /**
     * Identity of the VPC that the security group belongs to. Required when searching by name.
     */
    vpcIdentity?: string;
}

/**
 * A collection of values returned by getSecurityGroup.
 */
export interface GetSecurityGroupResult {
    /**
     * Flag that indicates if the security group allows traffic between instances in the same security group
     */
    readonly allowSameGroupTraffic: boolean;
    /**
     * Creation timestamp of the security group
     */
    readonly createdAt: string;
    /**
     * Description of the security group
     */
    readonly description: string;
    /**
     * List of egress rules for the security group
     */
    readonly egressRules: outputs.GetSecurityGroupEgressRule[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Identity of the security group
     */
    readonly identity?: string;
    /**
     * List of ingress rules for the security group
     */
    readonly ingressRules: outputs.GetSecurityGroupIngressRule[];
    /**
     * Name of the security group
     */
    readonly name?: string;
    readonly organisationId?: string;
    /**
     * Status of the security group
     */
    readonly status: string;
    /**
     * Last update timestamp of the security group
     */
    readonly updatedAt: string;
    /**
     * Identity of the VPC that the security group belongs to. Required when searching by name.
     */
    readonly vpcIdentity?: string;
}
/**
 * A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.
 */
export function getSecurityGroupOutput(args?: GetSecurityGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSecurityGroupResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("thalassa:index/getSecurityGroup:getSecurityGroup", {
        "identity": args.identity,
        "name": args.name,
        "organisationId": args.organisationId,
        "vpcIdentity": args.vpcIdentity,
    }, opts);
}

/**
 * A collection of arguments for invoking getSecurityGroup.
 */
export interface GetSecurityGroupOutputArgs {
    /**
     * Identity of the security group
     */
    identity?: pulumi.Input<string>;
    /**
     * Name of the security group
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Identity of the VPC that the security group belongs to. Required when searching by name.
     */
    vpcIdentity?: pulumi.Input<string>;
}
