// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create an DB Cluster
 */
export class DbaasDbCluster extends pulumi.CustomResource {
    /**
     * Get an existing DbaasDbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbaasDbClusterState, opts?: pulumi.CustomResourceOptions): DbaasDbCluster {
        return new DbaasDbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/dbaasDbCluster:DbaasDbCluster';

    /**
     * Returns true if the given object is an instance of DbaasDbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbaasDbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbaasDbCluster.__pulumiType;
    }

    /**
     * Amount of storage allocated to the cluster in GB
     */
    declare public readonly allocatedStorage: pulumi.Output<number>;
    /**
     * Annotations of the DB Cluster
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Flag indicating if the cluster should automatically upgrade to the latest minor version
     */
    declare public readonly autoMinorVersionUpgrade: pulumi.Output<boolean | undefined>;
    /**
     * Database instance type of the DB Cluster
     */
    declare public readonly databaseInstanceType: pulumi.Output<string>;
    /**
     * Flag indicating if the cluster should be protected from deletion
     */
    declare public readonly deleteProtection: pulumi.Output<boolean | undefined>;
    /**
     * Description of the DB Cluster
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * IPv4 address of the cluster endpoint
     */
    declare public /*out*/ readonly endpointIpv4: pulumi.Output<string>;
    /**
     * IPv6 address of the cluster endpoint
     */
    declare public /*out*/ readonly endpointIpv6: pulumi.Output<string>;
    /**
     * Database engine of the cluster
     */
    declare public readonly engine: pulumi.Output<string>;
    /**
     * Version of the database engine
     */
    declare public readonly engineVersion: pulumi.Output<string>;
    /**
     * Map of init db parameters
     */
    declare public readonly initDb: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Labels of the DB Cluster
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the DB Cluster
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * Map of parameter name to database engine specific parameter value
     */
    declare public readonly parameters: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Port of the cluster endpoint
     */
    declare public /*out*/ readonly port: pulumi.Output<number>;
    /**
     * Number of instances in the cluster
     */
    declare public readonly replicas: pulumi.Output<number | undefined>;
    /**
     * Identity of the backup to restore from
     */
    declare public readonly restoreFromBackupIdentity: pulumi.Output<string | undefined>;
    /**
     * List of security groups associated with the cluster
     */
    declare public readonly securityGroups: pulumi.Output<string[] | undefined>;
    /**
     * Status of the cluster
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Subnet of the DB Cluster
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * Storage type used to determine the size of the cluster storage
     */
    declare public readonly volumeTypeClass: pulumi.Output<string>;

    /**
     * Create a DbaasDbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbaasDbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbaasDbClusterArgs | DbaasDbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbaasDbClusterState | undefined;
            resourceInputs["allocatedStorage"] = state?.allocatedStorage;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["autoMinorVersionUpgrade"] = state?.autoMinorVersionUpgrade;
            resourceInputs["databaseInstanceType"] = state?.databaseInstanceType;
            resourceInputs["deleteProtection"] = state?.deleteProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["endpointIpv4"] = state?.endpointIpv4;
            resourceInputs["endpointIpv6"] = state?.endpointIpv6;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["engineVersion"] = state?.engineVersion;
            resourceInputs["initDb"] = state?.initDb;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["port"] = state?.port;
            resourceInputs["replicas"] = state?.replicas;
            resourceInputs["restoreFromBackupIdentity"] = state?.restoreFromBackupIdentity;
            resourceInputs["securityGroups"] = state?.securityGroups;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["volumeTypeClass"] = state?.volumeTypeClass;
        } else {
            const args = argsOrState as DbaasDbClusterArgs | undefined;
            if (args?.allocatedStorage === undefined && !opts.urn) {
                throw new Error("Missing required property 'allocatedStorage'");
            }
            if (args?.databaseInstanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseInstanceType'");
            }
            if (args?.engine === undefined && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if (args?.engineVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.volumeTypeClass === undefined && !opts.urn) {
                throw new Error("Missing required property 'volumeTypeClass'");
            }
            resourceInputs["allocatedStorage"] = args?.allocatedStorage;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["autoMinorVersionUpgrade"] = args?.autoMinorVersionUpgrade;
            resourceInputs["databaseInstanceType"] = args?.databaseInstanceType;
            resourceInputs["deleteProtection"] = args?.deleteProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["engine"] = args?.engine;
            resourceInputs["engineVersion"] = args?.engineVersion;
            resourceInputs["initDb"] = args?.initDb;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["replicas"] = args?.replicas;
            resourceInputs["restoreFromBackupIdentity"] = args?.restoreFromBackupIdentity;
            resourceInputs["securityGroups"] = args?.securityGroups;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["volumeTypeClass"] = args?.volumeTypeClass;
            resourceInputs["endpointIpv4"] = undefined /*out*/;
            resourceInputs["endpointIpv6"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbaasDbCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbaasDbCluster resources.
 */
export interface DbaasDbClusterState {
    /**
     * Amount of storage allocated to the cluster in GB
     */
    allocatedStorage?: pulumi.Input<number>;
    /**
     * Annotations of the DB Cluster
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Flag indicating if the cluster should automatically upgrade to the latest minor version
     */
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    /**
     * Database instance type of the DB Cluster
     */
    databaseInstanceType?: pulumi.Input<string>;
    /**
     * Flag indicating if the cluster should be protected from deletion
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * Description of the DB Cluster
     */
    description?: pulumi.Input<string>;
    /**
     * IPv4 address of the cluster endpoint
     */
    endpointIpv4?: pulumi.Input<string>;
    /**
     * IPv6 address of the cluster endpoint
     */
    endpointIpv6?: pulumi.Input<string>;
    /**
     * Database engine of the cluster
     */
    engine?: pulumi.Input<string>;
    /**
     * Version of the database engine
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * Map of init db parameters
     */
    initDb?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels of the DB Cluster
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the DB Cluster
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Map of parameter name to database engine specific parameter value
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Port of the cluster endpoint
     */
    port?: pulumi.Input<number>;
    /**
     * Number of instances in the cluster
     */
    replicas?: pulumi.Input<number>;
    /**
     * Identity of the backup to restore from
     */
    restoreFromBackupIdentity?: pulumi.Input<string>;
    /**
     * List of security groups associated with the cluster
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the cluster
     */
    status?: pulumi.Input<string>;
    /**
     * Subnet of the DB Cluster
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Storage type used to determine the size of the cluster storage
     */
    volumeTypeClass?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbaasDbCluster resource.
 */
export interface DbaasDbClusterArgs {
    /**
     * Amount of storage allocated to the cluster in GB
     */
    allocatedStorage: pulumi.Input<number>;
    /**
     * Annotations of the DB Cluster
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Flag indicating if the cluster should automatically upgrade to the latest minor version
     */
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    /**
     * Database instance type of the DB Cluster
     */
    databaseInstanceType: pulumi.Input<string>;
    /**
     * Flag indicating if the cluster should be protected from deletion
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * Description of the DB Cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Database engine of the cluster
     */
    engine: pulumi.Input<string>;
    /**
     * Version of the database engine
     */
    engineVersion: pulumi.Input<string>;
    /**
     * Map of init db parameters
     */
    initDb?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels of the DB Cluster
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the DB Cluster
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Map of parameter name to database engine specific parameter value
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Number of instances in the cluster
     */
    replicas?: pulumi.Input<number>;
    /**
     * Identity of the backup to restore from
     */
    restoreFromBackupIdentity?: pulumi.Input<string>;
    /**
     * List of security groups associated with the cluster
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet of the DB Cluster
     */
    subnetId: pulumi.Input<string>;
    /**
     * Storage type used to determine the size of the cluster storage
     */
    volumeTypeClass: pulumi.Input<string>;
}
