// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get an Kubernetes cluster
 */
export function getKubernetesCluster(args: GetKubernetesClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thalassa:index/getKubernetesCluster:getKubernetesCluster", {
        "name": args.name,
        "organisationId": args.organisationId,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesCluster.
 */
export interface GetKubernetesClusterArgs {
    /**
     * The name of the Kubernetes version.
     */
    name: string;
    /**
     * Organisation of the Kubernetes Cluster
     */
    organisationId: string;
}

/**
 * A collection of values returned by getKubernetesCluster.
 */
export interface GetKubernetesClusterResult {
    /**
     * Annotations for the Kubernetes Cluster
     */
    readonly annotations: {[key: string]: string};
    /**
     * API server ACLs for the Kubernetes Cluster
     */
    readonly apiServerAcls: outputs.GetKubernetesClusterApiServerAcl[];
    /**
     * Audit log profile of the Kubernetes Cluster
     */
    readonly auditLogProfile: string;
    /**
     * Auto upgrade policy of the Kubernetes Cluster
     */
    readonly autoUpgradePolicy: string;
    /**
     * Cluster type of the Kubernetes Cluster
     */
    readonly clusterType: string;
    /**
     * Cluster version of the Kubernetes Cluster
     */
    readonly clusterVersion: string;
    /**
     * Default network policy of the Kubernetes Cluster
     */
    readonly defaultNetworkPolicy: string;
    /**
     * Delete protection of the Kubernetes Cluster
     */
    readonly deleteProtection: boolean;
    /**
     * A human readable description about the Kubernetes Cluster
     */
    readonly description: string;
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * Kubernetes API server CA certificate of the Kubernetes Cluster
     */
    readonly kubernetesApiServerCaCertificate: string;
    /**
     * Kubernetes API server endpoint of the Kubernetes Cluster
     */
    readonly kubernetesApiServerEndpoint: string;
    /**
     * Labels for the Kubernetes Cluster
     */
    readonly labels: {[key: string]: string};
    /**
     * Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)
     */
    readonly maintenanceDay: number;
    /**
     * Time of day when the cluster will be upgraded in minutes from midnight
     */
    readonly maintenanceStartAt: number;
    /**
     * The name of the Kubernetes version.
     */
    readonly name: string;
    /**
     * CNI of the Kubernetes Cluster
     */
    readonly networkingCni: string;
    /**
     * Pod CIDR of the Kubernetes Cluster
     */
    readonly networkingPodCidr: string;
    /**
     * Service CIDR of the Kubernetes Cluster
     */
    readonly networkingServiceCidr: string;
    /**
     * Organisation of the Kubernetes Cluster
     */
    readonly organisationId: string;
    /**
     * Pod security standards profile of the Kubernetes Cluster
     */
    readonly podSecurityStandardsProfile: string;
    /**
     * Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.
     */
    readonly region: string;
    /**
     * The slug of the Kubernetes version.
     */
    readonly slug: string;
    /**
     * Subnet of the Kubernetes Cluster.
     */
    readonly subnetId: string;
    /**
     * VPC of the Kubernetes Cluster.
     */
    readonly vpcId: string;
}
/**
 * Get an Kubernetes cluster
 */
export function getKubernetesClusterOutput(args: GetKubernetesClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetKubernetesClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("thalassa:index/getKubernetesCluster:getKubernetesCluster", {
        "name": args.name,
        "organisationId": args.organisationId,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesCluster.
 */
export interface GetKubernetesClusterOutputArgs {
    /**
     * The name of the Kubernetes version.
     */
    name: pulumi.Input<string>;
    /**
     * Organisation of the Kubernetes Cluster
     */
    organisationId: pulumi.Input<string>;
}
