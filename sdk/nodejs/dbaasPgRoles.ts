// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create a PostgreSQL role
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the database cluster
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for database cluster",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a subnet for the database cluster
 * const exampleSubnet = new thalassa.Subnet("example", {
 *     name: "example-subnet",
 *     description: "Example subnet for database cluster",
 *     vpcId: example.id,
 *     cidr: "10.0.1.0/24",
 * });
 * // Create a database cluster for the PostgreSQL roles
 * const exampleDbaasDbCluster = new thalassa.DbaasDbCluster("example", {
 *     name: "example-db-cluster",
 *     description: "Example database cluster for PostgreSQL roles",
 *     subnetId: exampleSubnet.id,
 *     databaseInstanceType: "db-pgp-small",
 *     engine: "postgres",
 *     engineVersion: "15.13",
 *     allocatedStorage: 100,
 *     volumeTypeClass: "block",
 * });
 * // Create PostgreSQL roles with Thalassa default values
 * const exampleDbaasPgRoles = new thalassa.DbaasPgRoles("example", {
 *     dbClusterId: exampleDbaasDbCluster.id,
 *     name: "example_role",
 *     password: "secure_password_123",
 * });
 * export const pgRolesId = exampleDbaasPgRoles.id;
 * export const pgRolesName = exampleDbaasPgRoles.name;
 * ```
 */
export class DbaasPgRoles extends pulumi.CustomResource {
    /**
     * Get an existing DbaasPgRoles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbaasPgRolesState, opts?: pulumi.CustomResourceOptions): DbaasPgRoles {
        return new DbaasPgRoles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/dbaasPgRoles:DbaasPgRoles';

    /**
     * Returns true if the given object is an instance of DbaasPgRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbaasPgRoles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbaasPgRoles.__pulumiType;
    }

    /**
     * The connection limit of the role
     */
    declare public readonly connectionLimit: pulumi.Output<number | undefined>;
    /**
     * Whether the role can create databases
     */
    declare public readonly createDb: pulumi.Output<boolean | undefined>;
    /**
     * Whether the role can create roles
     */
    declare public readonly createRole: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the database
     */
    declare public readonly dbClusterId: pulumi.Output<string>;
    /**
     * Whether the role can login
     */
    declare public readonly login: pulumi.Output<boolean | undefined>;
    /**
     * The name of the role
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * The password of the role
     */
    declare public readonly password: pulumi.Output<string>;

    /**
     * Create a DbaasPgRoles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbaasPgRolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbaasPgRolesArgs | DbaasPgRolesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbaasPgRolesState | undefined;
            resourceInputs["connectionLimit"] = state?.connectionLimit;
            resourceInputs["createDb"] = state?.createDb;
            resourceInputs["createRole"] = state?.createRole;
            resourceInputs["dbClusterId"] = state?.dbClusterId;
            resourceInputs["login"] = state?.login;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["password"] = state?.password;
        } else {
            const args = argsOrState as DbaasPgRolesArgs | undefined;
            if (args?.dbClusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbClusterId'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["connectionLimit"] = args?.connectionLimit;
            resourceInputs["createDb"] = args?.createDb;
            resourceInputs["createRole"] = args?.createRole;
            resourceInputs["dbClusterId"] = args?.dbClusterId;
            resourceInputs["login"] = args?.login;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DbaasPgRoles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbaasPgRoles resources.
 */
export interface DbaasPgRolesState {
    /**
     * The connection limit of the role
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Whether the role can create databases
     */
    createDb?: pulumi.Input<boolean>;
    /**
     * Whether the role can create roles
     */
    createRole?: pulumi.Input<boolean>;
    /**
     * The ID of the database
     */
    dbClusterId?: pulumi.Input<string>;
    /**
     * Whether the role can login
     */
    login?: pulumi.Input<boolean>;
    /**
     * The name of the role
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The password of the role
     */
    password?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbaasPgRoles resource.
 */
export interface DbaasPgRolesArgs {
    /**
     * The connection limit of the role
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Whether the role can create databases
     */
    createDb?: pulumi.Input<boolean>;
    /**
     * Whether the role can create roles
     */
    createRole?: pulumi.Input<boolean>;
    /**
     * The ID of the database
     */
    dbClusterId: pulumi.Input<string>;
    /**
     * Whether the role can login
     */
    login?: pulumi.Input<boolean>;
    /**
     * The name of the role
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * The password of the role
     */
    password: pulumi.Input<string>;
}
