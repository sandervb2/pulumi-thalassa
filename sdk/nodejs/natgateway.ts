// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create an NAT Gateway within a VPC
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the NAT gateway
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for NAT gateway",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a subnet for the NAT gateway
 * const exampleSubnet = new thalassa.Subnet("example", {
 *     name: "example-subnet",
 *     description: "Example subnet for NAT gateway",
 *     vpcId: example.id,
 *     cidr: "10.0.1.0/24",
 * });
 * // Create a NAT gateway with all optional attributes
 * const exampleNatgateway = new thalassa.Natgateway("example", {
 *     name: "example-nat-gateway",
 *     subnetId: exampleSubnet.id,
 *     description: "Example NAT gateway for documentation",
 *     labels: {
 *         environment: "production",
 *         service: "networking",
 *         tier: "public",
 *     },
 *     annotations: {
 *         "cost-center": "cc-12345",
 *         "backup-policy": "none",
 *         monitoring: "enabled",
 *     },
 * });
 * export const natGatewayId = exampleNatgateway.id;
 * export const natGatewayEndpointIp = exampleNatgateway.endpointIp;
 * ```
 */
export class Natgateway extends pulumi.CustomResource {
    /**
     * Get an existing Natgateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatgatewayState, opts?: pulumi.CustomResourceOptions): Natgateway {
        return new Natgateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/natgateway:Natgateway';

    /**
     * Returns true if the given object is an instance of Natgateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Natgateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Natgateway.__pulumiType;
    }

    /**
     * Annotations for the NatGateway
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A human readable description about the natGateway
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Endpoint IP of the NatGateway
     */
    declare public /*out*/ readonly endpointIp: pulumi.Output<string>;
    /**
     * Labels for the NatGateway
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the NatGateway
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * List identities of security group that will be attached to the NAT Gateway
     */
    declare public readonly securityGroupAttachments: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * Status of the NatGateway
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Subnet of the NatGateway
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * V4 IP of the NatGateway
     */
    declare public /*out*/ readonly v4Ip: pulumi.Output<string>;
    /**
     * V6 IP of the NatGateway
     */
    declare public /*out*/ readonly v6Ip: pulumi.Output<string>;
    /**
     * VPC of the NatGateway
     */
    declare public /*out*/ readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Natgateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatgatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatgatewayArgs | NatgatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatgatewayState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["description"] = state?.description;
            resourceInputs["endpointIp"] = state?.endpointIp;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["securityGroupAttachments"] = state?.securityGroupAttachments;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["v4Ip"] = state?.v4Ip;
            resourceInputs["v6Ip"] = state?.v6Ip;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as NatgatewayArgs | undefined;
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["securityGroupAttachments"] = args?.securityGroupAttachments;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["endpointIp"] = undefined /*out*/;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["v4Ip"] = undefined /*out*/;
            resourceInputs["v6Ip"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Natgateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Natgateway resources.
 */
export interface NatgatewayState {
    /**
     * Annotations for the NatGateway
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A human readable description about the natGateway
     */
    description?: pulumi.Input<string>;
    /**
     * Endpoint IP of the NatGateway
     */
    endpointIp?: pulumi.Input<string>;
    /**
     * Labels for the NatGateway
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the NatGateway
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * List identities of security group that will be attached to the NAT Gateway
     */
    securityGroupAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    slug?: pulumi.Input<string>;
    /**
     * Status of the NatGateway
     */
    status?: pulumi.Input<string>;
    /**
     * Subnet of the NatGateway
     */
    subnetId?: pulumi.Input<string>;
    /**
     * V4 IP of the NatGateway
     */
    v4Ip?: pulumi.Input<string>;
    /**
     * V6 IP of the NatGateway
     */
    v6Ip?: pulumi.Input<string>;
    /**
     * VPC of the NatGateway
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Natgateway resource.
 */
export interface NatgatewayArgs {
    /**
     * Annotations for the NatGateway
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A human readable description about the natGateway
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the NatGateway
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the NatGateway
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * List identities of security group that will be attached to the NAT Gateway
     */
    securityGroupAttachments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet of the NatGateway
     */
    subnetId: pulumi.Input<string>;
}
