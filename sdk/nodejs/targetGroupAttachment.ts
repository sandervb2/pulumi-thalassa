// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Attach a Virtual Machine Instance to a target group
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the resources
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for target group attachment",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a subnet for the resources
 * const exampleSubnet = new thalassa.Subnet("example", {
 *     name: "example-subnet",
 *     description: "Example subnet for target group attachment",
 *     vpcId: example.id,
 *     cidr: "10.0.1.0/24",
 * });
 * // Create a target group
 * const exampleTargetGroup = new thalassa.TargetGroup("example", {
 *     name: "example-target-group",
 *     description: "Example target group for attachment",
 *     vpcId: example.id,
 *     protocol: "tcp",
 *     port: 80,
 * });
 * // Create a virtual machine instance
 * const exampleVirtualMachineInstance = new thalassa.VirtualMachineInstance("example", {
 *     name: "example-instance",
 *     subnetId: exampleSubnet.id,
 *     machineType: "pgp-small",
 *     machineImage: "ubuntu-22.04",
 *     availabilityZone: "nl-01a",
 *     rootVolumeSizeGb: 20,
 *     rootVolumeType: "Block",
 * });
 * // Create a target group attachment with all required attributes
 * const exampleTargetGroupAttachment = new thalassa.TargetGroupAttachment("example", {
 *     targetGroupId: exampleTargetGroup.id,
 *     vmiId: exampleVirtualMachineInstance.id,
 * });
 * export const attachmentId = exampleTargetGroupAttachment.id;
 * ```
 */
export class TargetGroupAttachment extends pulumi.CustomResource {
    /**
     * Get an existing TargetGroupAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TargetGroupAttachmentState, opts?: pulumi.CustomResourceOptions): TargetGroupAttachment {
        return new TargetGroupAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/targetGroupAttachment:TargetGroupAttachment';

    /**
     * Returns true if the given object is an instance of TargetGroupAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TargetGroupAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TargetGroupAttachment.__pulumiType;
    }

    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * The ID of the target group to attach to
     */
    declare public readonly targetGroupId: pulumi.Output<string>;
    /**
     * The ID of the Virtual Machine Instance to attach
     */
    declare public readonly vmiId: pulumi.Output<string>;

    /**
     * Create a TargetGroupAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TargetGroupAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TargetGroupAttachmentArgs | TargetGroupAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TargetGroupAttachmentState | undefined;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["targetGroupId"] = state?.targetGroupId;
            resourceInputs["vmiId"] = state?.vmiId;
        } else {
            const args = argsOrState as TargetGroupAttachmentArgs | undefined;
            if (args?.targetGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetGroupId'");
            }
            if (args?.vmiId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmiId'");
            }
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["targetGroupId"] = args?.targetGroupId;
            resourceInputs["vmiId"] = args?.vmiId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TargetGroupAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TargetGroupAttachment resources.
 */
export interface TargetGroupAttachmentState {
    organisationId?: pulumi.Input<string>;
    /**
     * The ID of the target group to attach to
     */
    targetGroupId?: pulumi.Input<string>;
    /**
     * The ID of the Virtual Machine Instance to attach
     */
    vmiId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TargetGroupAttachment resource.
 */
export interface TargetGroupAttachmentArgs {
    organisationId?: pulumi.Input<string>;
    /**
     * The ID of the target group to attach to
     */
    targetGroupId: pulumi.Input<string>;
    /**
     * The ID of the Virtual Machine Instance to attach
     */
    vmiId: pulumi.Input<string>;
}
