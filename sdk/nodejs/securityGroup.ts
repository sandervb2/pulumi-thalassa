// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for security group",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a security group
 * const exampleSecurityGroup = new thalassa.SecurityGroup("example", {
 *     name: "example-security-group",
 *     description: "Example security group for documentation",
 *     vpcId: example.id,
 *     allowSameGroupTraffic: false,
 *     ingressRules: [
 *         {
 *             name: "allow-http",
 *             ipVersion: "ipv4",
 *             protocol: "tcp",
 *             priority: 100,
 *             remoteType: "address",
 *             remoteAddress: "10.0.0.0/0",
 *             portRangeMin: 80,
 *             portRangeMax: 80,
 *             policy: "allow",
 *         },
 *         {
 *             name: "allow-https",
 *             ipVersion: "ipv4",
 *             protocol: "tcp",
 *             priority: 101,
 *             remoteType: "address",
 *             remoteAddress: "0.0.0.0/0",
 *             portRangeMin: 443,
 *             portRangeMax: 443,
 *             policy: "allow",
 *         },
 *     ],
 *     egressRules: [{
 *         name: "allow-all",
 *         ipVersion: "ipv4",
 *         protocol: "all",
 *         priority: 100,
 *         remoteType: "address",
 *         remoteAddress: "0.0.0.0/0",
 *         policy: "allow",
 *     }],
 * });
 * export const securityGroupId = exampleSecurityGroup.id;
 * export const securityGroupName = exampleSecurityGroup.name;
 * ```
 */
export class SecurityGroup extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGroupState, opts?: pulumi.CustomResourceOptions): SecurityGroup {
        return new SecurityGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/securityGroup:SecurityGroup';

    /**
     * Returns true if the given object is an instance of SecurityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroup.__pulumiType;
    }

    /**
     * Flag that indicates if the security group allows traffic between instances in the same security group
     */
    declare public readonly allowSameGroupTraffic: pulumi.Output<boolean | undefined>;
    /**
     * Creation timestamp of the security group
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Description of the security group
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * List of egress rules for the security group
     */
    declare public readonly egressRules: pulumi.Output<outputs.SecurityGroupEgressRule[] | undefined>;
    /**
     * Identity of the security group
     */
    declare public /*out*/ readonly identity: pulumi.Output<string>;
    /**
     * List of ingress rules for the security group
     */
    declare public readonly ingressRules: pulumi.Output<outputs.SecurityGroupIngressRule[] | undefined>;
    /**
     * Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * Status of the security group
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Last update timestamp of the security group
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * Identity of the VPC that the security group belongs to
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a SecurityGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGroupArgs | SecurityGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGroupState | undefined;
            resourceInputs["allowSameGroupTraffic"] = state?.allowSameGroupTraffic;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["egressRules"] = state?.egressRules;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["ingressRules"] = state?.ingressRules;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["status"] = state?.status;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as SecurityGroupArgs | undefined;
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["allowSameGroupTraffic"] = args?.allowSameGroupTraffic;
            resourceInputs["description"] = args?.description;
            resourceInputs["egressRules"] = args?.egressRules;
            resourceInputs["ingressRules"] = args?.ingressRules;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["identity"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityGroup resources.
 */
export interface SecurityGroupState {
    /**
     * Flag that indicates if the security group allows traffic between instances in the same security group
     */
    allowSameGroupTraffic?: pulumi.Input<boolean>;
    /**
     * Creation timestamp of the security group
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the security group
     */
    description?: pulumi.Input<string>;
    /**
     * List of egress rules for the security group
     */
    egressRules?: pulumi.Input<pulumi.Input<inputs.SecurityGroupEgressRule>[]>;
    /**
     * Identity of the security group
     */
    identity?: pulumi.Input<string>;
    /**
     * List of ingress rules for the security group
     */
    ingressRules?: pulumi.Input<pulumi.Input<inputs.SecurityGroupIngressRule>[]>;
    /**
     * Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Status of the security group
     */
    status?: pulumi.Input<string>;
    /**
     * Last update timestamp of the security group
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Identity of the VPC that the security group belongs to
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityGroup resource.
 */
export interface SecurityGroupArgs {
    /**
     * Flag that indicates if the security group allows traffic between instances in the same security group
     */
    allowSameGroupTraffic?: pulumi.Input<boolean>;
    /**
     * Description of the security group
     */
    description?: pulumi.Input<string>;
    /**
     * List of egress rules for the security group
     */
    egressRules?: pulumi.Input<pulumi.Input<inputs.SecurityGroupEgressRule>[]>;
    /**
     * List of ingress rules for the security group
     */
    ingressRules?: pulumi.Input<pulumi.Input<inputs.SecurityGroupIngressRule>[]>;
    /**
     * Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Identity of the VPC that the security group belongs to
     */
    vpcId: pulumi.Input<string>;
}
