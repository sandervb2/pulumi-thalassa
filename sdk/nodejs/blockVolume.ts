// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Thalassa Cloud Block Volume resource. This can be used to create, manage, and attach a detachable storage device to a virtual machine instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a block volume with Thalassa default values
 * const example = new thalassa.BlockVolume("example", {
 *     name: "example-block-volume",
 *     description: "Example block volume for documentation",
 *     region: "nl-01",
 *     volumeType: "Block",
 *     sizeGb: 20,
 * });
 * export const blockVolumeId = example.id;
 * export const blockVolumeName = example.name;
 * ```
 */
export class BlockVolume extends pulumi.CustomResource {
    /**
     * Get an existing BlockVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockVolumeState, opts?: pulumi.CustomResourceOptions): BlockVolume {
        return new BlockVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/blockVolume:BlockVolume';

    /**
     * Returns true if the given object is an instance of BlockVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockVolume.__pulumiType;
    }

    /**
     * Annotations for the Block Volume
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Delete protection of the Block Volume
     */
    declare public readonly deleteProtection: pulumi.Output<boolean | undefined>;
    /**
     * A human readable description about the Block Volume
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Labels for the Block Volume
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the Block Volume
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    /**
     * Region of the Block Volume.
     */
    declare public readonly region: pulumi.Output<string | undefined>;
    /**
     * Size of the Block Volume in GB
     */
    declare public readonly sizeGb: pulumi.Output<number>;
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * Status of the Block Volume
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Volume type of the Block Volume
     */
    declare public readonly volumeType: pulumi.Output<string>;
    /**
     * Wait until the Block Volume is ready
     */
    declare public readonly waitUntilReady: pulumi.Output<boolean | undefined>;

    /**
     * Create a BlockVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockVolumeArgs | BlockVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockVolumeState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["deleteProtection"] = state?.deleteProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["region"] = state?.region;
            resourceInputs["sizeGb"] = state?.sizeGb;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["status"] = state?.status;
            resourceInputs["volumeType"] = state?.volumeType;
            resourceInputs["waitUntilReady"] = state?.waitUntilReady;
        } else {
            const args = argsOrState as BlockVolumeArgs | undefined;
            if (args?.sizeGb === undefined && !opts.urn) {
                throw new Error("Missing required property 'sizeGb'");
            }
            if (args?.volumeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'volumeType'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["deleteProtection"] = args?.deleteProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["region"] = args?.region;
            resourceInputs["sizeGb"] = args?.sizeGb;
            resourceInputs["volumeType"] = args?.volumeType;
            resourceInputs["waitUntilReady"] = args?.waitUntilReady;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockVolume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BlockVolume resources.
 */
export interface BlockVolumeState {
    /**
     * Annotations for the Block Volume
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Delete protection of the Block Volume
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * A human readable description about the Block Volume
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the Block Volume
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Block Volume
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Region of the Block Volume.
     */
    region?: pulumi.Input<string>;
    /**
     * Size of the Block Volume in GB
     */
    sizeGb?: pulumi.Input<number>;
    slug?: pulumi.Input<string>;
    /**
     * Status of the Block Volume
     */
    status?: pulumi.Input<string>;
    /**
     * Volume type of the Block Volume
     */
    volumeType?: pulumi.Input<string>;
    /**
     * Wait until the Block Volume is ready
     */
    waitUntilReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a BlockVolume resource.
 */
export interface BlockVolumeArgs {
    /**
     * Annotations for the Block Volume
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Delete protection of the Block Volume
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * A human readable description about the Block Volume
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the Block Volume
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Block Volume
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * Region of the Block Volume.
     */
    region?: pulumi.Input<string>;
    /**
     * Size of the Block Volume in GB
     */
    sizeGb: pulumi.Input<number>;
    /**
     * Volume type of the Block Volume
     */
    volumeType: pulumi.Input<string>;
    /**
     * Wait until the Block Volume is ready
     */
    waitUntilReady?: pulumi.Input<boolean>;
}
