// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create an routeTable
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as thalassa from "@pulumi/thalassa";
 *
 * // Create a VPC for the route table
 * const example = new thalassa.Vpc("example", {
 *     name: "example-vpc",
 *     description: "Example VPC for route table",
 *     region: "nl-01",
 *     cidrs: ["10.0.0.0/16"],
 * });
 * // Create a route table
 * const exampleRouteTable = new thalassa.RouteTable("example", {
 *     name: "example-route-table",
 *     vpcId: example.id,
 *     description: "Example route table for documentation",
 *     labels: {
 *         environment: "production",
 *         service: "networking",
 *         tier: "private",
 *     },
 *     annotations: {
 *         "cost-center": "cc-12345",
 *         "backup-policy": "none",
 *         monitoring: "enabled",
 *     },
 * });
 * export const routeTableId = exampleRouteTable.id;
 * ```
 */
export class RouteTable extends pulumi.CustomResource {
    /**
     * Get an existing RouteTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteTableState, opts?: pulumi.CustomResourceOptions): RouteTable {
        return new RouteTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thalassa:index/routeTable:RouteTable';

    /**
     * Returns true if the given object is an instance of RouteTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteTable.__pulumiType;
    }

    /**
     * Annotations for the RouteTable
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A human readable description about the routeTable
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Labels for the RouteTable
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the RouteTable
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organisationId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly slug: pulumi.Output<string>;
    /**
     * VPC of the RouteTable
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a RouteTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteTableArgs | RouteTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteTableState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["organisationId"] = state?.organisationId;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as RouteTableArgs | undefined;
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["organisationId"] = args?.organisationId;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["slug"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteTable resources.
 */
export interface RouteTableState {
    /**
     * Annotations for the RouteTable
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A human readable description about the routeTable
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the RouteTable
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the RouteTable
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    /**
     * VPC of the RouteTable
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteTable resource.
 */
export interface RouteTableArgs {
    /**
     * Annotations for the RouteTable
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A human readable description about the routeTable
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the RouteTable
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the RouteTable
     */
    name?: pulumi.Input<string>;
    organisationId?: pulumi.Input<string>;
    /**
     * VPC of the RouteTable
     */
    vpcId: pulumi.Input<string>;
}
