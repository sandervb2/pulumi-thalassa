name: Release

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"

permissions:
  contents: read
  pull-requests: read

env:
  PROVIDER: thalassa
  GO111MODULE: "on"

jobs:
  # 1) Create a GitHub Release (and tag) from commits on main
  release:
    runs-on: ubuntu-latest
    name: Release (release-please)
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a
        with:
          egress-policy: audit
      - uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c
        id: release

  # 2) Build provider binaries and upload them to the GitHub Release
  publish_provider:
    if: needs.release.outputs.release_created || startsWith(github.ref, 'refs/tags/v')
    needs: [ release ]
    runs-on: ubuntu-latest
    name: Build & Upload Provider Binaries
    permissions:
      contents: write
    steps:
      - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0

      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
        with:
          go-version: "1.25.x"
          cache-dependency-path: "**/*.sum"

      # Build the cross-platform provider tarballs under dist/
      - name: Build provider distributions
        run: |
          make clean
          make tfgen
          make provider_dist

      # Upload assets to the *existing* release created by release-please
      - name: Upload provider assets to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || needs.release.outputs.tag_name }}
          files: |
            dist/pulumi-resource-thalassa-*.tar.gz
            dist/*_checksums.txt

  # 3) Publish the Node SDK to npm
  # publish_node_sdk:
  #   if: needs.release.outputs.release_created
  #   needs: [ release, publish_provider ]
  #   runs-on: ubuntu-latest
  #   name: Publish Node.js SDK
  #   permissions:
  #     contents: read
  #   steps:
  #     - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a
  #       with:
  #         egress-policy: audit

  #     - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
  #       with:
  #         fetch-depth: 0

  #     - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
  #       with:
  #         node-version: "20"
  #         registry-url: "https://registry.npmjs.org"

  #     # Build Node SDK into sdk/nodejs/bin (per Pulumi boilerplate)
  #     - name: Build Node SDK
  #       run: |
  #         make generate_nodejs
  #         make build_nodejs

  #     # Replace ${VERSION} in the *built* package.json with the tag version
  #     - name: Set SDK version from Git tag
  #       run: |
  #         REF_NAME="${{ github.ref_name }}"           # e.g. v0.1.2
  #         VERSION="${REF_NAME#v}"                     # strip leading v
  #         PKG="./sdk/nodejs/bin/package.json"
  #         node -e "let f='${PKG}', p=require(f); p.version='${VERSION}'; require('fs').writeFileSync(f, JSON.stringify(p, null, 2));"

      # Publish the SDK to npm
      # - name: Publish to npm
      #   working-directory: sdk/nodejs/bin
      #   run: npm publish --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
