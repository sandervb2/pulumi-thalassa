{
    "name": "thalassa",
    "displayName": "Thalassa Cloud",
    "description": "A Pulumi package for creating and managing Thalassa Cloud resources.",
    "keywords": [
        "thalassa",
        "category/cloud"
    ],
    "homepage": "https://github.com/sandervb2/pulumi-thalassa",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`thalassa` Terraform Provider](https://github.com/thalassa-cloud/terraform-provider-thalassa).",
    "repository": "https://github.com/sandervb2/pulumi-thalassa",
    "pluginDownloadURL": "github://api.github.com/sandervb2/pulumi-thalassa",
    "publisher": "Sander van Bruggen",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "thalassa": "Thalassa"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@sandervb2/pulumi-thalassa",
            "packageDescription": "A Pulumi package for creating and managing Thalassa Cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/thalassa-cloud/terraform-provider-thalassa)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-thalassa` repo](https://github.com/sandervb2/pulumi-thalassa/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-thalassa` repo](https://github.com/thalassa-cloud/terraform-provider-thalassa/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumi_thalassa",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/thalassa-cloud/terraform-provider-thalassa)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-thalassa` repo](https://github.com/sandervb2/pulumi-thalassa/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-thalassa` repo](https://github.com/thalassa-cloud/terraform-provider-thalassa/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "api": {
                "type": "string",
                "description": "The API endpoint URL. Can be set via the THALASSA_API_ENDPOINT environment variable."
            },
            "clientId": {
                "type": "string",
                "description": "The OIDC client ID for authentication. Can be set via the THALASSA_CLIENT_ID environment variable.",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "The OIDC client secret for authentication. Can be set via the THALASSA_CLIENT_SECRET environment variable.",
                "secret": true
            },
            "organisationId": {
                "type": "string",
                "description": "The organisation ID to use. Can be set via the THALASSA_ORGANISATION environment variable."
            },
            "token": {
                "type": "string",
                "description": "The API token for authentication. Can be set via the THALASSA_API_TOKEN environment variable.",
                "secret": true
            }
        }
    },
    "types": {
        "thalassa:index/KubernetesClusterApiServerAcl:KubernetesClusterApiServerAcl": {
            "properties": {
                "allowedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed CIDRs for API server access\n"
                }
            },
            "type": "object"
        },
        "thalassa:index/KubernetesNodePoolNodeTaint:KubernetesNodePoolNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Effect of the taint\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the taint\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator of the taint\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the taint. Optional.\n"
                }
            },
            "type": "object"
        },
        "thalassa:index/SecurityGroupEgressRule:SecurityGroupEgressRule": {
            "properties": {
                "ipVersion": {
                    "type": "string",
                    "description": "IP version of the rule (ipv4 or ipv6)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the rule\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Policy of the rule (allow or drop)\n"
                },
                "portRangeMax": {
                    "type": "integer",
                    "description": "Maximum port of the rule. Must be greater than 0 and less than 65535.\n"
                },
                "portRangeMin": {
                    "type": "integer",
                    "description": "Minimum port of the rule. Must be greater than 0 and less than 65535.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the rule. Must be greater than 0 and less than 200.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the rule (all, tcp, udp, icmp)\n"
                },
                "remoteAddress": {
                    "type": "string",
                    "description": "IP address or CIDR block that the rule applies to\n"
                },
                "remoteSecurityGroupIdentity": {
                    "type": "string",
                    "description": "Identity of the security group that the rule applies to\n"
                },
                "remoteType": {
                    "type": "string",
                    "description": "Type of the remote address (address or securityGroup)\n"
                }
            },
            "type": "object",
            "required": [
                "ipVersion",
                "name",
                "policy",
                "priority",
                "protocol",
                "remoteType"
            ]
        },
        "thalassa:index/SecurityGroupIngressRule:SecurityGroupIngressRule": {
            "properties": {
                "ipVersion": {
                    "type": "string",
                    "description": "IP version of the rule (ipv4 or ipv6)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the rule\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Policy of the rule (allow or drop)\n"
                },
                "portRangeMax": {
                    "type": "integer",
                    "description": "Maximum port of the rule. Must be greater than 0 and less than 65535.\n"
                },
                "portRangeMin": {
                    "type": "integer",
                    "description": "Minimum port of the rule. Must be greater than 0 and less than 65535.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the rule. Must be greater than 0 and less than 200.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the rule (all, tcp, udp, icmp)\n"
                },
                "remoteAddress": {
                    "type": "string",
                    "description": "IP address or CIDR block that the rule applies to\n"
                },
                "remoteSecurityGroupIdentity": {
                    "type": "string",
                    "description": "Identity of the security group that the rule applies to\n"
                },
                "remoteType": {
                    "type": "string",
                    "description": "Type of the remote address (address or securityGroup)\n"
                }
            },
            "type": "object",
            "required": [
                "ipVersion",
                "name",
                "policy",
                "priority",
                "protocol",
                "remoteType"
            ]
        },
        "thalassa:index/TargetGroupAttachment:TargetGroupAttachment": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the target (e.g. instance ID)\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "thalassa:index/getKubernetesClusterApiServerAcl:getKubernetesClusterApiServerAcl": {
            "properties": {
                "allowedCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed CIDRs for API server access\n"
                }
            },
            "type": "object",
            "required": [
                "allowedCidrs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "thalassa:index/getRegionsRegion:getRegionsRegion": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The annotations of the region.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the region.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The identity of the region.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The labels of the region.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the region.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the region.\n"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "description",
                "id",
                "labels",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "thalassa:index/getSecurityGroupEgressRule:getSecurityGroupEgressRule": {
            "properties": {
                "ipVersion": {
                    "type": "string",
                    "description": "IP version of the rule (ipv4 or ipv6)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the rule\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Policy of the rule (allow or drop)\n"
                },
                "portRangeMax": {
                    "type": "integer",
                    "description": "Maximum port of the rule\n"
                },
                "portRangeMin": {
                    "type": "integer",
                    "description": "Minimum port of the rule\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the rule\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the rule (all, tcp, udp, icmp)\n"
                },
                "remoteAddress": {
                    "type": "string",
                    "description": "IP address or CIDR block that the rule applies to\n"
                },
                "remoteSecurityGroupIdentity": {
                    "type": "string",
                    "description": "Identity of the security group that the rule applies to\n"
                },
                "remoteType": {
                    "type": "string",
                    "description": "Type of the remote address (address or securityGroup)\n"
                }
            },
            "type": "object",
            "required": [
                "ipVersion",
                "name",
                "policy",
                "portRangeMax",
                "portRangeMin",
                "priority",
                "protocol",
                "remoteAddress",
                "remoteSecurityGroupIdentity",
                "remoteType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "thalassa:index/getSecurityGroupIngressRule:getSecurityGroupIngressRule": {
            "properties": {
                "ipVersion": {
                    "type": "string",
                    "description": "IP version of the rule (ipv4 or ipv6)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the rule\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Policy of the rule (allow or drop)\n"
                },
                "portRangeMax": {
                    "type": "integer",
                    "description": "Maximum port of the rule\n"
                },
                "portRangeMin": {
                    "type": "integer",
                    "description": "Minimum port of the rule\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of the rule\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the rule (all, tcp, udp, icmp)\n"
                },
                "remoteAddress": {
                    "type": "string",
                    "description": "IP address or CIDR block that the rule applies to\n"
                },
                "remoteSecurityGroupIdentity": {
                    "type": "string",
                    "description": "Identity of the security group that the rule applies to\n"
                },
                "remoteType": {
                    "type": "string",
                    "description": "Type of the remote address (address or securityGroup)\n"
                }
            },
            "type": "object",
            "required": [
                "ipVersion",
                "name",
                "policy",
                "portRangeMax",
                "portRangeMin",
                "priority",
                "protocol",
                "remoteAddress",
                "remoteSecurityGroupIdentity",
                "remoteType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the thalassa package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "api": {
                "type": "string",
                "description": "The API endpoint URL. Can be set via the THALASSA_API_ENDPOINT environment variable."
            },
            "clientId": {
                "type": "string",
                "description": "The OIDC client ID for authentication. Can be set via the THALASSA_CLIENT_ID environment variable.",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "The OIDC client secret for authentication. Can be set via the THALASSA_CLIENT_SECRET environment variable.",
                "secret": true
            },
            "organisationId": {
                "type": "string",
                "description": "The organisation ID to use. Can be set via the THALASSA_ORGANISATION environment variable."
            },
            "token": {
                "type": "string",
                "description": "The API token for authentication. Can be set via the THALASSA_API_TOKEN environment variable.",
                "secret": true
            }
        },
        "inputProperties": {
            "api": {
                "type": "string",
                "description": "The API endpoint URL. Can be set via the THALASSA_API_ENDPOINT environment variable."
            },
            "clientId": {
                "type": "string",
                "description": "The OIDC client ID for authentication. Can be set via the THALASSA_CLIENT_ID environment variable.",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "description": "The OIDC client secret for authentication. Can be set via the THALASSA_CLIENT_SECRET environment variable.",
                "secret": true
            },
            "organisationId": {
                "type": "string",
                "description": "The organisation ID to use. Can be set via the THALASSA_ORGANISATION environment variable."
            },
            "token": {
                "type": "string",
                "description": "The API token for authentication. Can be set via the THALASSA_API_TOKEN environment variable.",
                "secret": true
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:thalassa/terraformConfig"
        }
    },
    "resources": {
        "thalassa:index/blockVolume:BlockVolume": {
            "description": "Provides a Thalassa Cloud Block Volume resource. This can be used to create, manage, and attach a detachable storage device to a virtual machine instance.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a block volume with Thalassa default values\nconst example = new thalassa.BlockVolume(\"example\", {\n    name: \"example-block-volume\",\n    description: \"Example block volume for documentation\",\n    region: \"nl-01\",\n    volumeType: \"Block\",\n    sizeGb: 20,\n});\nexport const blockVolumeId = example.id;\nexport const blockVolumeName = example.name;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a block volume with Thalassa default values\nexample = thalassa.BlockVolume(\"example\",\n    name=\"example-block-volume\",\n    description=\"Example block volume for documentation\",\n    region=\"nl-01\",\n    volume_type=\"Block\",\n    size_gb=20)\npulumi.export(\"blockVolumeId\", example.id)\npulumi.export(\"blockVolumeName\", example.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a block volume with Thalassa default values\n    var example = new Thalassa.BlockVolume(\"example\", new()\n    {\n        Name = \"example-block-volume\",\n        Description = \"Example block volume for documentation\",\n        Region = \"nl-01\",\n        VolumeType = \"Block\",\n        SizeGb = 20,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"blockVolumeId\"] = example.Id,\n        [\"blockVolumeName\"] = example.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a block volume with Thalassa default values\n\t\texample, err := thalassa.NewBlockVolume(ctx, \"example\", \u0026thalassa.BlockVolumeArgs{\n\t\t\tName:        pulumi.String(\"example-block-volume\"),\n\t\t\tDescription: pulumi.String(\"Example block volume for documentation\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tVolumeType:  pulumi.String(\"Block\"),\n\t\t\tSizeGb:      pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"blockVolumeId\", example.ID())\n\t\tctx.Export(\"blockVolumeName\", example.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.BlockVolume;\nimport com.pulumi.thalassa.BlockVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a block volume with Thalassa default values\n        var example = new BlockVolume(\"example\", BlockVolumeArgs.builder()\n            .name(\"example-block-volume\")\n            .description(\"Example block volume for documentation\")\n            .region(\"nl-01\")\n            .volumeType(\"Block\")\n            .sizeGb(20)\n            .build());\n\n        ctx.export(\"blockVolumeId\", example.id());\n        ctx.export(\"blockVolumeName\", example.name());\n    }\n}\n```\n```yaml\nresources:\n  # Create a block volume with Thalassa default values\n  example:\n    type: thalassa:BlockVolume\n    properties:\n      name: example-block-volume\n      description: Example block volume for documentation\n      region: nl-01\n      volumeType: Block\n      sizeGb: 20\noutputs:\n  # Output the block volume details\n  blockVolumeId: ${example.id}\n  blockVolumeName: ${example.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Block Volume\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection of the Block Volume\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the Block Volume\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Block Volume\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Block Volume\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the Block Volume.\n"
                },
                "sizeGb": {
                    "type": "integer",
                    "description": "Size of the Block Volume in GB\n"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Block Volume\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Volume type of the Block Volume\n"
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Wait until the Block Volume is ready\n"
                }
            },
            "required": [
                "name",
                "sizeGb",
                "slug",
                "status",
                "volumeType"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Block Volume\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection of the Block Volume\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the Block Volume\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Block Volume\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Block Volume\n"
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region of the Block Volume.\n",
                    "willReplaceOnChanges": true
                },
                "sizeGb": {
                    "type": "integer",
                    "description": "Size of the Block Volume in GB\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Volume type of the Block Volume\n",
                    "willReplaceOnChanges": true
                },
                "waitUntilReady": {
                    "type": "boolean",
                    "description": "Wait until the Block Volume is ready\n"
                }
            },
            "requiredInputs": [
                "sizeGb",
                "volumeType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BlockVolume resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Block Volume\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Delete protection of the Block Volume\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the Block Volume\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Block Volume\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Block Volume\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the Block Volume.\n",
                        "willReplaceOnChanges": true
                    },
                    "sizeGb": {
                        "type": "integer",
                        "description": "Size of the Block Volume in GB\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Block Volume\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "Volume type of the Block Volume\n",
                        "willReplaceOnChanges": true
                    },
                    "waitUntilReady": {
                        "type": "boolean",
                        "description": "Wait until the Block Volume is ready\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/blockVolumeAttachment:BlockVolumeAttachment": {
            "description": "Attach a block volume to a virtual machine. Volume must not be attached to another virtual machine.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the resources\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for block volume attachment\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the resources\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for block volume attachment\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a block volume\nconst exampleBlockVolume = new thalassa.BlockVolume(\"example\", {\n    name: \"example-block-volume\",\n    description: \"Example block volume for attachment\",\n    region: \"nl-01\",\n    volumeType: \"Block\",\n    sizeGb: 50,\n});\n// Create a virtual machine instance\nconst exampleVirtualMachineInstance = new thalassa.VirtualMachineInstance(\"example\", {\n    name: \"example-instance\",\n    subnetId: exampleSubnet.id,\n    machineType: \"pgp-small\",\n    machineImage: \"ubuntu-22.04\",\n    availabilityZone: \"nl-01a\",\n    rootVolumeSizeGb: 20,\n    rootVolumeType: \"Block\",\n});\n// Create a block volume attachment with Thalassa default values\nconst exampleBlockVolumeAttachment = new thalassa.BlockVolumeAttachment(\"example\", {\n    volumeId: exampleBlockVolume.id,\n    vmiId: exampleVirtualMachineInstance.id,\n});\nexport const attachmentId = exampleBlockVolumeAttachment.id;\nexport const deviceSerial = exampleBlockVolumeAttachment.serial;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the resources\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for block volume attachment\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the resources\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for block volume attachment\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a block volume\nexample_block_volume = thalassa.BlockVolume(\"example\",\n    name=\"example-block-volume\",\n    description=\"Example block volume for attachment\",\n    region=\"nl-01\",\n    volume_type=\"Block\",\n    size_gb=50)\n# Create a virtual machine instance\nexample_virtual_machine_instance = thalassa.VirtualMachineInstance(\"example\",\n    name=\"example-instance\",\n    subnet_id=example_subnet.id,\n    machine_type=\"pgp-small\",\n    machine_image=\"ubuntu-22.04\",\n    availability_zone=\"nl-01a\",\n    root_volume_size_gb=20,\n    root_volume_type=\"Block\")\n# Create a block volume attachment with Thalassa default values\nexample_block_volume_attachment = thalassa.BlockVolumeAttachment(\"example\",\n    volume_id=example_block_volume.id,\n    vmi_id=example_virtual_machine_instance.id)\npulumi.export(\"attachmentId\", example_block_volume_attachment.id)\npulumi.export(\"deviceSerial\", example_block_volume_attachment.serial)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the resources\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for block volume attachment\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the resources\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for block volume attachment\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a block volume\n    var exampleBlockVolume = new Thalassa.BlockVolume(\"example\", new()\n    {\n        Name = \"example-block-volume\",\n        Description = \"Example block volume for attachment\",\n        Region = \"nl-01\",\n        VolumeType = \"Block\",\n        SizeGb = 50,\n    });\n\n    // Create a virtual machine instance\n    var exampleVirtualMachineInstance = new Thalassa.VirtualMachineInstance(\"example\", new()\n    {\n        Name = \"example-instance\",\n        SubnetId = exampleSubnet.Id,\n        MachineType = \"pgp-small\",\n        MachineImage = \"ubuntu-22.04\",\n        AvailabilityZone = \"nl-01a\",\n        RootVolumeSizeGb = 20,\n        RootVolumeType = \"Block\",\n    });\n\n    // Create a block volume attachment with Thalassa default values\n    var exampleBlockVolumeAttachment = new Thalassa.BlockVolumeAttachment(\"example\", new()\n    {\n        VolumeId = exampleBlockVolume.Id,\n        VmiId = exampleVirtualMachineInstance.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"attachmentId\"] = exampleBlockVolumeAttachment.Id,\n        [\"deviceSerial\"] = exampleBlockVolumeAttachment.Serial,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the resources\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for block volume attachment\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the resources\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for block volume attachment\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a block volume\n\t\texampleBlockVolume, err := thalassa.NewBlockVolume(ctx, \"example\", \u0026thalassa.BlockVolumeArgs{\n\t\t\tName:        pulumi.String(\"example-block-volume\"),\n\t\t\tDescription: pulumi.String(\"Example block volume for attachment\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tVolumeType:  pulumi.String(\"Block\"),\n\t\t\tSizeGb:      pulumi.Int(50),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a virtual machine instance\n\t\texampleVirtualMachineInstance, err := thalassa.NewVirtualMachineInstance(ctx, \"example\", \u0026thalassa.VirtualMachineInstanceArgs{\n\t\t\tName:             pulumi.String(\"example-instance\"),\n\t\t\tSubnetId:         exampleSubnet.ID(),\n\t\t\tMachineType:      pulumi.String(\"pgp-small\"),\n\t\t\tMachineImage:     pulumi.String(\"ubuntu-22.04\"),\n\t\t\tAvailabilityZone: pulumi.String(\"nl-01a\"),\n\t\t\tRootVolumeSizeGb: pulumi.Int(20),\n\t\t\tRootVolumeType:   pulumi.String(\"Block\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a block volume attachment with Thalassa default values\n\t\texampleBlockVolumeAttachment, err := thalassa.NewBlockVolumeAttachment(ctx, \"example\", \u0026thalassa.BlockVolumeAttachmentArgs{\n\t\t\tVolumeId: exampleBlockVolume.ID(),\n\t\t\tVmiId:    exampleVirtualMachineInstance.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"attachmentId\", exampleBlockVolumeAttachment.ID())\n\t\tctx.Export(\"deviceSerial\", exampleBlockVolumeAttachment.Serial)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.BlockVolume;\nimport com.pulumi.thalassa.BlockVolumeArgs;\nimport com.pulumi.thalassa.VirtualMachineInstance;\nimport com.pulumi.thalassa.VirtualMachineInstanceArgs;\nimport com.pulumi.thalassa.BlockVolumeAttachment;\nimport com.pulumi.thalassa.BlockVolumeAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the resources\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for block volume attachment\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the resources\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for block volume attachment\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a block volume\n        var exampleBlockVolume = new BlockVolume(\"exampleBlockVolume\", BlockVolumeArgs.builder()\n            .name(\"example-block-volume\")\n            .description(\"Example block volume for attachment\")\n            .region(\"nl-01\")\n            .volumeType(\"Block\")\n            .sizeGb(50)\n            .build());\n\n        // Create a virtual machine instance\n        var exampleVirtualMachineInstance = new VirtualMachineInstance(\"exampleVirtualMachineInstance\", VirtualMachineInstanceArgs.builder()\n            .name(\"example-instance\")\n            .subnetId(exampleSubnet.id())\n            .machineType(\"pgp-small\")\n            .machineImage(\"ubuntu-22.04\")\n            .availabilityZone(\"nl-01a\")\n            .rootVolumeSizeGb(20)\n            .rootVolumeType(\"Block\")\n            .build());\n\n        // Create a block volume attachment with Thalassa default values\n        var exampleBlockVolumeAttachment = new BlockVolumeAttachment(\"exampleBlockVolumeAttachment\", BlockVolumeAttachmentArgs.builder()\n            .volumeId(exampleBlockVolume.id())\n            .vmiId(exampleVirtualMachineInstance.id())\n            .build());\n\n        ctx.export(\"attachmentId\", exampleBlockVolumeAttachment.id());\n        ctx.export(\"deviceSerial\", exampleBlockVolumeAttachment.serial());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the resources\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for block volume attachment\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the resources\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for block volume attachment\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a block volume\n  exampleBlockVolume:\n    type: thalassa:BlockVolume\n    name: example\n    properties:\n      name: example-block-volume\n      description: Example block volume for attachment\n      region: nl-01\n      volumeType: Block\n      sizeGb: 50\n  # Create a virtual machine instance\n  exampleVirtualMachineInstance:\n    type: thalassa:VirtualMachineInstance\n    name: example\n    properties:\n      name: example-instance\n      subnetId: ${exampleSubnet.id}\n      machineType: pgp-small\n      machineImage: ubuntu-22.04\n      availabilityZone: nl-01a\n      rootVolumeSizeGb: 20\n      rootVolumeType: Block\n  # Create a block volume attachment with Thalassa default values\n  exampleBlockVolumeAttachment:\n    type: thalassa:BlockVolumeAttachment\n    name: example\n    properties:\n      volumeId: ${exampleBlockVolume.id}\n      vmiId: ${exampleVirtualMachineInstance.id}\noutputs:\n  # Output the attachment details\n  attachmentId: ${exampleBlockVolumeAttachment.id}\n  deviceSerial: ${exampleBlockVolumeAttachment.serial}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "organisationId": {
                    "type": "string"
                },
                "serial": {
                    "type": "string",
                    "description": "The device name to use for the volume attachment (e.g., /dev/sdb)\n"
                },
                "vmiId": {
                    "type": "string",
                    "description": "The ID of the virtual machine to attach the volume to\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to attach\n"
                },
                "waitForAttached": {
                    "type": "boolean",
                    "description": "Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.\n"
                },
                "waitForAttachedTimeout": {
                    "type": "integer",
                    "description": "The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.\n"
                },
                "waitForDetached": {
                    "type": "boolean",
                    "description": "Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.\n"
                },
                "waitForDetachedTimeout": {
                    "type": "integer",
                    "description": "The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.\n"
                }
            },
            "required": [
                "serial",
                "vmiId",
                "volumeId"
            ],
            "inputProperties": {
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "vmiId": {
                    "type": "string",
                    "description": "The ID of the virtual machine to attach the volume to\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of the volume to attach\n",
                    "willReplaceOnChanges": true
                },
                "waitForAttached": {
                    "type": "boolean",
                    "description": "Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.\n"
                },
                "waitForAttachedTimeout": {
                    "type": "integer",
                    "description": "The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.\n"
                },
                "waitForDetached": {
                    "type": "boolean",
                    "description": "Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.\n"
                },
                "waitForDetachedTimeout": {
                    "type": "integer",
                    "description": "The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.\n"
                }
            },
            "requiredInputs": [
                "vmiId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BlockVolumeAttachment resources.\n",
                "properties": {
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "serial": {
                        "type": "string",
                        "description": "The device name to use for the volume attachment (e.g., /dev/sdb)\n"
                    },
                    "vmiId": {
                        "type": "string",
                        "description": "The ID of the virtual machine to attach the volume to\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The ID of the volume to attach\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForAttached": {
                        "type": "boolean",
                        "description": "Wait for the volume to be attached to the virtual machine. If false, the volume will be attached and the resource will be marked as created, but the volume may not be attached to the virtual machine yet.\n"
                    },
                    "waitForAttachedTimeout": {
                        "type": "integer",
                        "description": "The timeout in minutes to wait for the volume to be attached to the virtual machine. Only used if wait*for*attached is true. If not provided, the default timeout of 5 minutes will be used.\n"
                    },
                    "waitForDetached": {
                        "type": "boolean",
                        "description": "Wait for the volume to be detached from the virtual machine. If false, the volume will be detached and the resource will be marked as deleted, but the volume may not be detached from the virtual machine yet.\n"
                    },
                    "waitForDetachedTimeout": {
                        "type": "integer",
                        "description": "The timeout in minutes to wait for the volume to be detached from the virtual machine. Only used if wait*for*detached is true. If not provided, the default timeout of 5 minutes will be used.\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/cloudInitTemplate:CloudInitTemplate": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a cloud init template with Thalassa default values\nconst example = new thalassa.CloudInitTemplate(\"example\", {\n    name: \"example-cloud-init-template\",\n    content: `#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl`,\n});\nexport const cloudInitTemplateId = example.id;\nexport const cloudInitTemplateName = example.name;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a cloud init template with Thalassa default values\nexample = thalassa.CloudInitTemplate(\"example\",\n    name=\"example-cloud-init-template\",\n    content=\"\"\"#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl\"\"\")\npulumi.export(\"cloudInitTemplateId\", example.id)\npulumi.export(\"cloudInitTemplateName\", example.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a cloud init template with Thalassa default values\n    var example = new Thalassa.CloudInitTemplate(\"example\", new()\n    {\n        Name = \"example-cloud-init-template\",\n        Content = @\"#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"cloudInitTemplateId\"] = example.Id,\n        [\"cloudInitTemplateName\"] = example.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a cloud init template with Thalassa default values\n\t\texample, err := thalassa.NewCloudInitTemplate(ctx, \"example\", \u0026thalassa.CloudInitTemplateArgs{\n\t\t\tName: pulumi.String(\"example-cloud-init-template\"),\n\t\t\tContent: pulumi.String(`#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"cloudInitTemplateId\", example.ID())\n\t\tctx.Export(\"cloudInitTemplateName\", example.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.CloudInitTemplate;\nimport com.pulumi.thalassa.CloudInitTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a cloud init template with Thalassa default values\n        var example = new CloudInitTemplate(\"example\", CloudInitTemplateArgs.builder()\n            .name(\"example-cloud-init-template\")\n            .content(\"\"\"\n#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl            \"\"\")\n            .build());\n\n        ctx.export(\"cloudInitTemplateId\", example.id());\n        ctx.export(\"cloudInitTemplateName\", example.name());\n    }\n}\n```\n```yaml\nresources:\n  # Create a cloud init template with Thalassa default values\n  example:\n    type: thalassa:CloudInitTemplate\n    properties:\n      name: example-cloud-init-template\n      content: |-\n        #cloud-config\n        package_update: true\n        package_upgrade: true\n        packages:\n          - nginx\n          - curl\noutputs:\n  # Output the cloud init template details\n  cloudInitTemplateId: ${example.id}\n  cloudInitTemplateName: ${example.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to add to the cloud init template\n"
                },
                "content": {
                    "type": "string",
                    "description": "The content of the cloud init template\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to add to the cloud init template\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud init template\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the cloud init template\n"
                }
            },
            "required": [
                "content",
                "name",
                "slug"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to add to the cloud init template\n",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string",
                    "description": "The content of the cloud init template\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to add to the cloud init template\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud init template\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "content"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudInitTemplate resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations to add to the cloud init template\n",
                        "willReplaceOnChanges": true
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the cloud init template\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to add to the cloud init template\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud init template\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the cloud init template\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/dbaasDbBackupschedule:DbaasDbBackupschedule": {
            "description": "Create a database backup schedule\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the database cluster\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for database cluster\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the database cluster\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for database cluster\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a database cluster for the backup schedule\nconst exampleDbaasDbCluster = new thalassa.DbaasDbCluster(\"example\", {\n    name: \"example-db-cluster\",\n    description: \"Example database cluster for backup schedule\",\n    subnetId: exampleSubnet.id,\n    databaseInstanceType: \"db-pgp-small\",\n    engine: \"postgres\",\n    engineVersion: \"15.13\",\n    allocatedStorage: 100,\n    volumeTypeClass: \"block\",\n});\n// Create a database backup schedule with Thalassa default values\nconst exampleDbaasDbBackupschedule = new thalassa.DbaasDbBackupschedule(\"example\", {\n    dbClusterId: exampleDbaasDbCluster.id,\n    name: \"example-backup-schedule\",\n    schedule: \"0 2 * * *\",\n    retentionPolicy: \"7d\",\n});\nexport const backupScheduleId = exampleDbaasDbBackupschedule.id;\nexport const backupScheduleName = exampleDbaasDbBackupschedule.name;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the database cluster\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for database cluster\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the database cluster\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for database cluster\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a database cluster for the backup schedule\nexample_dbaas_db_cluster = thalassa.DbaasDbCluster(\"example\",\n    name=\"example-db-cluster\",\n    description=\"Example database cluster for backup schedule\",\n    subnet_id=example_subnet.id,\n    database_instance_type=\"db-pgp-small\",\n    engine=\"postgres\",\n    engine_version=\"15.13\",\n    allocated_storage=100,\n    volume_type_class=\"block\")\n# Create a database backup schedule with Thalassa default values\nexample_dbaas_db_backupschedule = thalassa.DbaasDbBackupschedule(\"example\",\n    db_cluster_id=example_dbaas_db_cluster.id,\n    name=\"example-backup-schedule\",\n    schedule=\"0 2 * * *\",\n    retention_policy=\"7d\")\npulumi.export(\"backupScheduleId\", example_dbaas_db_backupschedule.id)\npulumi.export(\"backupScheduleName\", example_dbaas_db_backupschedule.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the database cluster\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for database cluster\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the database cluster\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for database cluster\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a database cluster for the backup schedule\n    var exampleDbaasDbCluster = new Thalassa.DbaasDbCluster(\"example\", new()\n    {\n        Name = \"example-db-cluster\",\n        Description = \"Example database cluster for backup schedule\",\n        SubnetId = exampleSubnet.Id,\n        DatabaseInstanceType = \"db-pgp-small\",\n        Engine = \"postgres\",\n        EngineVersion = \"15.13\",\n        AllocatedStorage = 100,\n        VolumeTypeClass = \"block\",\n    });\n\n    // Create a database backup schedule with Thalassa default values\n    var exampleDbaasDbBackupschedule = new Thalassa.DbaasDbBackupschedule(\"example\", new()\n    {\n        DbClusterId = exampleDbaasDbCluster.Id,\n        Name = \"example-backup-schedule\",\n        Schedule = \"0 2 * * *\",\n        RetentionPolicy = \"7d\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"backupScheduleId\"] = exampleDbaasDbBackupschedule.Id,\n        [\"backupScheduleName\"] = exampleDbaasDbBackupschedule.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the database cluster\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for database cluster\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the database cluster\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for database cluster\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a database cluster for the backup schedule\n\t\texampleDbaasDbCluster, err := thalassa.NewDbaasDbCluster(ctx, \"example\", \u0026thalassa.DbaasDbClusterArgs{\n\t\t\tName:                 pulumi.String(\"example-db-cluster\"),\n\t\t\tDescription:          pulumi.String(\"Example database cluster for backup schedule\"),\n\t\t\tSubnetId:             exampleSubnet.ID(),\n\t\t\tDatabaseInstanceType: pulumi.String(\"db-pgp-small\"),\n\t\t\tEngine:               pulumi.String(\"postgres\"),\n\t\t\tEngineVersion:        pulumi.String(\"15.13\"),\n\t\t\tAllocatedStorage:     pulumi.Int(100),\n\t\t\tVolumeTypeClass:      pulumi.String(\"block\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a database backup schedule with Thalassa default values\n\t\texampleDbaasDbBackupschedule, err := thalassa.NewDbaasDbBackupschedule(ctx, \"example\", \u0026thalassa.DbaasDbBackupscheduleArgs{\n\t\t\tDbClusterId:     exampleDbaasDbCluster.ID(),\n\t\t\tName:            pulumi.String(\"example-backup-schedule\"),\n\t\t\tSchedule:        pulumi.String(\"0 2 * * *\"),\n\t\t\tRetentionPolicy: pulumi.String(\"7d\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"backupScheduleId\", exampleDbaasDbBackupschedule.ID())\n\t\tctx.Export(\"backupScheduleName\", exampleDbaasDbBackupschedule.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.DbaasDbCluster;\nimport com.pulumi.thalassa.DbaasDbClusterArgs;\nimport com.pulumi.thalassa.DbaasDbBackupschedule;\nimport com.pulumi.thalassa.DbaasDbBackupscheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the database cluster\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for database cluster\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the database cluster\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for database cluster\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a database cluster for the backup schedule\n        var exampleDbaasDbCluster = new DbaasDbCluster(\"exampleDbaasDbCluster\", DbaasDbClusterArgs.builder()\n            .name(\"example-db-cluster\")\n            .description(\"Example database cluster for backup schedule\")\n            .subnetId(exampleSubnet.id())\n            .databaseInstanceType(\"db-pgp-small\")\n            .engine(\"postgres\")\n            .engineVersion(\"15.13\")\n            .allocatedStorage(100)\n            .volumeTypeClass(\"block\")\n            .build());\n\n        // Create a database backup schedule with Thalassa default values\n        var exampleDbaasDbBackupschedule = new DbaasDbBackupschedule(\"exampleDbaasDbBackupschedule\", DbaasDbBackupscheduleArgs.builder()\n            .dbClusterId(exampleDbaasDbCluster.id())\n            .name(\"example-backup-schedule\")\n            .schedule(\"0 2 * * *\")\n            .retentionPolicy(\"7d\")\n            .build());\n\n        ctx.export(\"backupScheduleId\", exampleDbaasDbBackupschedule.id());\n        ctx.export(\"backupScheduleName\", exampleDbaasDbBackupschedule.name());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the database cluster\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for database cluster\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the database cluster\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for database cluster\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a database cluster for the backup schedule\n  exampleDbaasDbCluster:\n    type: thalassa:DbaasDbCluster\n    name: example\n    properties:\n      name: example-db-cluster\n      description: Example database cluster for backup schedule\n      subnetId: ${exampleSubnet.id}\n      databaseInstanceType: db-pgp-small\n      engine: postgres\n      engineVersion: '15.13'\n      allocatedStorage: 100\n      volumeTypeClass: block\n  # Create a database backup schedule with Thalassa default values\n  exampleDbaasDbBackupschedule:\n    type: thalassa:DbaasDbBackupschedule\n    name: example\n    properties:\n      dbClusterId: ${exampleDbaasDbCluster.id}\n      name: example-backup-schedule\n      schedule: 0 2 * * *\n      retentionPolicy: 7d\noutputs:\n  # Output the backup schedule details\n  backupScheduleId: ${exampleDbaasDbBackupschedule.id}\n  backupScheduleName: ${exampleDbaasDbBackupschedule.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "backupTarget": {
                    "type": "string",
                    "description": "The backup target of the database backup schedule (primary, prefer-standby)\n"
                },
                "dbClusterId": {
                    "type": "string",
                    "description": "The ID of the database cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database backup schedule\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "retentionPolicy": {
                    "type": "string",
                    "description": "The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The cron schedule of the database backup schedule (0 0 * * *)\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "Whether the database backup schedule is suspended\n"
                }
            },
            "required": [
                "dbClusterId",
                "name"
            ],
            "inputProperties": {
                "backupTarget": {
                    "type": "string",
                    "description": "The backup target of the database backup schedule (primary, prefer-standby)\n"
                },
                "dbClusterId": {
                    "type": "string",
                    "description": "The ID of the database cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database backup schedule\n"
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "retentionPolicy": {
                    "type": "string",
                    "description": "The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The cron schedule of the database backup schedule (0 0 * * *)\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "Whether the database backup schedule is suspended\n"
                }
            },
            "requiredInputs": [
                "dbClusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DbaasDbBackupschedule resources.\n",
                "properties": {
                    "backupTarget": {
                        "type": "string",
                        "description": "The backup target of the database backup schedule (primary, prefer-standby)\n"
                    },
                    "dbClusterId": {
                        "type": "string",
                        "description": "The ID of the database cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database backup schedule\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "retentionPolicy": {
                        "type": "string",
                        "description": "The retention policy of the database backup schedule (7d, 14d, 30d, 90d, 180d, 365d, 730d)\n"
                    },
                    "schedule": {
                        "type": "string",
                        "description": "The cron schedule of the database backup schedule (0 0 * * *)\n"
                    },
                    "suspended": {
                        "type": "boolean",
                        "description": "Whether the database backup schedule is suspended\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/dbaasDbCluster:DbaasDbCluster": {
            "description": "Create an DB Cluster\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  # Create a VPC for the database cluster\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for database cluster\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the database cluster\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for database cluster\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a security group for the DB cluster\n  exampleSecurityGroup:\n    type: thalassa:SecurityGroup\n    name: example\n    properties:\n      name: example-db-security-group\n      description: Example security group for DB cluster\n      vpcIdentity: ${example.id}\n  # Create a database cluster with Thalassa default values\n  exampleDbaasDbCluster:\n    type: thalassa:DbaasDbCluster\n    name: example\n    properties:\n      name: example-db-cluster\n      description: Example database cluster for documentation\n      subnetId: ${exampleSubnet.id}\n      databaseInstanceType: db-pgp-small\n      engine: postgres\n      engineVersion: '15.13'\n      allocatedStorage: 100\n      volumeTypeClass: block\noutputs:\n  # Output the database cluster details\n  dbClusterId: ${exampleDbaasDbCluster.id}\n  dbClusterName: ${exampleDbaasDbCluster.name}\n  dbClusterEndpoint: ${exampleDbaasDbCluster.endpointIpv4}\n  dbClusterPort: ${exampleDbaasDbCluster.port}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allocatedStorage": {
                    "type": "integer",
                    "description": "Amount of storage allocated to the cluster in GB\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the DB Cluster\n"
                },
                "autoMinorVersionUpgrade": {
                    "type": "boolean",
                    "description": "Flag indicating if the cluster should automatically upgrade to the latest minor version\n"
                },
                "databaseInstanceType": {
                    "type": "string",
                    "description": "Database instance type of the DB Cluster\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Flag indicating if the cluster should be protected from deletion\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the DB Cluster\n"
                },
                "endpointIpv4": {
                    "type": "string",
                    "description": "IPv4 address of the cluster endpoint\n"
                },
                "endpointIpv6": {
                    "type": "string",
                    "description": "IPv6 address of the cluster endpoint\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database engine of the cluster\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "Version of the database engine\n"
                },
                "initDb": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of init db parameters\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the DB Cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the DB Cluster\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of parameter name to database engine specific parameter value\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the cluster endpoint\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "Number of instances in the cluster\n"
                },
                "restoreFromBackupIdentity": {
                    "type": "string",
                    "description": "Identity of the backup to restore from\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups associated with the cluster\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the DB Cluster\n"
                },
                "volumeTypeClass": {
                    "type": "string",
                    "description": "Storage type used to determine the size of the cluster storage\n"
                }
            },
            "required": [
                "allocatedStorage",
                "databaseInstanceType",
                "endpointIpv4",
                "endpointIpv6",
                "engine",
                "engineVersion",
                "name",
                "port",
                "status",
                "subnetId",
                "volumeTypeClass"
            ],
            "inputProperties": {
                "allocatedStorage": {
                    "type": "integer",
                    "description": "Amount of storage allocated to the cluster in GB\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the DB Cluster\n"
                },
                "autoMinorVersionUpgrade": {
                    "type": "boolean",
                    "description": "Flag indicating if the cluster should automatically upgrade to the latest minor version\n"
                },
                "databaseInstanceType": {
                    "type": "string",
                    "description": "Database instance type of the DB Cluster\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Flag indicating if the cluster should be protected from deletion\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the DB Cluster\n"
                },
                "engine": {
                    "type": "string",
                    "description": "Database engine of the cluster\n"
                },
                "engineVersion": {
                    "type": "string",
                    "description": "Version of the database engine\n"
                },
                "initDb": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of init db parameters\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the DB Cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the DB Cluster\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of parameter name to database engine specific parameter value\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "Number of instances in the cluster\n"
                },
                "restoreFromBackupIdentity": {
                    "type": "string",
                    "description": "Identity of the backup to restore from\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups associated with the cluster\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the DB Cluster\n"
                },
                "volumeTypeClass": {
                    "type": "string",
                    "description": "Storage type used to determine the size of the cluster storage\n"
                }
            },
            "requiredInputs": [
                "allocatedStorage",
                "databaseInstanceType",
                "engine",
                "engineVersion",
                "subnetId",
                "volumeTypeClass"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DbaasDbCluster resources.\n",
                "properties": {
                    "allocatedStorage": {
                        "type": "integer",
                        "description": "Amount of storage allocated to the cluster in GB\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the DB Cluster\n"
                    },
                    "autoMinorVersionUpgrade": {
                        "type": "boolean",
                        "description": "Flag indicating if the cluster should automatically upgrade to the latest minor version\n"
                    },
                    "databaseInstanceType": {
                        "type": "string",
                        "description": "Database instance type of the DB Cluster\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Flag indicating if the cluster should be protected from deletion\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the DB Cluster\n"
                    },
                    "endpointIpv4": {
                        "type": "string",
                        "description": "IPv4 address of the cluster endpoint\n"
                    },
                    "endpointIpv6": {
                        "type": "string",
                        "description": "IPv6 address of the cluster endpoint\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "Database engine of the cluster\n"
                    },
                    "engineVersion": {
                        "type": "string",
                        "description": "Version of the database engine\n"
                    },
                    "initDb": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of init db parameters\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the DB Cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the DB Cluster\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of parameter name to database engine specific parameter value\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port of the cluster endpoint\n"
                    },
                    "replicas": {
                        "type": "integer",
                        "description": "Number of instances in the cluster\n"
                    },
                    "restoreFromBackupIdentity": {
                        "type": "string",
                        "description": "Identity of the backup to restore from\n"
                    },
                    "securityGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of security groups associated with the cluster\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet of the DB Cluster\n"
                    },
                    "volumeTypeClass": {
                        "type": "string",
                        "description": "Storage type used to determine the size of the cluster storage\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/dbaasPgDatabase:DbaasPgDatabase": {
            "description": "Create a PostgreSQL database\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the database cluster\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for database cluster\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the database cluster\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for database cluster\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a database cluster for the PostgreSQL database\nconst exampleDbaasDbCluster = new thalassa.DbaasDbCluster(\"example\", {\n    name: \"example-db-cluster\",\n    description: \"Example database cluster for PostgreSQL database\",\n    subnetId: exampleSubnet.id,\n    databaseInstanceType: \"db-pgp-small\",\n    engine: \"postgres\",\n    engineVersion: \"15.13\",\n    allocatedStorage: 100,\n    volumeTypeClass: \"block\",\n});\n// Create PostgreSQL roles first\nconst exampleDbaasPgRoles = new thalassa.DbaasPgRoles(\"example\", {\n    dbClusterId: exampleDbaasDbCluster.id,\n    name: \"myrole\",\n    password: \"secure_password_123\",\n});\n// Create a PostgreSQL database with Thalassa default values\nconst exampleDbaasPgDatabase = new thalassa.DbaasPgDatabase(\"example\", {\n    name: \"mydatabase2\",\n    dbClusterId: exampleDbaasDbCluster.id,\n    ownerRoleId: exampleDbaasPgRoles.id,\n});\nexport const pgDatabaseId = exampleDbaasPgDatabase.id;\nexport const pgDatabaseName = exampleDbaasPgDatabase.name;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the database cluster\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for database cluster\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the database cluster\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for database cluster\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a database cluster for the PostgreSQL database\nexample_dbaas_db_cluster = thalassa.DbaasDbCluster(\"example\",\n    name=\"example-db-cluster\",\n    description=\"Example database cluster for PostgreSQL database\",\n    subnet_id=example_subnet.id,\n    database_instance_type=\"db-pgp-small\",\n    engine=\"postgres\",\n    engine_version=\"15.13\",\n    allocated_storage=100,\n    volume_type_class=\"block\")\n# Create PostgreSQL roles first\nexample_dbaas_pg_roles = thalassa.DbaasPgRoles(\"example\",\n    db_cluster_id=example_dbaas_db_cluster.id,\n    name=\"myrole\",\n    password=\"secure_password_123\")\n# Create a PostgreSQL database with Thalassa default values\nexample_dbaas_pg_database = thalassa.DbaasPgDatabase(\"example\",\n    name=\"mydatabase2\",\n    db_cluster_id=example_dbaas_db_cluster.id,\n    owner_role_id=example_dbaas_pg_roles.id)\npulumi.export(\"pgDatabaseId\", example_dbaas_pg_database.id)\npulumi.export(\"pgDatabaseName\", example_dbaas_pg_database.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the database cluster\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for database cluster\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the database cluster\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for database cluster\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a database cluster for the PostgreSQL database\n    var exampleDbaasDbCluster = new Thalassa.DbaasDbCluster(\"example\", new()\n    {\n        Name = \"example-db-cluster\",\n        Description = \"Example database cluster for PostgreSQL database\",\n        SubnetId = exampleSubnet.Id,\n        DatabaseInstanceType = \"db-pgp-small\",\n        Engine = \"postgres\",\n        EngineVersion = \"15.13\",\n        AllocatedStorage = 100,\n        VolumeTypeClass = \"block\",\n    });\n\n    // Create PostgreSQL roles first\n    var exampleDbaasPgRoles = new Thalassa.DbaasPgRoles(\"example\", new()\n    {\n        DbClusterId = exampleDbaasDbCluster.Id,\n        Name = \"myrole\",\n        Password = \"secure_password_123\",\n    });\n\n    // Create a PostgreSQL database with Thalassa default values\n    var exampleDbaasPgDatabase = new Thalassa.DbaasPgDatabase(\"example\", new()\n    {\n        Name = \"mydatabase2\",\n        DbClusterId = exampleDbaasDbCluster.Id,\n        OwnerRoleId = exampleDbaasPgRoles.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"pgDatabaseId\"] = exampleDbaasPgDatabase.Id,\n        [\"pgDatabaseName\"] = exampleDbaasPgDatabase.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the database cluster\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for database cluster\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the database cluster\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for database cluster\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a database cluster for the PostgreSQL database\n\t\texampleDbaasDbCluster, err := thalassa.NewDbaasDbCluster(ctx, \"example\", \u0026thalassa.DbaasDbClusterArgs{\n\t\t\tName:                 pulumi.String(\"example-db-cluster\"),\n\t\t\tDescription:          pulumi.String(\"Example database cluster for PostgreSQL database\"),\n\t\t\tSubnetId:             exampleSubnet.ID(),\n\t\t\tDatabaseInstanceType: pulumi.String(\"db-pgp-small\"),\n\t\t\tEngine:               pulumi.String(\"postgres\"),\n\t\t\tEngineVersion:        pulumi.String(\"15.13\"),\n\t\t\tAllocatedStorage:     pulumi.Int(100),\n\t\t\tVolumeTypeClass:      pulumi.String(\"block\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create PostgreSQL roles first\n\t\texampleDbaasPgRoles, err := thalassa.NewDbaasPgRoles(ctx, \"example\", \u0026thalassa.DbaasPgRolesArgs{\n\t\t\tDbClusterId: exampleDbaasDbCluster.ID(),\n\t\t\tName:        pulumi.String(\"myrole\"),\n\t\t\tPassword:    pulumi.String(\"secure_password_123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a PostgreSQL database with Thalassa default values\n\t\texampleDbaasPgDatabase, err := thalassa.NewDbaasPgDatabase(ctx, \"example\", \u0026thalassa.DbaasPgDatabaseArgs{\n\t\t\tName:        pulumi.String(\"mydatabase2\"),\n\t\t\tDbClusterId: exampleDbaasDbCluster.ID(),\n\t\t\tOwnerRoleId: exampleDbaasPgRoles.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"pgDatabaseId\", exampleDbaasPgDatabase.ID())\n\t\tctx.Export(\"pgDatabaseName\", exampleDbaasPgDatabase.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.DbaasDbCluster;\nimport com.pulumi.thalassa.DbaasDbClusterArgs;\nimport com.pulumi.thalassa.DbaasPgRoles;\nimport com.pulumi.thalassa.DbaasPgRolesArgs;\nimport com.pulumi.thalassa.DbaasPgDatabase;\nimport com.pulumi.thalassa.DbaasPgDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the database cluster\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for database cluster\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the database cluster\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for database cluster\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a database cluster for the PostgreSQL database\n        var exampleDbaasDbCluster = new DbaasDbCluster(\"exampleDbaasDbCluster\", DbaasDbClusterArgs.builder()\n            .name(\"example-db-cluster\")\n            .description(\"Example database cluster for PostgreSQL database\")\n            .subnetId(exampleSubnet.id())\n            .databaseInstanceType(\"db-pgp-small\")\n            .engine(\"postgres\")\n            .engineVersion(\"15.13\")\n            .allocatedStorage(100)\n            .volumeTypeClass(\"block\")\n            .build());\n\n        // Create PostgreSQL roles first\n        var exampleDbaasPgRoles = new DbaasPgRoles(\"exampleDbaasPgRoles\", DbaasPgRolesArgs.builder()\n            .dbClusterId(exampleDbaasDbCluster.id())\n            .name(\"myrole\")\n            .password(\"secure_password_123\")\n            .build());\n\n        // Create a PostgreSQL database with Thalassa default values\n        var exampleDbaasPgDatabase = new DbaasPgDatabase(\"exampleDbaasPgDatabase\", DbaasPgDatabaseArgs.builder()\n            .name(\"mydatabase2\")\n            .dbClusterId(exampleDbaasDbCluster.id())\n            .ownerRoleId(exampleDbaasPgRoles.id())\n            .build());\n\n        ctx.export(\"pgDatabaseId\", exampleDbaasPgDatabase.id());\n        ctx.export(\"pgDatabaseName\", exampleDbaasPgDatabase.name());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the database cluster\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for database cluster\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the database cluster\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for database cluster\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a database cluster for the PostgreSQL database\n  exampleDbaasDbCluster:\n    type: thalassa:DbaasDbCluster\n    name: example\n    properties:\n      name: example-db-cluster\n      description: Example database cluster for PostgreSQL database\n      subnetId: ${exampleSubnet.id}\n      databaseInstanceType: db-pgp-small\n      engine: postgres\n      engineVersion: '15.13'\n      allocatedStorage: 100\n      volumeTypeClass: block\n  # Create PostgreSQL roles first\n  exampleDbaasPgRoles:\n    type: thalassa:DbaasPgRoles\n    name: example\n    properties:\n      dbClusterId: ${exampleDbaasDbCluster.id}\n      name: myrole\n      password: secure_password_123\n  # Create a PostgreSQL database with Thalassa default values\n  exampleDbaasPgDatabase:\n    type: thalassa:DbaasPgDatabase\n    name: example\n    properties:\n      name: mydatabase2\n      dbClusterId: ${exampleDbaasDbCluster.id}\n      ownerRoleId: ${exampleDbaasPgRoles.id}\noutputs:\n  # Output the PostgreSQL database details\n  pgDatabaseId: ${exampleDbaasPgDatabase.id}\n  pgDatabaseName: ${exampleDbaasPgDatabase.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "connectionLimit": {
                    "type": "integer",
                    "description": "The connection limit of the database\n"
                },
                "dbClusterId": {
                    "type": "string",
                    "description": "The ID of the database cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "ownerRoleId": {
                    "type": "string",
                    "description": "The ID of the owner role\n"
                }
            },
            "required": [
                "dbClusterId",
                "name",
                "ownerRoleId"
            ],
            "inputProperties": {
                "connectionLimit": {
                    "type": "integer",
                    "description": "The connection limit of the database\n"
                },
                "dbClusterId": {
                    "type": "string",
                    "description": "The ID of the database cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ownerRoleId": {
                    "type": "string",
                    "description": "The ID of the owner role\n"
                }
            },
            "requiredInputs": [
                "dbClusterId",
                "ownerRoleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DbaasPgDatabase resources.\n",
                "properties": {
                    "connectionLimit": {
                        "type": "integer",
                        "description": "The connection limit of the database\n"
                    },
                    "dbClusterId": {
                        "type": "string",
                        "description": "The ID of the database cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ownerRoleId": {
                        "type": "string",
                        "description": "The ID of the owner role\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/dbaasPgRoles:DbaasPgRoles": {
            "description": "Create a PostgreSQL role\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the database cluster\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for database cluster\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the database cluster\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for database cluster\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a database cluster for the PostgreSQL roles\nconst exampleDbaasDbCluster = new thalassa.DbaasDbCluster(\"example\", {\n    name: \"example-db-cluster\",\n    description: \"Example database cluster for PostgreSQL roles\",\n    subnetId: exampleSubnet.id,\n    databaseInstanceType: \"db-pgp-small\",\n    engine: \"postgres\",\n    engineVersion: \"15.13\",\n    allocatedStorage: 100,\n    volumeTypeClass: \"block\",\n});\n// Create PostgreSQL roles with Thalassa default values\nconst exampleDbaasPgRoles = new thalassa.DbaasPgRoles(\"example\", {\n    dbClusterId: exampleDbaasDbCluster.id,\n    name: \"example_role\",\n    password: \"secure_password_123\",\n});\nexport const pgRolesId = exampleDbaasPgRoles.id;\nexport const pgRolesName = exampleDbaasPgRoles.name;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the database cluster\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for database cluster\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the database cluster\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for database cluster\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a database cluster for the PostgreSQL roles\nexample_dbaas_db_cluster = thalassa.DbaasDbCluster(\"example\",\n    name=\"example-db-cluster\",\n    description=\"Example database cluster for PostgreSQL roles\",\n    subnet_id=example_subnet.id,\n    database_instance_type=\"db-pgp-small\",\n    engine=\"postgres\",\n    engine_version=\"15.13\",\n    allocated_storage=100,\n    volume_type_class=\"block\")\n# Create PostgreSQL roles with Thalassa default values\nexample_dbaas_pg_roles = thalassa.DbaasPgRoles(\"example\",\n    db_cluster_id=example_dbaas_db_cluster.id,\n    name=\"example_role\",\n    password=\"secure_password_123\")\npulumi.export(\"pgRolesId\", example_dbaas_pg_roles.id)\npulumi.export(\"pgRolesName\", example_dbaas_pg_roles.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the database cluster\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for database cluster\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the database cluster\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for database cluster\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a database cluster for the PostgreSQL roles\n    var exampleDbaasDbCluster = new Thalassa.DbaasDbCluster(\"example\", new()\n    {\n        Name = \"example-db-cluster\",\n        Description = \"Example database cluster for PostgreSQL roles\",\n        SubnetId = exampleSubnet.Id,\n        DatabaseInstanceType = \"db-pgp-small\",\n        Engine = \"postgres\",\n        EngineVersion = \"15.13\",\n        AllocatedStorage = 100,\n        VolumeTypeClass = \"block\",\n    });\n\n    // Create PostgreSQL roles with Thalassa default values\n    var exampleDbaasPgRoles = new Thalassa.DbaasPgRoles(\"example\", new()\n    {\n        DbClusterId = exampleDbaasDbCluster.Id,\n        Name = \"example_role\",\n        Password = \"secure_password_123\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"pgRolesId\"] = exampleDbaasPgRoles.Id,\n        [\"pgRolesName\"] = exampleDbaasPgRoles.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the database cluster\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for database cluster\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the database cluster\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for database cluster\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a database cluster for the PostgreSQL roles\n\t\texampleDbaasDbCluster, err := thalassa.NewDbaasDbCluster(ctx, \"example\", \u0026thalassa.DbaasDbClusterArgs{\n\t\t\tName:                 pulumi.String(\"example-db-cluster\"),\n\t\t\tDescription:          pulumi.String(\"Example database cluster for PostgreSQL roles\"),\n\t\t\tSubnetId:             exampleSubnet.ID(),\n\t\t\tDatabaseInstanceType: pulumi.String(\"db-pgp-small\"),\n\t\t\tEngine:               pulumi.String(\"postgres\"),\n\t\t\tEngineVersion:        pulumi.String(\"15.13\"),\n\t\t\tAllocatedStorage:     pulumi.Int(100),\n\t\t\tVolumeTypeClass:      pulumi.String(\"block\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create PostgreSQL roles with Thalassa default values\n\t\texampleDbaasPgRoles, err := thalassa.NewDbaasPgRoles(ctx, \"example\", \u0026thalassa.DbaasPgRolesArgs{\n\t\t\tDbClusterId: exampleDbaasDbCluster.ID(),\n\t\t\tName:        pulumi.String(\"example_role\"),\n\t\t\tPassword:    pulumi.String(\"secure_password_123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"pgRolesId\", exampleDbaasPgRoles.ID())\n\t\tctx.Export(\"pgRolesName\", exampleDbaasPgRoles.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.DbaasDbCluster;\nimport com.pulumi.thalassa.DbaasDbClusterArgs;\nimport com.pulumi.thalassa.DbaasPgRoles;\nimport com.pulumi.thalassa.DbaasPgRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the database cluster\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for database cluster\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the database cluster\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for database cluster\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a database cluster for the PostgreSQL roles\n        var exampleDbaasDbCluster = new DbaasDbCluster(\"exampleDbaasDbCluster\", DbaasDbClusterArgs.builder()\n            .name(\"example-db-cluster\")\n            .description(\"Example database cluster for PostgreSQL roles\")\n            .subnetId(exampleSubnet.id())\n            .databaseInstanceType(\"db-pgp-small\")\n            .engine(\"postgres\")\n            .engineVersion(\"15.13\")\n            .allocatedStorage(100)\n            .volumeTypeClass(\"block\")\n            .build());\n\n        // Create PostgreSQL roles with Thalassa default values\n        var exampleDbaasPgRoles = new DbaasPgRoles(\"exampleDbaasPgRoles\", DbaasPgRolesArgs.builder()\n            .dbClusterId(exampleDbaasDbCluster.id())\n            .name(\"example_role\")\n            .password(\"secure_password_123\")\n            .build());\n\n        ctx.export(\"pgRolesId\", exampleDbaasPgRoles.id());\n        ctx.export(\"pgRolesName\", exampleDbaasPgRoles.name());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the database cluster\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for database cluster\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the database cluster\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for database cluster\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a database cluster for the PostgreSQL roles\n  exampleDbaasDbCluster:\n    type: thalassa:DbaasDbCluster\n    name: example\n    properties:\n      name: example-db-cluster\n      description: Example database cluster for PostgreSQL roles\n      subnetId: ${exampleSubnet.id}\n      databaseInstanceType: db-pgp-small\n      engine: postgres\n      engineVersion: '15.13'\n      allocatedStorage: 100\n      volumeTypeClass: block\n  # Create PostgreSQL roles with Thalassa default values\n  exampleDbaasPgRoles:\n    type: thalassa:DbaasPgRoles\n    name: example\n    properties:\n      dbClusterId: ${exampleDbaasDbCluster.id}\n      name: example_role\n      password: secure_password_123\noutputs:\n  # Output the PostgreSQL roles details\n  pgRolesId: ${exampleDbaasPgRoles.id}\n  pgRolesName: ${exampleDbaasPgRoles.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "connectionLimit": {
                    "type": "integer",
                    "description": "The connection limit of the role\n"
                },
                "createDb": {
                    "type": "boolean",
                    "description": "Whether the role can create databases\n"
                },
                "createRole": {
                    "type": "boolean",
                    "description": "Whether the role can create roles\n"
                },
                "dbClusterId": {
                    "type": "string",
                    "description": "The ID of the database\n"
                },
                "login": {
                    "type": "boolean",
                    "description": "Whether the role can login\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the role\n",
                    "secret": true
                }
            },
            "required": [
                "dbClusterId",
                "name",
                "password"
            ],
            "inputProperties": {
                "connectionLimit": {
                    "type": "integer",
                    "description": "The connection limit of the role\n"
                },
                "createDb": {
                    "type": "boolean",
                    "description": "Whether the role can create databases\n"
                },
                "createRole": {
                    "type": "boolean",
                    "description": "Whether the role can create roles\n"
                },
                "dbClusterId": {
                    "type": "string",
                    "description": "The ID of the database\n"
                },
                "login": {
                    "type": "boolean",
                    "description": "Whether the role can login\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role\n"
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The password of the role\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "dbClusterId",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DbaasPgRoles resources.\n",
                "properties": {
                    "connectionLimit": {
                        "type": "integer",
                        "description": "The connection limit of the role\n"
                    },
                    "createDb": {
                        "type": "boolean",
                        "description": "Whether the role can create databases\n"
                    },
                    "createRole": {
                        "type": "boolean",
                        "description": "Whether the role can create roles\n"
                    },
                    "dbClusterId": {
                        "type": "string",
                        "description": "The ID of the database\n"
                    },
                    "login": {
                        "type": "boolean",
                        "description": "Whether the role can login\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the role\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/iamRole:IamRole": {
            "description": "Manage an organisation role in Thalassa Cloud\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create an organisation role\nconst example = new thalassa.IamRole(\"example\", {\n    name: \"example-role\",\n    description: \"An example organisation role for demonstration purposes\",\n    labels: {\n        environment: \"development\",\n        project: \"example\",\n    },\n    annotations: {\n        \"example.com/created-by\": \"terraform\",\n    },\n});\nexport const roleId = example.id;\nexport const roleName = example.name;\nexport const roleSlug = example.slug;\nexport const roleDescription = example.description;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create an organisation role\nexample = thalassa.IamRole(\"example\",\n    name=\"example-role\",\n    description=\"An example organisation role for demonstration purposes\",\n    labels={\n        \"environment\": \"development\",\n        \"project\": \"example\",\n    },\n    annotations={\n        \"example.com/created-by\": \"terraform\",\n    })\npulumi.export(\"roleId\", example.id)\npulumi.export(\"roleName\", example.name)\npulumi.export(\"roleSlug\", example.slug)\npulumi.export(\"roleDescription\", example.description)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create an organisation role\n    var example = new Thalassa.IamRole(\"example\", new()\n    {\n        Name = \"example-role\",\n        Description = \"An example organisation role for demonstration purposes\",\n        Labels = \n        {\n            { \"environment\", \"development\" },\n            { \"project\", \"example\" },\n        },\n        Annotations = \n        {\n            { \"example.com/created-by\", \"terraform\" },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"roleId\"] = example.Id,\n        [\"roleName\"] = example.Name,\n        [\"roleSlug\"] = example.Slug,\n        [\"roleDescription\"] = example.Description,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create an organisation role\n\t\texample, err := thalassa.NewIamRole(ctx, \"example\", \u0026thalassa.IamRoleArgs{\n\t\t\tName:        pulumi.String(\"example-role\"),\n\t\t\tDescription: pulumi.String(\"An example organisation role for demonstration purposes\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"development\"),\n\t\t\t\t\"project\":     pulumi.String(\"example\"),\n\t\t\t},\n\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\"example.com/created-by\": pulumi.String(\"terraform\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"roleId\", example.ID())\n\t\tctx.Export(\"roleName\", example.Name)\n\t\tctx.Export(\"roleSlug\", example.Slug)\n\t\tctx.Export(\"roleDescription\", example.Description)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.IamRole;\nimport com.pulumi.thalassa.IamRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create an organisation role\n        var example = new IamRole(\"example\", IamRoleArgs.builder()\n            .name(\"example-role\")\n            .description(\"An example organisation role for demonstration purposes\")\n            .labels(Map.ofEntries(\n                Map.entry(\"environment\", \"development\"),\n                Map.entry(\"project\", \"example\")\n            ))\n            .annotations(Map.of(\"example.com/created-by\", \"terraform\"))\n            .build());\n\n        ctx.export(\"roleId\", example.id());\n        ctx.export(\"roleName\", example.name());\n        ctx.export(\"roleSlug\", example.slug());\n        ctx.export(\"roleDescription\", example.description());\n    }\n}\n```\n```yaml\nresources:\n  # Create an organisation role\n  example:\n    type: thalassa:IamRole\n    properties:\n      name: example-role\n      description: An example organisation role for demonstration purposes\n      labels:\n        environment: development\n        project: example\n      annotations:\n        example.com/created-by: terraform\noutputs:\n  # Output the role details\n  roleId: ${example.id}\n  roleName: ${example.name}\n  roleSlug: ${example.slug}\n  roleDescription: ${example.description}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the organisation role\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the organisation role\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the organisation role\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the organisation role\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the organisation role\n"
                },
                "roleIsReadOnly": {
                    "type": "boolean",
                    "description": "Whether the role is read-only and cannot be modified.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "Slug of the organisation role\n"
                },
                "system": {
                    "type": "boolean",
                    "description": "Whether the role is a system role\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update timestamp of the organisation role\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "roleIsReadOnly",
                "slug",
                "system",
                "updatedAt"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the organisation role\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the organisation role\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the organisation role\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the organisation role\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamRole resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the organisation role\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the organisation role\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the organisation role\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the organisation role\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the organisation role\n",
                        "willReplaceOnChanges": true
                    },
                    "roleIsReadOnly": {
                        "type": "boolean",
                        "description": "Whether the role is read-only and cannot be modified.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the organisation role\n"
                    },
                    "system": {
                        "type": "boolean",
                        "description": "Whether the role is a system role\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update timestamp of the organisation role\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/iamTeam:IamTeam": {
            "description": "Create a team in the Thalassa Cloud platform\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a team\nconst example = new thalassa.IamTeam(\"example\", {\n    name: \"example-team\",\n    description: \"An example team for demonstration purposes\",\n    labels: {\n        environment: \"development\",\n        project: \"example\",\n    },\n    annotations: {\n        contact: \"team@example.com\",\n        owner: \"devops\",\n    },\n});\nexport const teamId = example.id;\nexport const teamName = example.name;\nexport const teamSlug = example.slug;\nexport const teamDescription = example.description;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a team\nexample = thalassa.IamTeam(\"example\",\n    name=\"example-team\",\n    description=\"An example team for demonstration purposes\",\n    labels={\n        \"environment\": \"development\",\n        \"project\": \"example\",\n    },\n    annotations={\n        \"contact\": \"team@example.com\",\n        \"owner\": \"devops\",\n    })\npulumi.export(\"teamId\", example.id)\npulumi.export(\"teamName\", example.name)\npulumi.export(\"teamSlug\", example.slug)\npulumi.export(\"teamDescription\", example.description)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a team\n    var example = new Thalassa.IamTeam(\"example\", new()\n    {\n        Name = \"example-team\",\n        Description = \"An example team for demonstration purposes\",\n        Labels = \n        {\n            { \"environment\", \"development\" },\n            { \"project\", \"example\" },\n        },\n        Annotations = \n        {\n            { \"contact\", \"team@example.com\" },\n            { \"owner\", \"devops\" },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"teamId\"] = example.Id,\n        [\"teamName\"] = example.Name,\n        [\"teamSlug\"] = example.Slug,\n        [\"teamDescription\"] = example.Description,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a team\n\t\texample, err := thalassa.NewIamTeam(ctx, \"example\", \u0026thalassa.IamTeamArgs{\n\t\t\tName:        pulumi.String(\"example-team\"),\n\t\t\tDescription: pulumi.String(\"An example team for demonstration purposes\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"development\"),\n\t\t\t\t\"project\":     pulumi.String(\"example\"),\n\t\t\t},\n\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\"contact\": pulumi.String(\"team@example.com\"),\n\t\t\t\t\"owner\":   pulumi.String(\"devops\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"teamId\", example.ID())\n\t\tctx.Export(\"teamName\", example.Name)\n\t\tctx.Export(\"teamSlug\", example.Slug)\n\t\tctx.Export(\"teamDescription\", example.Description)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.IamTeam;\nimport com.pulumi.thalassa.IamTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a team\n        var example = new IamTeam(\"example\", IamTeamArgs.builder()\n            .name(\"example-team\")\n            .description(\"An example team for demonstration purposes\")\n            .labels(Map.ofEntries(\n                Map.entry(\"environment\", \"development\"),\n                Map.entry(\"project\", \"example\")\n            ))\n            .annotations(Map.ofEntries(\n                Map.entry(\"contact\", \"team@example.com\"),\n                Map.entry(\"owner\", \"devops\")\n            ))\n            .build());\n\n        ctx.export(\"teamId\", example.id());\n        ctx.export(\"teamName\", example.name());\n        ctx.export(\"teamSlug\", example.slug());\n        ctx.export(\"teamDescription\", example.description());\n    }\n}\n```\n```yaml\nresources:\n  # Create a team\n  example:\n    type: thalassa:IamTeam\n    properties:\n      name: example-team\n      description: An example team for demonstration purposes\n      labels:\n        environment: development\n        project: example\n      annotations:\n        contact: team@example.com\n        owner: devops\noutputs:\n  # Output the team details\n  teamId: ${example.id}\n  teamName: ${example.name}\n  teamSlug: ${example.slug}\n  teamDescription: ${example.description}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Team\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the Team\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the team\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Team\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Team\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "slug": {
                    "type": "string",
                    "description": "Slug of the Team\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update timestamp of the Team\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "slug",
                "updatedAt"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Team\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the team\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Team\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Team\n"
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamTeam resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Team\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Team\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the team\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Team\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Team\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the Team\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update timestamp of the Team\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/kubernetesCluster:KubernetesCluster": {
            "description": "Manages a Kubernetes cluster in the Thalassa cloud platform. This resource supports both managed clusters and hosted control plane clusters, allowing you to deploy production-ready Kubernetes environments with configurable networking, security policies, and auto-upgrade capabilities. The cluster can be customized with specific CNI plugins (Cilium or custom), network CIDRs, pod security standards, audit logging, and API server access controls.\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Kubernetes Cluster\n"
                },
                "apiServerAcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/KubernetesClusterApiServerAcl:KubernetesClusterApiServerAcl"
                    },
                    "description": "API server ACLs for the Kubernetes Cluster\n"
                },
                "auditLogProfile": {
                    "type": "string",
                    "description": "Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.\n"
                },
                "autoUpgradePolicy": {
                    "type": "string",
                    "description": "Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.\n"
                },
                "clusterVersion": {
                    "type": "string",
                    "description": "Cluster version of the Kubernetes Cluster, can be a name, slug or identity\n"
                },
                "defaultNetworkPolicy": {
                    "type": "string",
                    "description": "Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection of the Kubernetes Cluster\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the Kubernetes Cluster\n"
                },
                "kubernetesApiServerCaCertificate": {
                    "type": "string",
                    "description": "Kubernetes API server CA certificate of the Kubernetes Cluster\n"
                },
                "kubernetesApiServerEndpoint": {
                    "type": "string",
                    "description": "Kubernetes API server endpoint of the Kubernetes Cluster\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Kubernetes Cluster\n"
                },
                "maintenanceDay": {
                    "type": "integer",
                    "description": "Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)\n"
                },
                "maintenanceStartAt": {
                    "type": "integer",
                    "description": "Time of day when the cluster will be upgraded in minutes from midnight (0-1439)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Kubernetes Cluster\n"
                },
                "networkingCni": {
                    "type": "string",
                    "description": "CNI of the Kubernetes Cluster\n"
                },
                "networkingPodCidr": {
                    "type": "string",
                    "description": "Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.\n"
                },
                "networkingServiceCidr": {
                    "type": "string",
                    "description": "Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "podSecurityStandardsProfile": {
                    "type": "string",
                    "description": "Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.\n"
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the Kubernetes Cluster\n"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Kubernetes Cluster\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the Kubernetes Cluster. Required for managed clusters.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.\n"
                }
            },
            "required": [
                "clusterVersion",
                "kubernetesApiServerCaCertificate",
                "kubernetesApiServerEndpoint",
                "name",
                "networkingCni",
                "organisationId",
                "slug",
                "status",
                "vpcId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Kubernetes Cluster\n"
                },
                "apiServerAcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/KubernetesClusterApiServerAcl:KubernetesClusterApiServerAcl"
                    },
                    "description": "API server ACLs for the Kubernetes Cluster\n"
                },
                "auditLogProfile": {
                    "type": "string",
                    "description": "Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.\n"
                },
                "autoUpgradePolicy": {
                    "type": "string",
                    "description": "Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.\n",
                    "willReplaceOnChanges": true
                },
                "clusterVersion": {
                    "type": "string",
                    "description": "Cluster version of the Kubernetes Cluster, can be a name, slug or identity\n"
                },
                "defaultNetworkPolicy": {
                    "type": "string",
                    "description": "Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection of the Kubernetes Cluster\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the Kubernetes Cluster\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Kubernetes Cluster\n"
                },
                "maintenanceDay": {
                    "type": "integer",
                    "description": "Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)\n"
                },
                "maintenanceStartAt": {
                    "type": "integer",
                    "description": "Time of day when the cluster will be upgraded in minutes from midnight (0-1439)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Kubernetes Cluster\n",
                    "willReplaceOnChanges": true
                },
                "networkingCni": {
                    "type": "string",
                    "description": "CNI of the Kubernetes Cluster\n",
                    "willReplaceOnChanges": true
                },
                "networkingPodCidr": {
                    "type": "string",
                    "description": "Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.\n",
                    "willReplaceOnChanges": true
                },
                "networkingServiceCidr": {
                    "type": "string",
                    "description": "Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "podSecurityStandardsProfile": {
                    "type": "string",
                    "description": "Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.\n",
                    "willReplaceOnChanges": true
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the Kubernetes Cluster\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the Kubernetes Cluster. Required for managed clusters.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterVersion",
                "networkingCni",
                "organisationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesCluster resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Kubernetes Cluster\n"
                    },
                    "apiServerAcls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/thalassa:index/KubernetesClusterApiServerAcl:KubernetesClusterApiServerAcl"
                        },
                        "description": "API server ACLs for the Kubernetes Cluster\n"
                    },
                    "auditLogProfile": {
                        "type": "string",
                        "description": "Audit log profile of the Kubernetes Cluster. Must be one of: none, basic, advanced. Default: none.\n"
                    },
                    "autoUpgradePolicy": {
                        "type": "string",
                        "description": "Auto upgrade policy of the Kubernetes Cluster. Must be one of: none, latest-version, latest-stable. Default: none.\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "Cluster type of the Kubernetes Cluster. Must be one of: managed, hosted-control-plane. Default: managed.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterVersion": {
                        "type": "string",
                        "description": "Cluster version of the Kubernetes Cluster, can be a name, slug or identity\n"
                    },
                    "defaultNetworkPolicy": {
                        "type": "string",
                        "description": "Default network policy of the Kubernetes Cluster. Must be one of: allow-all, deny-all. Default: deny-all.\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Delete protection of the Kubernetes Cluster\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the Kubernetes Cluster\n"
                    },
                    "kubernetesApiServerCaCertificate": {
                        "type": "string",
                        "description": "Kubernetes API server CA certificate of the Kubernetes Cluster\n"
                    },
                    "kubernetesApiServerEndpoint": {
                        "type": "string",
                        "description": "Kubernetes API server endpoint of the Kubernetes Cluster\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Kubernetes Cluster\n"
                    },
                    "maintenanceDay": {
                        "type": "integer",
                        "description": "Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)\n"
                    },
                    "maintenanceStartAt": {
                        "type": "integer",
                        "description": "Time of day when the cluster will be upgraded in minutes from midnight (0-1439)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Kubernetes Cluster\n",
                        "willReplaceOnChanges": true
                    },
                    "networkingCni": {
                        "type": "string",
                        "description": "CNI of the Kubernetes Cluster\n",
                        "willReplaceOnChanges": true
                    },
                    "networkingPodCidr": {
                        "type": "string",
                        "description": "Pod CIDR of the Kubernetes Cluster. Must be a valid CIDR block.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkingServiceCidr": {
                        "type": "string",
                        "description": "Service CIDR of the Kubernetes Cluster. Must be a valid CIDR block.\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "podSecurityStandardsProfile": {
                        "type": "string",
                        "description": "Pod security standards profile of the Kubernetes Cluster. Must be one of: restricted, baseline, privileged. Default: baseline.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupAttachments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List identities of security group that will be attached to the Kubernetes Cluster\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Kubernetes Cluster\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet of the Kubernetes Cluster. Required for managed clusters.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC of the Kubernetes Cluster. This is automatically set when a subnet is provided.\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/kubernetesNodePool:KubernetesNodePool": {
            "description": "Create an Kubernetes Node Pool for a Kubernetes Cluster. This resource is only available for managed Kubernetes Clusters. A Node Pool is a group of nodes that are identically configured and are automatically joined to the Kubernetes Cluster. Node Pools can be scaled up and down as needed.\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone for the Kubernetes Node Pool\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Kubernetes Cluster of the Kubernetes Node Pool\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the Kubernetes Node Pool\n"
                },
                "enableAutohealing": {
                    "type": "boolean",
                    "description": "Enable autohealing for the Kubernetes Node Pool\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "Machine type for the Kubernetes Node Pool\n"
                },
                "maxReplicas": {
                    "type": "integer",
                    "description": "Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.\n"
                },
                "minReplicas": {
                    "type": "integer",
                    "description": "Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Kubernetes Node Pool\n"
                },
                "nodeAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.\n"
                },
                "nodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/KubernetesNodePoolNodeTaint:KubernetesNodePoolNodeTaint"
                    },
                    "description": "Taints for the Kubernetes Node Pool\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer",
                    "description": "Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.\n"
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the machines in the Node Pool\n"
                },
                "slug": {
                    "type": "string",
                    "description": "Slug of the Kubernetes Node Pool\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Kubernetes Node Pool\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.\n"
                },
                "upgradeStrategy": {
                    "type": "string",
                    "description": "Upgrade strategy for the Kubernetes Node Pool\n"
                }
            },
            "required": [
                "availabilityZone",
                "clusterId",
                "machineType",
                "name",
                "slug",
                "status"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone for the Kubernetes Node Pool\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Kubernetes Cluster of the Kubernetes Node Pool\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the Kubernetes Node Pool\n"
                },
                "enableAutohealing": {
                    "type": "boolean",
                    "description": "Enable autohealing for the Kubernetes Node Pool\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "Machine type for the Kubernetes Node Pool\n"
                },
                "maxReplicas": {
                    "type": "integer",
                    "description": "Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.\n"
                },
                "minReplicas": {
                    "type": "integer",
                    "description": "Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Kubernetes Node Pool\n",
                    "willReplaceOnChanges": true
                },
                "nodeAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.\n"
                },
                "nodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/KubernetesNodePoolNodeTaint:KubernetesNodePoolNodeTaint"
                    },
                    "description": "Taints for the Kubernetes Node Pool\n"
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "replicas": {
                    "type": "integer",
                    "description": "Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.\n"
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the machines in the Node Pool\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.\n",
                    "willReplaceOnChanges": true
                },
                "upgradeStrategy": {
                    "type": "string",
                    "description": "Upgrade strategy for the Kubernetes Node Pool\n"
                }
            },
            "requiredInputs": [
                "availabilityZone",
                "clusterId",
                "machineType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesNodePool resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Kubernetes Node Pool. Optional. These annotations are used for additional metadata and configuration. Annotations are not applied to the Kubernetes nodes created for this Node Pool, please use node_annotations instead.\n"
                    },
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone for the Kubernetes Node Pool\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Kubernetes Cluster of the Kubernetes Node Pool\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the Kubernetes Node Pool\n"
                    },
                    "enableAutohealing": {
                        "type": "boolean",
                        "description": "Enable autohealing for the Kubernetes Node Pool\n"
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "Kubernetes version for the Kubernetes Node Pool. Optional. Will use the Kubernetes Cluster version if not set.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Kubernetes Node Pool. Optional. These labels are used for filtering and grouping resources in the Thalassa Console. Labels are not applied to the Kubernetes nodes created for this Node Pool, please use node_labels instead.\n"
                    },
                    "machineType": {
                        "type": "string",
                        "description": "Machine type for the Kubernetes Node Pool\n"
                    },
                    "maxReplicas": {
                        "type": "integer",
                        "description": "Maximum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.\n"
                    },
                    "minReplicas": {
                        "type": "integer",
                        "description": "Minimum number of replicas for the Kubernetes Node Pool. May only be set when enable_autoscaling is true.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Kubernetes Node Pool\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeAnnotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Kubernetes Nodes within this Node Pool. Optional. These annotations are applied to the Kubernetes nodes created for this Node Pool. Annotations must match the same constraints as Kubernetes annotations.\n"
                    },
                    "nodeLabels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Kubernetes Nodes within this Node Pool. Optional. These labels are applied to the Kubernetes nodes created for this Node Pool. Labels must match the same constraints as Kubernetes labels.\n"
                    },
                    "nodeTaints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/thalassa:index/KubernetesNodePoolNodeTaint:KubernetesNodePoolNodeTaint"
                        },
                        "description": "Taints for the Kubernetes Node Pool\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "replicas": {
                        "type": "integer",
                        "description": "Number of replicas for the Kubernetes Node Pool. Do not set this when enable_autoscaling is true.\n"
                    },
                    "securityGroupAttachments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List identities of security group that will be attached to the machines in the Node Pool\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the Kubernetes Node Pool\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Kubernetes Node Pool\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet of the Kubernetes Cluster. Required for managed Kubernetes Clusters.\n",
                        "willReplaceOnChanges": true
                    },
                    "upgradeStrategy": {
                        "type": "string",
                        "description": "Upgrade strategy for the Kubernetes Node Pool\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/loadbalancer:Loadbalancer": {
            "description": "Create an loadbalancer within a VPC\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the loadbalancer\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for loadbalancer\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the loadbalancer\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for loadbalancer\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a loadbalancer with all optional attributes\nconst exampleLoadbalancer = new thalassa.Loadbalancer(\"example\", {\n    name: \"example-loadbalancer\",\n    subnetId: exampleSubnet.id,\n    region: example.region,\n    description: \"Example loadbalancer for documentation with optional attributes\",\n    labels: {\n        environment: \"production\",\n        service: \"web\",\n        tier: \"frontend\",\n    },\n    annotations: {\n        \"cost-center\": \"cc-12345\",\n        \"ssl-cert\": \"wildcard.example.com\",\n        \"health-check\": \"enabled\",\n    },\n});\nexport const loadbalancerId = exampleLoadbalancer.id;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the loadbalancer\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for loadbalancer\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the loadbalancer\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for loadbalancer\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a loadbalancer with all optional attributes\nexample_loadbalancer = thalassa.Loadbalancer(\"example\",\n    name=\"example-loadbalancer\",\n    subnet_id=example_subnet.id,\n    region=example.region,\n    description=\"Example loadbalancer for documentation with optional attributes\",\n    labels={\n        \"environment\": \"production\",\n        \"service\": \"web\",\n        \"tier\": \"frontend\",\n    },\n    annotations={\n        \"cost-center\": \"cc-12345\",\n        \"ssl-cert\": \"wildcard.example.com\",\n        \"health-check\": \"enabled\",\n    })\npulumi.export(\"loadbalancerId\", example_loadbalancer.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the loadbalancer\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for loadbalancer\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the loadbalancer\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for loadbalancer\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a loadbalancer with all optional attributes\n    var exampleLoadbalancer = new Thalassa.Loadbalancer(\"example\", new()\n    {\n        Name = \"example-loadbalancer\",\n        SubnetId = exampleSubnet.Id,\n        Region = example.Region,\n        Description = \"Example loadbalancer for documentation with optional attributes\",\n        Labels = \n        {\n            { \"environment\", \"production\" },\n            { \"service\", \"web\" },\n            { \"tier\", \"frontend\" },\n        },\n        Annotations = \n        {\n            { \"cost-center\", \"cc-12345\" },\n            { \"ssl-cert\", \"wildcard.example.com\" },\n            { \"health-check\", \"enabled\" },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"loadbalancerId\"] = exampleLoadbalancer.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the loadbalancer\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for loadbalancer\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the loadbalancer\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for loadbalancer\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a loadbalancer with all optional attributes\n\t\texampleLoadbalancer, err := thalassa.NewLoadbalancer(ctx, \"example\", \u0026thalassa.LoadbalancerArgs{\n\t\t\tName:        pulumi.String(\"example-loadbalancer\"),\n\t\t\tSubnetId:    exampleSubnet.ID(),\n\t\t\tRegion:      example.Region,\n\t\t\tDescription: pulumi.String(\"Example loadbalancer for documentation with optional attributes\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"production\"),\n\t\t\t\t\"service\":     pulumi.String(\"web\"),\n\t\t\t\t\"tier\":        pulumi.String(\"frontend\"),\n\t\t\t},\n\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\"cost-center\":  pulumi.String(\"cc-12345\"),\n\t\t\t\t\"ssl-cert\":     pulumi.String(\"wildcard.example.com\"),\n\t\t\t\t\"health-check\": pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"loadbalancerId\", exampleLoadbalancer.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.Loadbalancer;\nimport com.pulumi.thalassa.LoadbalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the loadbalancer\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for loadbalancer\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the loadbalancer\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for loadbalancer\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a loadbalancer with all optional attributes\n        var exampleLoadbalancer = new Loadbalancer(\"exampleLoadbalancer\", LoadbalancerArgs.builder()\n            .name(\"example-loadbalancer\")\n            .subnetId(exampleSubnet.id())\n            .region(example.region())\n            .description(\"Example loadbalancer for documentation with optional attributes\")\n            .labels(Map.ofEntries(\n                Map.entry(\"environment\", \"production\"),\n                Map.entry(\"service\", \"web\"),\n                Map.entry(\"tier\", \"frontend\")\n            ))\n            .annotations(Map.ofEntries(\n                Map.entry(\"cost-center\", \"cc-12345\"),\n                Map.entry(\"ssl-cert\", \"wildcard.example.com\"),\n                Map.entry(\"health-check\", \"enabled\")\n            ))\n            .build());\n\n        ctx.export(\"loadbalancerId\", exampleLoadbalancer.id());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the loadbalancer\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for loadbalancer\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the loadbalancer\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for loadbalancer\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a loadbalancer with all optional attributes\n  exampleLoadbalancer:\n    type: thalassa:Loadbalancer\n    name: example\n    properties:\n      name: example-loadbalancer\n      subnetId: ${exampleSubnet.id}\n      region: ${example.region}\n      description: Example loadbalancer for documentation with optional attributes\n      labels:\n        environment: production\n        service: web\n        tier: frontend\n      annotations:\n        cost-center: cc-12345\n        ssl-cert: wildcard.example.com\n        health-check: enabled\noutputs:\n  # Output the loadbalancer ID\n  loadbalancerId: ${exampleLoadbalancer.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Loadbalancer\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection for the Loadbalancer\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the loadbalancer\n"
                },
                "externalIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The external IP addresses of the loadbalancer\n"
                },
                "internal": {
                    "type": "boolean",
                    "description": "Internal loadbalancer\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the loadbalancer\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Loadbalancer\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Loadbalancer\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the Loadbalancer\n"
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the Loadbalancer\n"
                },
                "slug": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the Loadbalancer\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC of the Loadbalancer\n"
                }
            },
            "required": [
                "externalIpAddresses",
                "ipAddress",
                "name",
                "region",
                "slug",
                "subnetId",
                "vpcId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Loadbalancer\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection for the Loadbalancer\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the loadbalancer\n"
                },
                "internal": {
                    "type": "boolean",
                    "description": "Internal loadbalancer\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Loadbalancer\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Loadbalancer\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region of the Loadbalancer\n",
                    "willReplaceOnChanges": true
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the Loadbalancer\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the Loadbalancer\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "region",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Loadbalancer resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Loadbalancer\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Delete protection for the Loadbalancer\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the loadbalancer\n"
                    },
                    "externalIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The external IP addresses of the loadbalancer\n"
                    },
                    "internal": {
                        "type": "boolean",
                        "description": "Internal loadbalancer\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address of the loadbalancer\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Loadbalancer\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Loadbalancer\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the Loadbalancer\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupAttachments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List identities of security group that will be attached to the Loadbalancer\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet of the Loadbalancer\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC of the Loadbalancer\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/loadbalancerListener:LoadbalancerListener": {
            "description": "Create a listener for a loadbalancer\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the load balancer\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for load balancer listener\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the loadbalancer\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for loadbalancer\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a load balancer\nconst exampleLoadbalancer = new thalassa.Loadbalancer(\"example\", {\n    name: \"example-loadbalancer\",\n    description: \"Example load balancer for listener\",\n    subnetId: exampleSubnet.id,\n    region: \"nl-01\",\n});\n// Create a target group for the listener\nconst exampleTargetGroup = new thalassa.TargetGroup(\"example\", {\n    name: \"example-target-group\",\n    description: \"Example target group for listener\",\n    vpcId: example.id,\n    protocol: \"tcp\",\n    port: 80,\n});\n// Create a load balancer listener with all required attributes\nconst exampleLoadbalancerListener = new thalassa.LoadbalancerListener(\"example\", {\n    loadbalancerId: exampleLoadbalancer.id,\n    name: \"example-listener\",\n    protocol: \"tcp\",\n    port: 80,\n    targetGroupId: exampleTargetGroup.id,\n});\nexport const listenerId = exampleLoadbalancerListener.id;\nexport const listenerName = exampleLoadbalancerListener.name;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the load balancer\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for load balancer listener\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the loadbalancer\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for loadbalancer\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a load balancer\nexample_loadbalancer = thalassa.Loadbalancer(\"example\",\n    name=\"example-loadbalancer\",\n    description=\"Example load balancer for listener\",\n    subnet_id=example_subnet.id,\n    region=\"nl-01\")\n# Create a target group for the listener\nexample_target_group = thalassa.TargetGroup(\"example\",\n    name=\"example-target-group\",\n    description=\"Example target group for listener\",\n    vpc_id=example.id,\n    protocol=\"tcp\",\n    port=80)\n# Create a load balancer listener with all required attributes\nexample_loadbalancer_listener = thalassa.LoadbalancerListener(\"example\",\n    loadbalancer_id=example_loadbalancer.id,\n    name=\"example-listener\",\n    protocol=\"tcp\",\n    port=80,\n    target_group_id=example_target_group.id)\npulumi.export(\"listenerId\", example_loadbalancer_listener.id)\npulumi.export(\"listenerName\", example_loadbalancer_listener.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the load balancer\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for load balancer listener\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the loadbalancer\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for loadbalancer\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a load balancer\n    var exampleLoadbalancer = new Thalassa.Loadbalancer(\"example\", new()\n    {\n        Name = \"example-loadbalancer\",\n        Description = \"Example load balancer for listener\",\n        SubnetId = exampleSubnet.Id,\n        Region = \"nl-01\",\n    });\n\n    // Create a target group for the listener\n    var exampleTargetGroup = new Thalassa.TargetGroup(\"example\", new()\n    {\n        Name = \"example-target-group\",\n        Description = \"Example target group for listener\",\n        VpcId = example.Id,\n        Protocol = \"tcp\",\n        Port = 80,\n    });\n\n    // Create a load balancer listener with all required attributes\n    var exampleLoadbalancerListener = new Thalassa.LoadbalancerListener(\"example\", new()\n    {\n        LoadbalancerId = exampleLoadbalancer.Id,\n        Name = \"example-listener\",\n        Protocol = \"tcp\",\n        Port = 80,\n        TargetGroupId = exampleTargetGroup.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"listenerId\"] = exampleLoadbalancerListener.Id,\n        [\"listenerName\"] = exampleLoadbalancerListener.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the load balancer\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for load balancer listener\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the loadbalancer\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for loadbalancer\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a load balancer\n\t\texampleLoadbalancer, err := thalassa.NewLoadbalancer(ctx, \"example\", \u0026thalassa.LoadbalancerArgs{\n\t\t\tName:        pulumi.String(\"example-loadbalancer\"),\n\t\t\tDescription: pulumi.String(\"Example load balancer for listener\"),\n\t\t\tSubnetId:    exampleSubnet.ID(),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a target group for the listener\n\t\texampleTargetGroup, err := thalassa.NewTargetGroup(ctx, \"example\", \u0026thalassa.TargetGroupArgs{\n\t\t\tName:        pulumi.String(\"example-target-group\"),\n\t\t\tDescription: pulumi.String(\"Example target group for listener\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tProtocol:    pulumi.String(\"tcp\"),\n\t\t\tPort:        pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a load balancer listener with all required attributes\n\t\texampleLoadbalancerListener, err := thalassa.NewLoadbalancerListener(ctx, \"example\", \u0026thalassa.LoadbalancerListenerArgs{\n\t\t\tLoadbalancerId: exampleLoadbalancer.ID(),\n\t\t\tName:           pulumi.String(\"example-listener\"),\n\t\t\tProtocol:       pulumi.String(\"tcp\"),\n\t\t\tPort:           pulumi.Int(80),\n\t\t\tTargetGroupId:  exampleTargetGroup.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"listenerId\", exampleLoadbalancerListener.ID())\n\t\tctx.Export(\"listenerName\", exampleLoadbalancerListener.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.Loadbalancer;\nimport com.pulumi.thalassa.LoadbalancerArgs;\nimport com.pulumi.thalassa.TargetGroup;\nimport com.pulumi.thalassa.TargetGroupArgs;\nimport com.pulumi.thalassa.LoadbalancerListener;\nimport com.pulumi.thalassa.LoadbalancerListenerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the load balancer\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for load balancer listener\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the loadbalancer\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for loadbalancer\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a load balancer\n        var exampleLoadbalancer = new Loadbalancer(\"exampleLoadbalancer\", LoadbalancerArgs.builder()\n            .name(\"example-loadbalancer\")\n            .description(\"Example load balancer for listener\")\n            .subnetId(exampleSubnet.id())\n            .region(\"nl-01\")\n            .build());\n\n        // Create a target group for the listener\n        var exampleTargetGroup = new TargetGroup(\"exampleTargetGroup\", TargetGroupArgs.builder()\n            .name(\"example-target-group\")\n            .description(\"Example target group for listener\")\n            .vpcId(example.id())\n            .protocol(\"tcp\")\n            .port(80)\n            .build());\n\n        // Create a load balancer listener with all required attributes\n        var exampleLoadbalancerListener = new LoadbalancerListener(\"exampleLoadbalancerListener\", LoadbalancerListenerArgs.builder()\n            .loadbalancerId(exampleLoadbalancer.id())\n            .name(\"example-listener\")\n            .protocol(\"tcp\")\n            .port(80)\n            .targetGroupId(exampleTargetGroup.id())\n            .build());\n\n        ctx.export(\"listenerId\", exampleLoadbalancerListener.id());\n        ctx.export(\"listenerName\", exampleLoadbalancerListener.name());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the load balancer\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for load balancer listener\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the loadbalancer\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for loadbalancer\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a load balancer\n  exampleLoadbalancer:\n    type: thalassa:Loadbalancer\n    name: example\n    properties:\n      name: example-loadbalancer\n      description: Example load balancer for listener\n      subnetId: ${exampleSubnet.id}\n      region: nl-01\n  # Create a target group for the listener\n  exampleTargetGroup:\n    type: thalassa:TargetGroup\n    name: example\n    properties:\n      name: example-target-group\n      description: Example target group for listener\n      vpcId: ${example.id}\n      protocol: tcp\n      port: 80\n  # Create a load balancer listener with all required attributes\n  exampleLoadbalancerListener:\n    type: thalassa:LoadbalancerListener\n    name: example\n    properties:\n      loadbalancerId: ${exampleLoadbalancer.id}\n      name: example-listener\n      protocol: tcp\n      port: 80\n      targetGroupId: ${exampleTargetGroup.id}\noutputs:\n  # Output the listener details\n  listenerId: ${exampleLoadbalancerListener.id}\n  listenerName: ${exampleLoadbalancerListener.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allowedSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks or IP addresses that are allowed to connect to the listener\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Loadbalancer Listener\n"
                },
                "connectionIdleTimeout": {
                    "type": "integer",
                    "description": "The amount of seconds used for configuring the idle connection timeout on a listener\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the loadbalancer listener\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Loadbalancer Listener\n"
                },
                "loadbalancerId": {
                    "type": "string",
                    "description": "The ID of the loadbalancer to create the listener on\n"
                },
                "maxConnections": {
                    "type": "integer",
                    "description": "The maximum number of connections that the listener can handle\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Loadbalancer Listener\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "The port the listener is listening on\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol the listener is using\n"
                },
                "slug": {
                    "type": "string"
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of the target group to attach to the listener\n"
                }
            },
            "required": [
                "loadbalancerId",
                "name",
                "port",
                "protocol",
                "slug",
                "targetGroupId"
            ],
            "inputProperties": {
                "allowedSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks or IP addresses that are allowed to connect to the listener\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Loadbalancer Listener\n"
                },
                "connectionIdleTimeout": {
                    "type": "integer",
                    "description": "The amount of seconds used for configuring the idle connection timeout on a listener\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the loadbalancer listener\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Loadbalancer Listener\n"
                },
                "loadbalancerId": {
                    "type": "string",
                    "description": "The ID of the loadbalancer to create the listener on\n",
                    "willReplaceOnChanges": true
                },
                "maxConnections": {
                    "type": "integer",
                    "description": "The maximum number of connections that the listener can handle\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Loadbalancer Listener\n"
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port the listener is listening on\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol the listener is using\n"
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of the target group to attach to the listener\n"
                }
            },
            "requiredInputs": [
                "loadbalancerId",
                "port",
                "protocol",
                "targetGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadbalancerListener resources.\n",
                "properties": {
                    "allowedSources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of CIDR blocks or IP addresses that are allowed to connect to the listener\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Loadbalancer Listener\n"
                    },
                    "connectionIdleTimeout": {
                        "type": "integer",
                        "description": "The amount of seconds used for configuring the idle connection timeout on a listener\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the loadbalancer listener\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Loadbalancer Listener\n"
                    },
                    "loadbalancerId": {
                        "type": "string",
                        "description": "The ID of the loadbalancer to create the listener on\n",
                        "willReplaceOnChanges": true
                    },
                    "maxConnections": {
                        "type": "integer",
                        "description": "The maximum number of connections that the listener can handle\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Loadbalancer Listener\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port the listener is listening on\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol the listener is using\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "targetGroupId": {
                        "type": "string",
                        "description": "The ID of the target group to attach to the listener\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/natgateway:Natgateway": {
            "description": "Create an NAT Gateway within a VPC\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the NAT gateway\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for NAT gateway\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the NAT gateway\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for NAT gateway\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a NAT gateway with all optional attributes\nconst exampleNatgateway = new thalassa.Natgateway(\"example\", {\n    name: \"example-nat-gateway\",\n    subnetId: exampleSubnet.id,\n    description: \"Example NAT gateway for documentation\",\n    labels: {\n        environment: \"production\",\n        service: \"networking\",\n        tier: \"public\",\n    },\n    annotations: {\n        \"cost-center\": \"cc-12345\",\n        \"backup-policy\": \"none\",\n        monitoring: \"enabled\",\n    },\n});\nexport const natGatewayId = exampleNatgateway.id;\nexport const natGatewayEndpointIp = exampleNatgateway.endpointIp;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the NAT gateway\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for NAT gateway\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the NAT gateway\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for NAT gateway\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a NAT gateway with all optional attributes\nexample_natgateway = thalassa.Natgateway(\"example\",\n    name=\"example-nat-gateway\",\n    subnet_id=example_subnet.id,\n    description=\"Example NAT gateway for documentation\",\n    labels={\n        \"environment\": \"production\",\n        \"service\": \"networking\",\n        \"tier\": \"public\",\n    },\n    annotations={\n        \"cost-center\": \"cc-12345\",\n        \"backup-policy\": \"none\",\n        \"monitoring\": \"enabled\",\n    })\npulumi.export(\"natGatewayId\", example_natgateway.id)\npulumi.export(\"natGatewayEndpointIp\", example_natgateway.endpoint_ip)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the NAT gateway\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for NAT gateway\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the NAT gateway\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for NAT gateway\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a NAT gateway with all optional attributes\n    var exampleNatgateway = new Thalassa.Natgateway(\"example\", new()\n    {\n        Name = \"example-nat-gateway\",\n        SubnetId = exampleSubnet.Id,\n        Description = \"Example NAT gateway for documentation\",\n        Labels = \n        {\n            { \"environment\", \"production\" },\n            { \"service\", \"networking\" },\n            { \"tier\", \"public\" },\n        },\n        Annotations = \n        {\n            { \"cost-center\", \"cc-12345\" },\n            { \"backup-policy\", \"none\" },\n            { \"monitoring\", \"enabled\" },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"natGatewayId\"] = exampleNatgateway.Id,\n        [\"natGatewayEndpointIp\"] = exampleNatgateway.EndpointIp,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the NAT gateway\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for NAT gateway\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the NAT gateway\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for NAT gateway\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a NAT gateway with all optional attributes\n\t\texampleNatgateway, err := thalassa.NewNatgateway(ctx, \"example\", \u0026thalassa.NatgatewayArgs{\n\t\t\tName:        pulumi.String(\"example-nat-gateway\"),\n\t\t\tSubnetId:    exampleSubnet.ID(),\n\t\t\tDescription: pulumi.String(\"Example NAT gateway for documentation\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"production\"),\n\t\t\t\t\"service\":     pulumi.String(\"networking\"),\n\t\t\t\t\"tier\":        pulumi.String(\"public\"),\n\t\t\t},\n\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\"cost-center\":   pulumi.String(\"cc-12345\"),\n\t\t\t\t\"backup-policy\": pulumi.String(\"none\"),\n\t\t\t\t\"monitoring\":    pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"natGatewayId\", exampleNatgateway.ID())\n\t\tctx.Export(\"natGatewayEndpointIp\", exampleNatgateway.EndpointIp)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.Natgateway;\nimport com.pulumi.thalassa.NatgatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the NAT gateway\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for NAT gateway\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the NAT gateway\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for NAT gateway\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a NAT gateway with all optional attributes\n        var exampleNatgateway = new Natgateway(\"exampleNatgateway\", NatgatewayArgs.builder()\n            .name(\"example-nat-gateway\")\n            .subnetId(exampleSubnet.id())\n            .description(\"Example NAT gateway for documentation\")\n            .labels(Map.ofEntries(\n                Map.entry(\"environment\", \"production\"),\n                Map.entry(\"service\", \"networking\"),\n                Map.entry(\"tier\", \"public\")\n            ))\n            .annotations(Map.ofEntries(\n                Map.entry(\"cost-center\", \"cc-12345\"),\n                Map.entry(\"backup-policy\", \"none\"),\n                Map.entry(\"monitoring\", \"enabled\")\n            ))\n            .build());\n\n        ctx.export(\"natGatewayId\", exampleNatgateway.id());\n        ctx.export(\"natGatewayEndpointIp\", exampleNatgateway.endpointIp());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the NAT gateway\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for NAT gateway\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the NAT gateway\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for NAT gateway\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a NAT gateway with all optional attributes\n  exampleNatgateway:\n    type: thalassa:Natgateway\n    name: example\n    properties:\n      name: example-nat-gateway\n      subnetId: ${exampleSubnet.id}\n      description: Example NAT gateway for documentation\n      labels:\n        environment: production\n        service: networking\n        tier: public\n      annotations:\n        cost-center: cc-12345\n        backup-policy: none\n        monitoring: enabled\noutputs:\n  # Output the NAT gateway details\n  natGatewayId: ${exampleNatgateway.id}\n  natGatewayEndpointIp: ${exampleNatgateway.endpointIp}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the NatGateway\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the natGateway\n"
                },
                "endpointIp": {
                    "type": "string",
                    "description": "Endpoint IP of the NatGateway\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the NatGateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the NatGateway\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the NAT Gateway\n"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the NatGateway\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the NatGateway\n"
                },
                "v4Ip": {
                    "type": "string",
                    "description": "V4 IP of the NatGateway\n"
                },
                "v6Ip": {
                    "type": "string",
                    "description": "V6 IP of the NatGateway\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC of the NatGateway\n"
                }
            },
            "required": [
                "endpointIp",
                "name",
                "slug",
                "status",
                "subnetId",
                "v4Ip",
                "v6Ip",
                "vpcId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the NatGateway\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the natGateway\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the NatGateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the NatGateway\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the NAT Gateway\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the NatGateway\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Natgateway resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the NatGateway\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the natGateway\n"
                    },
                    "endpointIp": {
                        "type": "string",
                        "description": "Endpoint IP of the NatGateway\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the NatGateway\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the NatGateway\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupAttachments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List identities of security group that will be attached to the NAT Gateway\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the NatGateway\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet of the NatGateway\n",
                        "willReplaceOnChanges": true
                    },
                    "v4Ip": {
                        "type": "string",
                        "description": "V4 IP of the NatGateway\n"
                    },
                    "v6Ip": {
                        "type": "string",
                        "description": "V6 IP of the NatGateway\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC of the NatGateway\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/objectstorageBucket:ObjectstorageBucket": {
            "description": "Create and manage an object storage bucket\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a basic object storage bucket\nconst basic = new thalassa.ObjectstorageBucket(\"basic\", {\n    name: \"my-basic-bucket\",\n    region: \"nl-01\",\n});\n// Create a public object storage bucket\nconst _public = new thalassa.ObjectstorageBucket(\"public\", {\n    name: \"my-public-bucket\",\n    region: \"nl-01\",\n    \"public\": true,\n});\n// Create a bucket with a custom policy\nconst withPolicy = new thalassa.ObjectstorageBucket(\"with_policy\", {\n    name: \"my-policy-bucket\",\n    region: \"nl-01\",\n    \"public\": false,\n    policy: JSON.stringify({\n        Version: \"2012-10-17\",\n        Statement: [{\n            Sid: \"AllowReadAccess\",\n            Effect: \"Allow\",\n            Principal: {\n                Thalassa: \"*\",\n            },\n            Action: [\"s3:GetObject\"],\n            Resource: [\"arn:thalassa:s3:::my-policy-bucket/*\"],\n            Condition: {\n                StringEquals: {\n                    \"thalassa:User\": \"u-exampleuserid\",\n                },\n            },\n        }],\n    }),\n});\nexport const basicBucketId = basic.id;\nexport const basicBucketName = basic.name;\nexport const basicBucketEndpoint = basic.endpoint;\nexport const publicBucketId = _public.id;\nexport const publicBucketName = _public.name;\nexport const policyBucketId = withPolicy.id;\nexport const policyBucketName = withPolicy.name;\n```\n```python\nimport pulumi\nimport json\nimport pulumi_thalassa as thalassa\n\n# Create a basic object storage bucket\nbasic = thalassa.ObjectstorageBucket(\"basic\",\n    name=\"my-basic-bucket\",\n    region=\"nl-01\")\n# Create a public object storage bucket\npublic = thalassa.ObjectstorageBucket(\"public\",\n    name=\"my-public-bucket\",\n    region=\"nl-01\",\n    public=True)\n# Create a bucket with a custom policy\nwith_policy = thalassa.ObjectstorageBucket(\"with_policy\",\n    name=\"my-policy-bucket\",\n    region=\"nl-01\",\n    public=False,\n    policy=json.dumps({\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{\n            \"Sid\": \"AllowReadAccess\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Thalassa\": \"*\",\n            },\n            \"Action\": [\"s3:GetObject\"],\n            \"Resource\": [\"arn:thalassa:s3:::my-policy-bucket/*\"],\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"thalassa:User\": \"u-exampleuserid\",\n                },\n            },\n        }],\n    }))\npulumi.export(\"basicBucketId\", basic.id)\npulumi.export(\"basicBucketName\", basic.name)\npulumi.export(\"basicBucketEndpoint\", basic.endpoint)\npulumi.export(\"publicBucketId\", public.id)\npulumi.export(\"publicBucketName\", public.name)\npulumi.export(\"policyBucketId\", with_policy.id)\npulumi.export(\"policyBucketName\", with_policy.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a basic object storage bucket\n    var basic = new Thalassa.ObjectstorageBucket(\"basic\", new()\n    {\n        Name = \"my-basic-bucket\",\n        Region = \"nl-01\",\n    });\n\n    // Create a public object storage bucket\n    var @public = new Thalassa.ObjectstorageBucket(\"public\", new()\n    {\n        Name = \"my-public-bucket\",\n        Region = \"nl-01\",\n        Public = true,\n    });\n\n    // Create a bucket with a custom policy\n    var withPolicy = new Thalassa.ObjectstorageBucket(\"with_policy\", new()\n    {\n        Name = \"my-policy-bucket\",\n        Region = \"nl-01\",\n        Public = false,\n        Policy = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"Version\"] = \"2012-10-17\",\n            [\"Statement\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"Sid\"] = \"AllowReadAccess\",\n                    [\"Effect\"] = \"Allow\",\n                    [\"Principal\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"Thalassa\"] = \"*\",\n                    },\n                    [\"Action\"] = new[]\n                    {\n                        \"s3:GetObject\",\n                    },\n                    [\"Resource\"] = new[]\n                    {\n                        \"arn:thalassa:s3:::my-policy-bucket/*\",\n                    },\n                    [\"Condition\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"StringEquals\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"thalassa:User\"] = \"u-exampleuserid\",\n                        },\n                    },\n                },\n            },\n        }),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"basicBucketId\"] = basic.Id,\n        [\"basicBucketName\"] = basic.Name,\n        [\"basicBucketEndpoint\"] = basic.Endpoint,\n        [\"publicBucketId\"] = @public.Id,\n        [\"publicBucketName\"] = @public.Name,\n        [\"policyBucketId\"] = withPolicy.Id,\n        [\"policyBucketName\"] = withPolicy.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a basic object storage bucket\n\t\tbasic, err := thalassa.NewObjectstorageBucket(ctx, \"basic\", \u0026thalassa.ObjectstorageBucketArgs{\n\t\t\tName:   pulumi.String(\"my-basic-bucket\"),\n\t\t\tRegion: pulumi.String(\"nl-01\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a public object storage bucket\n\t\tpublic, err := thalassa.NewObjectstorageBucket(ctx, \"public\", \u0026thalassa.ObjectstorageBucketArgs{\n\t\t\tName:   pulumi.String(\"my-public-bucket\"),\n\t\t\tRegion: pulumi.String(\"nl-01\"),\n\t\t\tPublic: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"Sid\":    \"AllowReadAccess\",\n\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\"Principal\": map[string]interface{}{\n\t\t\t\t\t\t\"Thalassa\": \"*\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Action\": []string{\n\t\t\t\t\t\t\"s3:GetObject\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Resource\": []string{\n\t\t\t\t\t\t\"arn:thalassa:s3:::my-policy-bucket/*\",\n\t\t\t\t\t},\n\t\t\t\t\t\"Condition\": map[string]interface{}{\n\t\t\t\t\t\t\"StringEquals\": map[string]interface{}{\n\t\t\t\t\t\t\t\"thalassa:User\": \"u-exampleuserid\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// Create a bucket with a custom policy\n\t\twithPolicy, err := thalassa.NewObjectstorageBucket(ctx, \"with_policy\", \u0026thalassa.ObjectstorageBucketArgs{\n\t\t\tName:   pulumi.String(\"my-policy-bucket\"),\n\t\t\tRegion: pulumi.String(\"nl-01\"),\n\t\t\tPublic: pulumi.Bool(false),\n\t\t\tPolicy: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"basicBucketId\", basic.ID())\n\t\tctx.Export(\"basicBucketName\", basic.Name)\n\t\tctx.Export(\"basicBucketEndpoint\", basic.Endpoint)\n\t\tctx.Export(\"publicBucketId\", public.ID())\n\t\tctx.Export(\"publicBucketName\", public.Name)\n\t\tctx.Export(\"policyBucketId\", withPolicy.ID())\n\t\tctx.Export(\"policyBucketName\", withPolicy.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.ObjectstorageBucket;\nimport com.pulumi.thalassa.ObjectstorageBucketArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a basic object storage bucket\n        var basic = new ObjectstorageBucket(\"basic\", ObjectstorageBucketArgs.builder()\n            .name(\"my-basic-bucket\")\n            .region(\"nl-01\")\n            .build());\n\n        // Create a public object storage bucket\n        var public_ = new ObjectstorageBucket(\"public\", ObjectstorageBucketArgs.builder()\n            .name(\"my-public-bucket\")\n            .region(\"nl-01\")\n            .public_(true)\n            .build());\n\n        // Create a bucket with a custom policy\n        var withPolicy = new ObjectstorageBucket(\"withPolicy\", ObjectstorageBucketArgs.builder()\n            .name(\"my-policy-bucket\")\n            .region(\"nl-01\")\n            .public_(false)\n            .policy(serializeJson(\n                jsonObject(\n                    jsonProperty(\"Version\", \"2012-10-17\"),\n                    jsonProperty(\"Statement\", jsonArray(jsonObject(\n                        jsonProperty(\"Sid\", \"AllowReadAccess\"),\n                        jsonProperty(\"Effect\", \"Allow\"),\n                        jsonProperty(\"Principal\", jsonObject(\n                            jsonProperty(\"Thalassa\", \"*\")\n                        )),\n                        jsonProperty(\"Action\", jsonArray(\"s3:GetObject\")),\n                        jsonProperty(\"Resource\", jsonArray(\"arn:thalassa:s3:::my-policy-bucket/*\")),\n                        jsonProperty(\"Condition\", jsonObject(\n                            jsonProperty(\"StringEquals\", jsonObject(\n                                jsonProperty(\"thalassa:User\", \"u-exampleuserid\")\n                            ))\n                        ))\n                    )))\n                )))\n            .build());\n\n        ctx.export(\"basicBucketId\", basic.id());\n        ctx.export(\"basicBucketName\", basic.name());\n        ctx.export(\"basicBucketEndpoint\", basic.endpoint());\n        ctx.export(\"publicBucketId\", public_.id());\n        ctx.export(\"publicBucketName\", public_.name());\n        ctx.export(\"policyBucketId\", withPolicy.id());\n        ctx.export(\"policyBucketName\", withPolicy.name());\n    }\n}\n```\n```yaml\nresources:\n  # Create a basic object storage bucket\n  basic:\n    type: thalassa:ObjectstorageBucket\n    properties:\n      name: my-basic-bucket\n      region: nl-01\n  # Create a public object storage bucket\n  public:\n    type: thalassa:ObjectstorageBucket\n    properties:\n      name: my-public-bucket\n      region: nl-01\n      public: true\n  # Create a bucket with a custom policy\n  withPolicy:\n    type: thalassa:ObjectstorageBucket\n    name: with_policy\n    properties:\n      name: my-policy-bucket\n      region: nl-01\n      public: false\n      policy:\n        fn::toJSON:\n          Version: 2012-10-17\n          Statement:\n            - Sid: AllowReadAccess\n              Effect: Allow\n              Principal:\n                Thalassa: '*'\n              Action:\n                - s3:GetObject\n              Resource:\n                - arn:thalassa:s3:::my-policy-bucket/*\n              Condition:\n                StringEquals:\n                  thalassa:User: u-exampleuserid\noutputs:\n  # Output the bucket details\n  basicBucketId: ${basic.id}\n  basicBucketName: ${basic.name}\n  basicBucketEndpoint: ${basic.endpoint}\n  publicBucketId: ${public.id}\n  publicBucketName: ${public.name}\n  policyBucketId: ${withPolicy.id}\n  policyBucketName: ${withPolicy.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint URL for the bucket\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the bucket\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "policy": {
                    "type": "string",
                    "description": "The bucket policy as a JSON string\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the bucket is publicly accessible\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the bucket\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the bucket\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "region",
                "status"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the bucket\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "policy": {
                    "type": "string",
                    "description": "The bucket policy as a JSON string\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the bucket is publicly accessible\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the bucket\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectstorageBucket resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint URL for the bucket\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the bucket\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "policy": {
                        "type": "string",
                        "description": "The bucket policy as a JSON string\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether the bucket is publicly accessible\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the bucket\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the bucket\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/routeTable:RouteTable": {
            "description": "Create an routeTable\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the route table\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for route table\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a route table\nconst exampleRouteTable = new thalassa.RouteTable(\"example\", {\n    name: \"example-route-table\",\n    vpcId: example.id,\n    description: \"Example route table for documentation\",\n    labels: {\n        environment: \"production\",\n        service: \"networking\",\n        tier: \"private\",\n    },\n    annotations: {\n        \"cost-center\": \"cc-12345\",\n        \"backup-policy\": \"none\",\n        monitoring: \"enabled\",\n    },\n});\nexport const routeTableId = exampleRouteTable.id;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the route table\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for route table\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a route table\nexample_route_table = thalassa.RouteTable(\"example\",\n    name=\"example-route-table\",\n    vpc_id=example.id,\n    description=\"Example route table for documentation\",\n    labels={\n        \"environment\": \"production\",\n        \"service\": \"networking\",\n        \"tier\": \"private\",\n    },\n    annotations={\n        \"cost-center\": \"cc-12345\",\n        \"backup-policy\": \"none\",\n        \"monitoring\": \"enabled\",\n    })\npulumi.export(\"routeTableId\", example_route_table.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the route table\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for route table\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a route table\n    var exampleRouteTable = new Thalassa.RouteTable(\"example\", new()\n    {\n        Name = \"example-route-table\",\n        VpcId = example.Id,\n        Description = \"Example route table for documentation\",\n        Labels = \n        {\n            { \"environment\", \"production\" },\n            { \"service\", \"networking\" },\n            { \"tier\", \"private\" },\n        },\n        Annotations = \n        {\n            { \"cost-center\", \"cc-12345\" },\n            { \"backup-policy\", \"none\" },\n            { \"monitoring\", \"enabled\" },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"routeTableId\"] = exampleRouteTable.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the route table\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for route table\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a route table\n\t\texampleRouteTable, err := thalassa.NewRouteTable(ctx, \"example\", \u0026thalassa.RouteTableArgs{\n\t\t\tName:        pulumi.String(\"example-route-table\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tDescription: pulumi.String(\"Example route table for documentation\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"production\"),\n\t\t\t\t\"service\":     pulumi.String(\"networking\"),\n\t\t\t\t\"tier\":        pulumi.String(\"private\"),\n\t\t\t},\n\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\"cost-center\":   pulumi.String(\"cc-12345\"),\n\t\t\t\t\"backup-policy\": pulumi.String(\"none\"),\n\t\t\t\t\"monitoring\":    pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"routeTableId\", exampleRouteTable.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.RouteTable;\nimport com.pulumi.thalassa.RouteTableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the route table\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for route table\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a route table\n        var exampleRouteTable = new RouteTable(\"exampleRouteTable\", RouteTableArgs.builder()\n            .name(\"example-route-table\")\n            .vpcId(example.id())\n            .description(\"Example route table for documentation\")\n            .labels(Map.ofEntries(\n                Map.entry(\"environment\", \"production\"),\n                Map.entry(\"service\", \"networking\"),\n                Map.entry(\"tier\", \"private\")\n            ))\n            .annotations(Map.ofEntries(\n                Map.entry(\"cost-center\", \"cc-12345\"),\n                Map.entry(\"backup-policy\", \"none\"),\n                Map.entry(\"monitoring\", \"enabled\")\n            ))\n            .build());\n\n        ctx.export(\"routeTableId\", exampleRouteTable.id());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the route table\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for route table\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a route table\n  exampleRouteTable:\n    type: thalassa:RouteTable\n    name: example\n    properties:\n      name: example-route-table\n      vpcId: ${example.id}\n      description: Example route table for documentation\n      labels:\n        environment: production\n        service: networking\n        tier: private\n      annotations:\n        cost-center: cc-12345\n        backup-policy: none\n        monitoring: enabled\noutputs:\n  # Output the route table ID\n  routeTableId: ${exampleRouteTable.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the RouteTable\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the routeTable\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the RouteTable\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the RouteTable\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC of the RouteTable\n"
                }
            },
            "required": [
                "name",
                "slug",
                "vpcId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the RouteTable\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the routeTable\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the RouteTable\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the RouteTable\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC of the RouteTable\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteTable resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the RouteTable\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the routeTable\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the RouteTable\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the RouteTable\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC of the RouteTable\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/routeTableRoute:RouteTableRoute": {
            "description": "Create an route table route with a destination cidr block, target gateway, target nat gateway and gateway address within a route table.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the route table\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for route table route\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the NAT gateway\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for NAT gateway\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a route table\nconst exampleRouteTable = new thalassa.RouteTable(\"example\", {\n    name: \"example-route-table\",\n    description: \"Example route table for route\",\n    vpcId: example.id,\n});\n// Create a NAT gateway for the route\nconst exampleNatgateway = new thalassa.Natgateway(\"example\", {\n    name: \"example-nat-gateway\",\n    subnetId: exampleSubnet.id,\n});\n// Create a route table route\nconst exampleRouteTableRoute = new thalassa.RouteTableRoute(\"example\", {\n    routeTableId: exampleRouteTable.id,\n    destinationCidr: \"0.0.0.0/0\",\n    targetNatgateway: exampleNatgateway.id,\n});\nexport const routeId = exampleRouteTableRoute.id;\nexport const routeDestination = exampleRouteTableRoute.destinationCidr;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the route table\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for route table route\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the NAT gateway\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for NAT gateway\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a route table\nexample_route_table = thalassa.RouteTable(\"example\",\n    name=\"example-route-table\",\n    description=\"Example route table for route\",\n    vpc_id=example.id)\n# Create a NAT gateway for the route\nexample_natgateway = thalassa.Natgateway(\"example\",\n    name=\"example-nat-gateway\",\n    subnet_id=example_subnet.id)\n# Create a route table route\nexample_route_table_route = thalassa.RouteTableRoute(\"example\",\n    route_table_id=example_route_table.id,\n    destination_cidr=\"0.0.0.0/0\",\n    target_natgateway=example_natgateway.id)\npulumi.export(\"routeId\", example_route_table_route.id)\npulumi.export(\"routeDestination\", example_route_table_route.destination_cidr)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the route table\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for route table route\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the NAT gateway\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for NAT gateway\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a route table\n    var exampleRouteTable = new Thalassa.RouteTable(\"example\", new()\n    {\n        Name = \"example-route-table\",\n        Description = \"Example route table for route\",\n        VpcId = example.Id,\n    });\n\n    // Create a NAT gateway for the route\n    var exampleNatgateway = new Thalassa.Natgateway(\"example\", new()\n    {\n        Name = \"example-nat-gateway\",\n        SubnetId = exampleSubnet.Id,\n    });\n\n    // Create a route table route\n    var exampleRouteTableRoute = new Thalassa.RouteTableRoute(\"example\", new()\n    {\n        RouteTableId = exampleRouteTable.Id,\n        DestinationCidr = \"0.0.0.0/0\",\n        TargetNatgateway = exampleNatgateway.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"routeId\"] = exampleRouteTableRoute.Id,\n        [\"routeDestination\"] = exampleRouteTableRoute.DestinationCidr,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the route table\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for route table route\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the NAT gateway\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for NAT gateway\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a route table\n\t\texampleRouteTable, err := thalassa.NewRouteTable(ctx, \"example\", \u0026thalassa.RouteTableArgs{\n\t\t\tName:        pulumi.String(\"example-route-table\"),\n\t\t\tDescription: pulumi.String(\"Example route table for route\"),\n\t\t\tVpcId:       example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a NAT gateway for the route\n\t\texampleNatgateway, err := thalassa.NewNatgateway(ctx, \"example\", \u0026thalassa.NatgatewayArgs{\n\t\t\tName:     pulumi.String(\"example-nat-gateway\"),\n\t\t\tSubnetId: exampleSubnet.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a route table route\n\t\texampleRouteTableRoute, err := thalassa.NewRouteTableRoute(ctx, \"example\", \u0026thalassa.RouteTableRouteArgs{\n\t\t\tRouteTableId:     exampleRouteTable.ID(),\n\t\t\tDestinationCidr:  pulumi.String(\"0.0.0.0/0\"),\n\t\t\tTargetNatgateway: exampleNatgateway.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"routeId\", exampleRouteTableRoute.ID())\n\t\tctx.Export(\"routeDestination\", exampleRouteTableRoute.DestinationCidr)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.RouteTable;\nimport com.pulumi.thalassa.RouteTableArgs;\nimport com.pulumi.thalassa.Natgateway;\nimport com.pulumi.thalassa.NatgatewayArgs;\nimport com.pulumi.thalassa.RouteTableRoute;\nimport com.pulumi.thalassa.RouteTableRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the route table\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for route table route\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the NAT gateway\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for NAT gateway\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a route table\n        var exampleRouteTable = new RouteTable(\"exampleRouteTable\", RouteTableArgs.builder()\n            .name(\"example-route-table\")\n            .description(\"Example route table for route\")\n            .vpcId(example.id())\n            .build());\n\n        // Create a NAT gateway for the route\n        var exampleNatgateway = new Natgateway(\"exampleNatgateway\", NatgatewayArgs.builder()\n            .name(\"example-nat-gateway\")\n            .subnetId(exampleSubnet.id())\n            .build());\n\n        // Create a route table route\n        var exampleRouteTableRoute = new RouteTableRoute(\"exampleRouteTableRoute\", RouteTableRouteArgs.builder()\n            .routeTableId(exampleRouteTable.id())\n            .destinationCidr(\"0.0.0.0/0\")\n            .targetNatgateway(exampleNatgateway.id())\n            .build());\n\n        ctx.export(\"routeId\", exampleRouteTableRoute.id());\n        ctx.export(\"routeDestination\", exampleRouteTableRoute.destinationCidr());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the route table\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for route table route\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the NAT gateway\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for NAT gateway\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a route table\n  exampleRouteTable:\n    type: thalassa:RouteTable\n    name: example\n    properties:\n      name: example-route-table\n      description: Example route table for route\n      vpcId: ${example.id}\n  # Create a NAT gateway for the route\n  exampleNatgateway:\n    type: thalassa:Natgateway\n    name: example\n    properties:\n      name: example-nat-gateway\n      subnetId: ${exampleSubnet.id}\n  # Create a route table route\n  exampleRouteTableRoute:\n    type: thalassa:RouteTableRoute\n    name: example\n    properties:\n      routeTableId: ${exampleRouteTable.id}\n      destinationCidr: 0.0.0.0/0\n      targetNatgateway: ${exampleNatgateway.id}\noutputs:\n  # Output the route details\n  routeId: ${exampleRouteTableRoute.id}\n  routeDestination: ${exampleRouteTableRoute.destinationCidr}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "destinationCidr": {
                    "type": "string",
                    "description": "Destination CIDR of the Route\n"
                },
                "gatewayAddress": {
                    "type": "string",
                    "description": "Gateway Address of the Route\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Notes for the Route\n"
                },
                "organisationId": {
                    "type": "string",
                    "description": "Organisation of the RouteTable\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "RouteTable of the Route\n"
                },
                "targetGateway": {
                    "type": "string",
                    "description": "Target Gateway of the Route\n"
                },
                "targetNatgateway": {
                    "type": "string",
                    "description": "Target NAT Gateway of the Route\n"
                }
            },
            "required": [
                "destinationCidr",
                "routeTableId"
            ],
            "inputProperties": {
                "destinationCidr": {
                    "type": "string",
                    "description": "Destination CIDR of the Route\n"
                },
                "gatewayAddress": {
                    "type": "string",
                    "description": "Gateway Address of the Route\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Notes for the Route\n"
                },
                "organisationId": {
                    "type": "string",
                    "description": "Organisation of the RouteTable\n",
                    "willReplaceOnChanges": true
                },
                "routeTableId": {
                    "type": "string",
                    "description": "RouteTable of the Route\n",
                    "willReplaceOnChanges": true
                },
                "targetGateway": {
                    "type": "string",
                    "description": "Target Gateway of the Route\n"
                },
                "targetNatgateway": {
                    "type": "string",
                    "description": "Target NAT Gateway of the Route\n"
                }
            },
            "requiredInputs": [
                "destinationCidr",
                "routeTableId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteTableRoute resources.\n",
                "properties": {
                    "destinationCidr": {
                        "type": "string",
                        "description": "Destination CIDR of the Route\n"
                    },
                    "gatewayAddress": {
                        "type": "string",
                        "description": "Gateway Address of the Route\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "Notes for the Route\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "description": "Organisation of the RouteTable\n",
                        "willReplaceOnChanges": true
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "RouteTable of the Route\n",
                        "willReplaceOnChanges": true
                    },
                    "targetGateway": {
                        "type": "string",
                        "description": "Target Gateway of the Route\n"
                    },
                    "targetNatgateway": {
                        "type": "string",
                        "description": "Target NAT Gateway of the Route\n"
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/securityGroup:SecurityGroup": {
            "description": "A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for security group\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a security group\nconst exampleSecurityGroup = new thalassa.SecurityGroup(\"example\", {\n    name: \"example-security-group\",\n    description: \"Example security group for documentation\",\n    vpcId: example.id,\n    allowSameGroupTraffic: false,\n    ingressRules: [\n        {\n            name: \"allow-http\",\n            ipVersion: \"ipv4\",\n            protocol: \"tcp\",\n            priority: 100,\n            remoteType: \"address\",\n            remoteAddress: \"10.0.0.0/0\",\n            portRangeMin: 80,\n            portRangeMax: 80,\n            policy: \"allow\",\n        },\n        {\n            name: \"allow-https\",\n            ipVersion: \"ipv4\",\n            protocol: \"tcp\",\n            priority: 101,\n            remoteType: \"address\",\n            remoteAddress: \"0.0.0.0/0\",\n            portRangeMin: 443,\n            portRangeMax: 443,\n            policy: \"allow\",\n        },\n    ],\n    egressRules: [{\n        name: \"allow-all\",\n        ipVersion: \"ipv4\",\n        protocol: \"all\",\n        priority: 100,\n        remoteType: \"address\",\n        remoteAddress: \"0.0.0.0/0\",\n        policy: \"allow\",\n    }],\n});\nexport const securityGroupId = exampleSecurityGroup.id;\nexport const securityGroupName = exampleSecurityGroup.name;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for security group\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a security group\nexample_security_group = thalassa.SecurityGroup(\"example\",\n    name=\"example-security-group\",\n    description=\"Example security group for documentation\",\n    vpc_id=example.id,\n    allow_same_group_traffic=False,\n    ingress_rules=[\n        {\n            \"name\": \"allow-http\",\n            \"ip_version\": \"ipv4\",\n            \"protocol\": \"tcp\",\n            \"priority\": 100,\n            \"remote_type\": \"address\",\n            \"remote_address\": \"10.0.0.0/0\",\n            \"port_range_min\": 80,\n            \"port_range_max\": 80,\n            \"policy\": \"allow\",\n        },\n        {\n            \"name\": \"allow-https\",\n            \"ip_version\": \"ipv4\",\n            \"protocol\": \"tcp\",\n            \"priority\": 101,\n            \"remote_type\": \"address\",\n            \"remote_address\": \"0.0.0.0/0\",\n            \"port_range_min\": 443,\n            \"port_range_max\": 443,\n            \"policy\": \"allow\",\n        },\n    ],\n    egress_rules=[{\n        \"name\": \"allow-all\",\n        \"ip_version\": \"ipv4\",\n        \"protocol\": \"all\",\n        \"priority\": 100,\n        \"remote_type\": \"address\",\n        \"remote_address\": \"0.0.0.0/0\",\n        \"policy\": \"allow\",\n    }])\npulumi.export(\"securityGroupId\", example_security_group.id)\npulumi.export(\"securityGroupName\", example_security_group.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for security group\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a security group\n    var exampleSecurityGroup = new Thalassa.SecurityGroup(\"example\", new()\n    {\n        Name = \"example-security-group\",\n        Description = \"Example security group for documentation\",\n        VpcId = example.Id,\n        AllowSameGroupTraffic = false,\n        IngressRules = new[]\n        {\n            new Thalassa.Inputs.SecurityGroupIngressRuleArgs\n            {\n                Name = \"allow-http\",\n                IpVersion = \"ipv4\",\n                Protocol = \"tcp\",\n                Priority = 100,\n                RemoteType = \"address\",\n                RemoteAddress = \"10.0.0.0/0\",\n                PortRangeMin = 80,\n                PortRangeMax = 80,\n                Policy = \"allow\",\n            },\n            new Thalassa.Inputs.SecurityGroupIngressRuleArgs\n            {\n                Name = \"allow-https\",\n                IpVersion = \"ipv4\",\n                Protocol = \"tcp\",\n                Priority = 101,\n                RemoteType = \"address\",\n                RemoteAddress = \"0.0.0.0/0\",\n                PortRangeMin = 443,\n                PortRangeMax = 443,\n                Policy = \"allow\",\n            },\n        },\n        EgressRules = new[]\n        {\n            new Thalassa.Inputs.SecurityGroupEgressRuleArgs\n            {\n                Name = \"allow-all\",\n                IpVersion = \"ipv4\",\n                Protocol = \"all\",\n                Priority = 100,\n                RemoteType = \"address\",\n                RemoteAddress = \"0.0.0.0/0\",\n                Policy = \"allow\",\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"securityGroupId\"] = exampleSecurityGroup.Id,\n        [\"securityGroupName\"] = exampleSecurityGroup.Name,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for security group\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a security group\n\t\texampleSecurityGroup, err := thalassa.NewSecurityGroup(ctx, \"example\", \u0026thalassa.SecurityGroupArgs{\n\t\t\tName:                  pulumi.String(\"example-security-group\"),\n\t\t\tDescription:           pulumi.String(\"Example security group for documentation\"),\n\t\t\tVpcId:                 example.ID(),\n\t\t\tAllowSameGroupTraffic: pulumi.Bool(false),\n\t\t\tIngressRules: thalassa.SecurityGroupIngressRuleArray{\n\t\t\t\t\u0026thalassa.SecurityGroupIngressRuleArgs{\n\t\t\t\t\tName:          pulumi.String(\"allow-http\"),\n\t\t\t\t\tIpVersion:     pulumi.String(\"ipv4\"),\n\t\t\t\t\tProtocol:      pulumi.String(\"tcp\"),\n\t\t\t\t\tPriority:      pulumi.Int(100),\n\t\t\t\t\tRemoteType:    pulumi.String(\"address\"),\n\t\t\t\t\tRemoteAddress: pulumi.String(\"10.0.0.0/0\"),\n\t\t\t\t\tPortRangeMin:  pulumi.Int(80),\n\t\t\t\t\tPortRangeMax:  pulumi.Int(80),\n\t\t\t\t\tPolicy:        pulumi.String(\"allow\"),\n\t\t\t\t},\n\t\t\t\t\u0026thalassa.SecurityGroupIngressRuleArgs{\n\t\t\t\t\tName:          pulumi.String(\"allow-https\"),\n\t\t\t\t\tIpVersion:     pulumi.String(\"ipv4\"),\n\t\t\t\t\tProtocol:      pulumi.String(\"tcp\"),\n\t\t\t\t\tPriority:      pulumi.Int(101),\n\t\t\t\t\tRemoteType:    pulumi.String(\"address\"),\n\t\t\t\t\tRemoteAddress: pulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\tPortRangeMin:  pulumi.Int(443),\n\t\t\t\t\tPortRangeMax:  pulumi.Int(443),\n\t\t\t\t\tPolicy:        pulumi.String(\"allow\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEgressRules: thalassa.SecurityGroupEgressRuleArray{\n\t\t\t\t\u0026thalassa.SecurityGroupEgressRuleArgs{\n\t\t\t\t\tName:          pulumi.String(\"allow-all\"),\n\t\t\t\t\tIpVersion:     pulumi.String(\"ipv4\"),\n\t\t\t\t\tProtocol:      pulumi.String(\"all\"),\n\t\t\t\t\tPriority:      pulumi.Int(100),\n\t\t\t\t\tRemoteType:    pulumi.String(\"address\"),\n\t\t\t\t\tRemoteAddress: pulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\tPolicy:        pulumi.String(\"allow\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"securityGroupId\", exampleSecurityGroup.ID())\n\t\tctx.Export(\"securityGroupName\", exampleSecurityGroup.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.SecurityGroup;\nimport com.pulumi.thalassa.SecurityGroupArgs;\nimport com.pulumi.thalassa.inputs.SecurityGroupIngressRuleArgs;\nimport com.pulumi.thalassa.inputs.SecurityGroupEgressRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for security group\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a security group\n        var exampleSecurityGroup = new SecurityGroup(\"exampleSecurityGroup\", SecurityGroupArgs.builder()\n            .name(\"example-security-group\")\n            .description(\"Example security group for documentation\")\n            .vpcId(example.id())\n            .allowSameGroupTraffic(false)\n            .ingressRules(            \n                SecurityGroupIngressRuleArgs.builder()\n                    .name(\"allow-http\")\n                    .ipVersion(\"ipv4\")\n                    .protocol(\"tcp\")\n                    .priority(100)\n                    .remoteType(\"address\")\n                    .remoteAddress(\"10.0.0.0/0\")\n                    .portRangeMin(80)\n                    .portRangeMax(80)\n                    .policy(\"allow\")\n                    .build(),\n                SecurityGroupIngressRuleArgs.builder()\n                    .name(\"allow-https\")\n                    .ipVersion(\"ipv4\")\n                    .protocol(\"tcp\")\n                    .priority(101)\n                    .remoteType(\"address\")\n                    .remoteAddress(\"0.0.0.0/0\")\n                    .portRangeMin(443)\n                    .portRangeMax(443)\n                    .policy(\"allow\")\n                    .build())\n            .egressRules(SecurityGroupEgressRuleArgs.builder()\n                .name(\"allow-all\")\n                .ipVersion(\"ipv4\")\n                .protocol(\"all\")\n                .priority(100)\n                .remoteType(\"address\")\n                .remoteAddress(\"0.0.0.0/0\")\n                .policy(\"allow\")\n                .build())\n            .build());\n\n        ctx.export(\"securityGroupId\", exampleSecurityGroup.id());\n        ctx.export(\"securityGroupName\", exampleSecurityGroup.name());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for security group\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a security group\n  exampleSecurityGroup:\n    type: thalassa:SecurityGroup\n    name: example\n    properties:\n      name: example-security-group\n      description: Example security group for documentation\n      vpcId: ${example.id}\n      allowSameGroupTraffic: false\n      ingressRules:\n        - name: allow-http\n          ipVersion: ipv4\n          protocol: tcp\n          priority: 100\n          remoteType: address\n          remoteAddress: 10.0.0.0/0\n          portRangeMin: 80\n          portRangeMax: 80\n          policy: allow\n        - name: allow-https\n          ipVersion: ipv4\n          protocol: tcp\n          priority: 101\n          remoteType: address\n          remoteAddress: 0.0.0.0/0\n          portRangeMin: 443\n          portRangeMax: 443\n          policy: allow\n      egressRules:\n        - name: allow-all\n          ipVersion: ipv4\n          protocol: all\n          priority: 100\n          remoteType: address\n          remoteAddress: 0.0.0.0/0\n          policy: allow\noutputs:\n  # Output the security group details\n  securityGroupId: ${exampleSecurityGroup.id}\n  securityGroupName: ${exampleSecurityGroup.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allowSameGroupTraffic": {
                    "type": "boolean",
                    "description": "Flag that indicates if the security group allows traffic between instances in the same security group\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the security group\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the security group\n"
                },
                "egressRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/SecurityGroupEgressRule:SecurityGroupEgressRule"
                    },
                    "description": "List of egress rules for the security group\n"
                },
                "identity": {
                    "type": "string",
                    "description": "Identity of the security group\n"
                },
                "ingressRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/SecurityGroupIngressRule:SecurityGroupIngressRule"
                    },
                    "description": "List of ingress rules for the security group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the security group\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update timestamp of the security group\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Identity of the VPC that the security group belongs to\n"
                }
            },
            "required": [
                "createdAt",
                "identity",
                "name",
                "status",
                "updatedAt",
                "vpcId"
            ],
            "inputProperties": {
                "allowSameGroupTraffic": {
                    "type": "boolean",
                    "description": "Flag that indicates if the security group allows traffic between instances in the same security group\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the security group\n"
                },
                "egressRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/SecurityGroupEgressRule:SecurityGroupEgressRule"
                    },
                    "description": "List of egress rules for the security group\n"
                },
                "ingressRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/SecurityGroupIngressRule:SecurityGroupIngressRule"
                    },
                    "description": "List of ingress rules for the security group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "Identity of the VPC that the security group belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroup resources.\n",
                "properties": {
                    "allowSameGroupTraffic": {
                        "type": "boolean",
                        "description": "Flag that indicates if the security group allows traffic between instances in the same security group\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the security group\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the security group\n"
                    },
                    "egressRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/thalassa:index/SecurityGroupEgressRule:SecurityGroupEgressRule"
                        },
                        "description": "List of egress rules for the security group\n"
                    },
                    "identity": {
                        "type": "string",
                        "description": "Identity of the security group\n"
                    },
                    "ingressRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/thalassa:index/SecurityGroupIngressRule:SecurityGroupIngressRule"
                        },
                        "description": "List of ingress rules for the security group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the security group. Must be between 1 and 16 characters and contain only ASCII characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the security group\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update timestamp of the security group\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Identity of the VPC that the security group belongs to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/subnet:Subnet": {
            "description": "Create an subnet in a VPC. Subnets are used to create a network for your resources. A VPC can have multiple subnets, and each subnet must have a different CIDR block. IPv4, IPv6 and Dual-stack subnets are supported. After creationg the CIDR cannot be changed.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the subnet\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for subnet\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a route table for the subnet (optional)\nconst exampleRouteTable = new thalassa.RouteTable(\"example\", {\n    name: \"example-route-table\",\n    description: \"Example route table for subnet\",\n    vpcId: example.id,\n});\n// Create a subnet with all optional attributes\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n    description: \"Example subnet for documentation with all optional attributes\",\n    labels: {\n        environment: \"production\",\n        tier: \"web\",\n        network: \"private\",\n    },\n    annotations: {\n        \"cost-center\": \"cc-12345\",\n        \"backup-policy\": \"none\",\n        monitoring: \"enabled\",\n    },\n    routeTableId: exampleRouteTable.id,\n});\nexport const subnetId = exampleSubnet.id;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the subnet\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for subnet\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a route table for the subnet (optional)\nexample_route_table = thalassa.RouteTable(\"example\",\n    name=\"example-route-table\",\n    description=\"Example route table for subnet\",\n    vpc_id=example.id)\n# Create a subnet with all optional attributes\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\",\n    description=\"Example subnet for documentation with all optional attributes\",\n    labels={\n        \"environment\": \"production\",\n        \"tier\": \"web\",\n        \"network\": \"private\",\n    },\n    annotations={\n        \"cost-center\": \"cc-12345\",\n        \"backup-policy\": \"none\",\n        \"monitoring\": \"enabled\",\n    },\n    route_table_id=example_route_table.id)\npulumi.export(\"subnetId\", example_subnet.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the subnet\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for subnet\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a route table for the subnet (optional)\n    var exampleRouteTable = new Thalassa.RouteTable(\"example\", new()\n    {\n        Name = \"example-route-table\",\n        Description = \"Example route table for subnet\",\n        VpcId = example.Id,\n    });\n\n    // Create a subnet with all optional attributes\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n        Description = \"Example subnet for documentation with all optional attributes\",\n        Labels = \n        {\n            { \"environment\", \"production\" },\n            { \"tier\", \"web\" },\n            { \"network\", \"private\" },\n        },\n        Annotations = \n        {\n            { \"cost-center\", \"cc-12345\" },\n            { \"backup-policy\", \"none\" },\n            { \"monitoring\", \"enabled\" },\n        },\n        RouteTableId = exampleRouteTable.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"subnetId\"] = exampleSubnet.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the subnet\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for subnet\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a route table for the subnet (optional)\n\t\texampleRouteTable, err := thalassa.NewRouteTable(ctx, \"example\", \u0026thalassa.RouteTableArgs{\n\t\t\tName:        pulumi.String(\"example-route-table\"),\n\t\t\tDescription: pulumi.String(\"Example route table for subnet\"),\n\t\t\tVpcId:       example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet with all optional attributes\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for documentation with all optional attributes\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"production\"),\n\t\t\t\t\"tier\":        pulumi.String(\"web\"),\n\t\t\t\t\"network\":     pulumi.String(\"private\"),\n\t\t\t},\n\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\"cost-center\":   pulumi.String(\"cc-12345\"),\n\t\t\t\t\"backup-policy\": pulumi.String(\"none\"),\n\t\t\t\t\"monitoring\":    pulumi.String(\"enabled\"),\n\t\t\t},\n\t\t\tRouteTableId: exampleRouteTable.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"subnetId\", exampleSubnet.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.RouteTable;\nimport com.pulumi.thalassa.RouteTableArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the subnet\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for subnet\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a route table for the subnet (optional)\n        var exampleRouteTable = new RouteTable(\"exampleRouteTable\", RouteTableArgs.builder()\n            .name(\"example-route-table\")\n            .description(\"Example route table for subnet\")\n            .vpcId(example.id())\n            .build());\n\n        // Create a subnet with all optional attributes\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .description(\"Example subnet for documentation with all optional attributes\")\n            .labels(Map.ofEntries(\n                Map.entry(\"environment\", \"production\"),\n                Map.entry(\"tier\", \"web\"),\n                Map.entry(\"network\", \"private\")\n            ))\n            .annotations(Map.ofEntries(\n                Map.entry(\"cost-center\", \"cc-12345\"),\n                Map.entry(\"backup-policy\", \"none\"),\n                Map.entry(\"monitoring\", \"enabled\")\n            ))\n            .routeTableId(exampleRouteTable.id())\n            .build());\n\n        ctx.export(\"subnetId\", exampleSubnet.id());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the subnet\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for subnet\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a route table for the subnet (optional)\n  exampleRouteTable:\n    type: thalassa:RouteTable\n    name: example\n    properties:\n      name: example-route-table\n      description: Example route table for subnet\n      vpcId: ${example.id}\n  # Create a subnet with all optional attributes\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n      description: Example subnet for documentation with all optional attributes\n      labels:\n        environment: production\n        tier: web\n        network: private\n      annotations:\n        cost-center: cc-12345\n        backup-policy: none\n        monitoring: enabled\n      routeTableId: ${exampleRouteTable.id}\noutputs:\n  # Output the subnet ID\n  subnetId: ${exampleSubnet.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Subnet\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "CIDR of the Subnet\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the subnet\n"
                },
                "ipv4AddressesAvailable": {
                    "type": "integer",
                    "description": "Number of IPv4 addresses available in the Subnet\n"
                },
                "ipv4AddressesUsed": {
                    "type": "integer",
                    "description": "Number of IPv4 addresses used in the Subnet\n"
                },
                "ipv6AddressesAvailable": {
                    "type": "integer",
                    "description": "Number of IPv6 addresses available in the Subnet\n"
                },
                "ipv6AddressesUsed": {
                    "type": "integer",
                    "description": "Number of IPv6 addresses used in the Subnet\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Subnet\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Subnet\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "Route Table of the Subnet\n"
                },
                "slug": {
                    "type": "string",
                    "description": "Slug of the Subnet\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Subnet\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Subnet\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC of the Subnet\n"
                }
            },
            "required": [
                "cidr",
                "ipv4AddressesAvailable",
                "ipv4AddressesUsed",
                "ipv6AddressesAvailable",
                "ipv6AddressesUsed",
                "name",
                "slug",
                "status",
                "type",
                "vpcId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Subnet\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "CIDR of the Subnet\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the subnet\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Subnet\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Subnet\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "routeTableId": {
                    "type": "string",
                    "description": "Route Table of the Subnet\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "VPC of the Subnet\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cidr",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subnet resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Subnet\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "CIDR of the Subnet\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the subnet\n"
                    },
                    "ipv4AddressesAvailable": {
                        "type": "integer",
                        "description": "Number of IPv4 addresses available in the Subnet\n"
                    },
                    "ipv4AddressesUsed": {
                        "type": "integer",
                        "description": "Number of IPv4 addresses used in the Subnet\n"
                    },
                    "ipv6AddressesAvailable": {
                        "type": "integer",
                        "description": "Number of IPv6 addresses available in the Subnet\n"
                    },
                    "ipv6AddressesUsed": {
                        "type": "integer",
                        "description": "Number of IPv6 addresses used in the Subnet\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Subnet\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Subnet\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "Route Table of the Subnet\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the Subnet\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Subnet\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Subnet\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "VPC of the Subnet\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/targetGroup:TargetGroup": {
            "description": "Create a target group for a load balancer\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the target group\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for target group\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a target group with all optional attributes\nconst exampleTargetGroup = new thalassa.TargetGroup(\"example\", {\n    name: \"example-target-group\",\n    vpcId: example.id,\n    protocol: \"tcp\",\n    port: 80,\n    description: \"Example target group for documentation with all optional attributes\",\n    labels: {\n        environment: \"production\",\n        service: \"web\",\n        tier: \"backend\",\n    },\n    healthCheckProtocol: \"http\",\n    healthCheckPort: 80,\n    healthCheckPath: \"/health\",\n    healthCheckInterval: 30,\n    healthCheckTimeout: 5,\n    healthyThreshold: 3,\n    unhealthyThreshold: 3,\n});\nexport const targetGroupId = exampleTargetGroup.id;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the target group\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for target group\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a target group with all optional attributes\nexample_target_group = thalassa.TargetGroup(\"example\",\n    name=\"example-target-group\",\n    vpc_id=example.id,\n    protocol=\"tcp\",\n    port=80,\n    description=\"Example target group for documentation with all optional attributes\",\n    labels={\n        \"environment\": \"production\",\n        \"service\": \"web\",\n        \"tier\": \"backend\",\n    },\n    health_check_protocol=\"http\",\n    health_check_port=80,\n    health_check_path=\"/health\",\n    health_check_interval=30,\n    health_check_timeout=5,\n    healthy_threshold=3,\n    unhealthy_threshold=3)\npulumi.export(\"targetGroupId\", example_target_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the target group\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for target group\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a target group with all optional attributes\n    var exampleTargetGroup = new Thalassa.TargetGroup(\"example\", new()\n    {\n        Name = \"example-target-group\",\n        VpcId = example.Id,\n        Protocol = \"tcp\",\n        Port = 80,\n        Description = \"Example target group for documentation with all optional attributes\",\n        Labels = \n        {\n            { \"environment\", \"production\" },\n            { \"service\", \"web\" },\n            { \"tier\", \"backend\" },\n        },\n        HealthCheckProtocol = \"http\",\n        HealthCheckPort = 80,\n        HealthCheckPath = \"/health\",\n        HealthCheckInterval = 30,\n        HealthCheckTimeout = 5,\n        HealthyThreshold = 3,\n        UnhealthyThreshold = 3,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"targetGroupId\"] = exampleTargetGroup.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the target group\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for target group\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a target group with all optional attributes\n\t\texampleTargetGroup, err := thalassa.NewTargetGroup(ctx, \"example\", \u0026thalassa.TargetGroupArgs{\n\t\t\tName:        pulumi.String(\"example-target-group\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tProtocol:    pulumi.String(\"tcp\"),\n\t\t\tPort:        pulumi.Int(80),\n\t\t\tDescription: pulumi.String(\"Example target group for documentation with all optional attributes\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"production\"),\n\t\t\t\t\"service\":     pulumi.String(\"web\"),\n\t\t\t\t\"tier\":        pulumi.String(\"backend\"),\n\t\t\t},\n\t\t\tHealthCheckProtocol: pulumi.String(\"http\"),\n\t\t\tHealthCheckPort:     pulumi.Int(80),\n\t\t\tHealthCheckPath:     pulumi.String(\"/health\"),\n\t\t\tHealthCheckInterval: pulumi.Int(30),\n\t\t\tHealthCheckTimeout:  pulumi.Int(5),\n\t\t\tHealthyThreshold:    pulumi.Int(3),\n\t\t\tUnhealthyThreshold:  pulumi.Int(3),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"targetGroupId\", exampleTargetGroup.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.TargetGroup;\nimport com.pulumi.thalassa.TargetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the target group\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for target group\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a target group with all optional attributes\n        var exampleTargetGroup = new TargetGroup(\"exampleTargetGroup\", TargetGroupArgs.builder()\n            .name(\"example-target-group\")\n            .vpcId(example.id())\n            .protocol(\"tcp\")\n            .port(80)\n            .description(\"Example target group for documentation with all optional attributes\")\n            .labels(Map.ofEntries(\n                Map.entry(\"environment\", \"production\"),\n                Map.entry(\"service\", \"web\"),\n                Map.entry(\"tier\", \"backend\")\n            ))\n            .healthCheckProtocol(\"http\")\n            .healthCheckPort(80)\n            .healthCheckPath(\"/health\")\n            .healthCheckInterval(30)\n            .healthCheckTimeout(5)\n            .healthyThreshold(3)\n            .unhealthyThreshold(3)\n            .build());\n\n        ctx.export(\"targetGroupId\", exampleTargetGroup.id());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the target group\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for target group\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a target group with all optional attributes\n  exampleTargetGroup:\n    type: thalassa:TargetGroup\n    name: example\n    properties:\n      name: example-target-group\n      vpcId: ${example.id}\n      protocol: tcp\n      port: 80 # Optional attributes\n      description: Example target group for documentation with all optional attributes\n      labels:\n        environment: production\n        service: web\n        tier: backend\n      healthCheckProtocol: http\n      healthCheckPort: 80\n      healthCheckPath: /health\n      healthCheckInterval: 30 # Check every 30 seconds\n      healthCheckTimeout: 5 # 5 second timeout\n      healthyThreshold: 3 # 3 successful checks to mark healthy\n      unhealthyThreshold: 3 # 3 failed checks to mark unhealthy\noutputs:\n  # Output the target group ID\n  targetGroupId: ${exampleTargetGroup.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Target Group\n"
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/TargetGroupAttachment:TargetGroupAttachment"
                    },
                    "description": "The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the target group\n"
                },
                "healthCheckInterval": {
                    "type": "integer",
                    "description": "The approximate amount of time, in seconds, between health checks of an individual target\n"
                },
                "healthCheckPath": {
                    "type": "string",
                    "description": "The path to use for health checks (only for HTTP/HTTPS)\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "The port to use for health checks\n"
                },
                "healthCheckProtocol": {
                    "type": "string",
                    "description": "The protocol to use for health checks. Must be one of: tcp, http.\n"
                },
                "healthCheckTimeout": {
                    "type": "integer",
                    "description": "The amount of time, in seconds, during which no response means a failed health check\n"
                },
                "healthyThreshold": {
                    "type": "integer",
                    "description": "The number of consecutive health checks successes required before considering an unhealthy target healthy\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Target Group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Target Group\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "The port on which the targets receive traffic\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.\n"
                },
                "slug": {
                    "type": "string"
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "description": "The number of consecutive health check failures required before considering a target unhealthy\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC this target group belongs to\n"
                }
            },
            "required": [
                "attachments",
                "name",
                "port",
                "protocol",
                "slug",
                "vpcId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Target Group\n"
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/thalassa:index/TargetGroupAttachment:TargetGroupAttachment"
                    },
                    "description": "The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the target group\n"
                },
                "healthCheckInterval": {
                    "type": "integer",
                    "description": "The approximate amount of time, in seconds, between health checks of an individual target\n"
                },
                "healthCheckPath": {
                    "type": "string",
                    "description": "The path to use for health checks (only for HTTP/HTTPS)\n"
                },
                "healthCheckPort": {
                    "type": "integer",
                    "description": "The port to use for health checks\n"
                },
                "healthCheckProtocol": {
                    "type": "string",
                    "description": "The protocol to use for health checks. Must be one of: tcp, http.\n"
                },
                "healthCheckTimeout": {
                    "type": "integer",
                    "description": "The amount of time, in seconds, during which no response means a failed health check\n"
                },
                "healthyThreshold": {
                    "type": "integer",
                    "description": "The number of consecutive health checks successes required before considering an unhealthy target healthy\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Target Group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Target Group\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port on which the targets receive traffic\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.\n",
                    "willReplaceOnChanges": true
                },
                "unhealthyThreshold": {
                    "type": "integer",
                    "description": "The number of consecutive health check failures required before considering a target unhealthy\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC this target group belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "port",
                "protocol",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TargetGroup resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Target Group\n"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/thalassa:index/TargetGroupAttachment:TargetGroupAttachment"
                        },
                        "description": "The targets to attach to the target group. If provided, the targets will be attached to the target group when the resource is created. Overwrites the target group attachment resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the target group\n"
                    },
                    "healthCheckInterval": {
                        "type": "integer",
                        "description": "The approximate amount of time, in seconds, between health checks of an individual target\n"
                    },
                    "healthCheckPath": {
                        "type": "string",
                        "description": "The path to use for health checks (only for HTTP/HTTPS)\n"
                    },
                    "healthCheckPort": {
                        "type": "integer",
                        "description": "The port to use for health checks\n"
                    },
                    "healthCheckProtocol": {
                        "type": "string",
                        "description": "The protocol to use for health checks. Must be one of: tcp, http.\n"
                    },
                    "healthCheckTimeout": {
                        "type": "integer",
                        "description": "The amount of time, in seconds, during which no response means a failed health check\n"
                    },
                    "healthyThreshold": {
                        "type": "integer",
                        "description": "The number of consecutive health checks successes required before considering an unhealthy target healthy\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Target Group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Target Group\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port on which the targets receive traffic\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol to use for routing traffic to the targets. Must be one of: tcp, udp.\n",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "unhealthyThreshold": {
                        "type": "integer",
                        "description": "The number of consecutive health check failures required before considering a target unhealthy\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC this target group belongs to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/targetGroupAttachment:TargetGroupAttachment": {
            "description": "Attach a Virtual Machine Instance to a target group\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the resources\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for target group attachment\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the resources\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for target group attachment\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a target group\nconst exampleTargetGroup = new thalassa.TargetGroup(\"example\", {\n    name: \"example-target-group\",\n    description: \"Example target group for attachment\",\n    vpcId: example.id,\n    protocol: \"tcp\",\n    port: 80,\n});\n// Create a virtual machine instance\nconst exampleVirtualMachineInstance = new thalassa.VirtualMachineInstance(\"example\", {\n    name: \"example-instance\",\n    subnetId: exampleSubnet.id,\n    machineType: \"pgp-small\",\n    machineImage: \"ubuntu-22.04\",\n    availabilityZone: \"nl-01a\",\n    rootVolumeSizeGb: 20,\n    rootVolumeType: \"Block\",\n});\n// Create a target group attachment with all required attributes\nconst exampleTargetGroupAttachment = new thalassa.TargetGroupAttachment(\"example\", {\n    targetGroupId: exampleTargetGroup.id,\n    vmiId: exampleVirtualMachineInstance.id,\n});\nexport const attachmentId = exampleTargetGroupAttachment.id;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the resources\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for target group attachment\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the resources\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for target group attachment\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a target group\nexample_target_group = thalassa.TargetGroup(\"example\",\n    name=\"example-target-group\",\n    description=\"Example target group for attachment\",\n    vpc_id=example.id,\n    protocol=\"tcp\",\n    port=80)\n# Create a virtual machine instance\nexample_virtual_machine_instance = thalassa.VirtualMachineInstance(\"example\",\n    name=\"example-instance\",\n    subnet_id=example_subnet.id,\n    machine_type=\"pgp-small\",\n    machine_image=\"ubuntu-22.04\",\n    availability_zone=\"nl-01a\",\n    root_volume_size_gb=20,\n    root_volume_type=\"Block\")\n# Create a target group attachment with all required attributes\nexample_target_group_attachment = thalassa.TargetGroupAttachment(\"example\",\n    target_group_id=example_target_group.id,\n    vmi_id=example_virtual_machine_instance.id)\npulumi.export(\"attachmentId\", example_target_group_attachment.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the resources\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for target group attachment\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the resources\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for target group attachment\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a target group\n    var exampleTargetGroup = new Thalassa.TargetGroup(\"example\", new()\n    {\n        Name = \"example-target-group\",\n        Description = \"Example target group for attachment\",\n        VpcId = example.Id,\n        Protocol = \"tcp\",\n        Port = 80,\n    });\n\n    // Create a virtual machine instance\n    var exampleVirtualMachineInstance = new Thalassa.VirtualMachineInstance(\"example\", new()\n    {\n        Name = \"example-instance\",\n        SubnetId = exampleSubnet.Id,\n        MachineType = \"pgp-small\",\n        MachineImage = \"ubuntu-22.04\",\n        AvailabilityZone = \"nl-01a\",\n        RootVolumeSizeGb = 20,\n        RootVolumeType = \"Block\",\n    });\n\n    // Create a target group attachment with all required attributes\n    var exampleTargetGroupAttachment = new Thalassa.TargetGroupAttachment(\"example\", new()\n    {\n        TargetGroupId = exampleTargetGroup.Id,\n        VmiId = exampleVirtualMachineInstance.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"attachmentId\"] = exampleTargetGroupAttachment.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the resources\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for target group attachment\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the resources\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for target group attachment\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a target group\n\t\texampleTargetGroup, err := thalassa.NewTargetGroup(ctx, \"example\", \u0026thalassa.TargetGroupArgs{\n\t\t\tName:        pulumi.String(\"example-target-group\"),\n\t\t\tDescription: pulumi.String(\"Example target group for attachment\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tProtocol:    pulumi.String(\"tcp\"),\n\t\t\tPort:        pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a virtual machine instance\n\t\texampleVirtualMachineInstance, err := thalassa.NewVirtualMachineInstance(ctx, \"example\", \u0026thalassa.VirtualMachineInstanceArgs{\n\t\t\tName:             pulumi.String(\"example-instance\"),\n\t\t\tSubnetId:         exampleSubnet.ID(),\n\t\t\tMachineType:      pulumi.String(\"pgp-small\"),\n\t\t\tMachineImage:     pulumi.String(\"ubuntu-22.04\"),\n\t\t\tAvailabilityZone: pulumi.String(\"nl-01a\"),\n\t\t\tRootVolumeSizeGb: pulumi.Int(20),\n\t\t\tRootVolumeType:   pulumi.String(\"Block\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a target group attachment with all required attributes\n\t\texampleTargetGroupAttachment, err := thalassa.NewTargetGroupAttachment(ctx, \"example\", \u0026thalassa.TargetGroupAttachmentArgs{\n\t\t\tTargetGroupId: exampleTargetGroup.ID(),\n\t\t\tVmiId:         exampleVirtualMachineInstance.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"attachmentId\", exampleTargetGroupAttachment.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.TargetGroup;\nimport com.pulumi.thalassa.TargetGroupArgs;\nimport com.pulumi.thalassa.VirtualMachineInstance;\nimport com.pulumi.thalassa.VirtualMachineInstanceArgs;\nimport com.pulumi.thalassa.TargetGroupAttachment;\nimport com.pulumi.thalassa.TargetGroupAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the resources\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for target group attachment\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the resources\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for target group attachment\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a target group\n        var exampleTargetGroup = new TargetGroup(\"exampleTargetGroup\", TargetGroupArgs.builder()\n            .name(\"example-target-group\")\n            .description(\"Example target group for attachment\")\n            .vpcId(example.id())\n            .protocol(\"tcp\")\n            .port(80)\n            .build());\n\n        // Create a virtual machine instance\n        var exampleVirtualMachineInstance = new VirtualMachineInstance(\"exampleVirtualMachineInstance\", VirtualMachineInstanceArgs.builder()\n            .name(\"example-instance\")\n            .subnetId(exampleSubnet.id())\n            .machineType(\"pgp-small\")\n            .machineImage(\"ubuntu-22.04\")\n            .availabilityZone(\"nl-01a\")\n            .rootVolumeSizeGb(20)\n            .rootVolumeType(\"Block\")\n            .build());\n\n        // Create a target group attachment with all required attributes\n        var exampleTargetGroupAttachment = new TargetGroupAttachment(\"exampleTargetGroupAttachment\", TargetGroupAttachmentArgs.builder()\n            .targetGroupId(exampleTargetGroup.id())\n            .vmiId(exampleVirtualMachineInstance.id())\n            .build());\n\n        ctx.export(\"attachmentId\", exampleTargetGroupAttachment.id());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the resources\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for target group attachment\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the resources\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for target group attachment\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a target group\n  exampleTargetGroup:\n    type: thalassa:TargetGroup\n    name: example\n    properties:\n      name: example-target-group\n      description: Example target group for attachment\n      vpcId: ${example.id}\n      protocol: tcp\n      port: 80\n  # Create a virtual machine instance\n  exampleVirtualMachineInstance:\n    type: thalassa:VirtualMachineInstance\n    name: example\n    properties:\n      name: example-instance\n      subnetId: ${exampleSubnet.id}\n      machineType: pgp-small\n      machineImage: ubuntu-22.04\n      availabilityZone: nl-01a\n      rootVolumeSizeGb: 20\n      rootVolumeType: Block\n  # Create a target group attachment with all required attributes\n  exampleTargetGroupAttachment:\n    type: thalassa:TargetGroupAttachment\n    name: example\n    properties:\n      targetGroupId: ${exampleTargetGroup.id}\n      vmiId: ${exampleVirtualMachineInstance.id}\noutputs:\n  # # Output the attachment details\n  attachmentId: ${exampleTargetGroupAttachment.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "organisationId": {
                    "type": "string"
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of the target group to attach to\n"
                },
                "vmiId": {
                    "type": "string",
                    "description": "The ID of the Virtual Machine Instance to attach\n"
                }
            },
            "required": [
                "targetGroupId",
                "vmiId"
            ],
            "inputProperties": {
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of the target group to attach to\n",
                    "willReplaceOnChanges": true
                },
                "vmiId": {
                    "type": "string",
                    "description": "The ID of the Virtual Machine Instance to attach\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "targetGroupId",
                "vmiId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TargetGroupAttachment resources.\n",
                "properties": {
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "targetGroupId": {
                        "type": "string",
                        "description": "The ID of the target group to attach to\n",
                        "willReplaceOnChanges": true
                    },
                    "vmiId": {
                        "type": "string",
                        "description": "The ID of the Virtual Machine Instance to attach\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/virtualMachineInstance:VirtualMachineInstance": {
            "description": "Create an virtual machine instance within a subnet on the Thalassa Cloud platform\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC for the virtual machine instance\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    description: \"Example VPC for virtual machine instance\",\n    region: \"nl-01\",\n    cidrs: [\"10.0.0.0/16\"],\n});\n// Create a subnet for the virtual machine instance\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for virtual machine instance\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\n// Create a security group for the virtual machine instance\nconst exampleSecurityGroup = new thalassa.SecurityGroup(\"example\", {\n    name: \"example-security-group\",\n    description: \"Example security group for virtual machine instance\",\n    vpcId: example.id,\n});\n// Create a cloud init template (optional)\nconst exampleCloudInitTemplate = new thalassa.CloudInitTemplate(\"example\", {\n    name: \"example-cloud-init-template\",\n    content: `#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl\nruncmd:\n  - systemctl enable nginx\n  - systemctl start nginx\n`,\n});\nconst block = thalassa.getVolumeType({\n    name: \"Block\",\n});\nconst ubuntu = thalassa.getMachineImage({\n    name: \"ubuntu-22-04-01\",\n});\n// Create a virtual machine instance with Thalassa default values\nconst exampleVirtualMachineInstance = new thalassa.VirtualMachineInstance(\"example\", {\n    name: \"example-instance\",\n    subnetId: exampleSubnet.id,\n    machineType: \"pgp-small\",\n    machineImage: ubuntu.then(ubuntu =\u003e ubuntu.name),\n    availabilityZone: \"nl-01a\",\n    rootVolumeSizeGb: 20,\n    rootVolumeType: block.then(block =\u003e block.id),\n    cloudInitTemplateId: exampleCloudInitTemplate.id,\n});\nexport const instanceId = exampleVirtualMachineInstance.id;\nexport const instanceName = exampleVirtualMachineInstance.name;\n// Create a load balancer for the virtual machine instance\nconst exampleLoadbalancer = new thalassa.Loadbalancer(\"example\", {\n    name: \"example-lb\",\n    region: \"nl-01\",\n    description: \"Example load balancer for virtual machine instance\",\n    subnetId: exampleSubnet.id,\n});\n// Create a load balancer target group\nconst exampleTargetGroup = new thalassa.TargetGroup(\"example\", {\n    name: \"example-lb-target-group\",\n    description: \"Example load balancer target group for virtual machine instance\",\n    vpcId: example.id,\n    protocol: \"tcp\",\n    port: 22,\n});\n// Create a load balancer listener\nconst exampleLoadbalancerListener = new thalassa.LoadbalancerListener(\"example\", {\n    name: \"example-lb-listener\",\n    description: \"Example load balancer listener for virtual machine instance\",\n    loadbalancerId: exampleLoadbalancer.id,\n    protocol: \"tcp\",\n    port: 22,\n    targetGroupId: exampleTargetGroup.id,\n});\nconst exampleTargetGroupAttachment = new thalassa.TargetGroupAttachment(\"example\", {\n    targetGroupId: exampleTargetGroup.id,\n    vmiId: exampleVirtualMachineInstance.id,\n});\nexport const loadBalancerIp = exampleLoadbalancer.ipAddress;\nexport const loadBalancerPort = exampleLoadbalancerListener.port;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC for the virtual machine instance\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    description=\"Example VPC for virtual machine instance\",\n    region=\"nl-01\",\n    cidrs=[\"10.0.0.0/16\"])\n# Create a subnet for the virtual machine instance\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for virtual machine instance\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\n# Create a security group for the virtual machine instance\nexample_security_group = thalassa.SecurityGroup(\"example\",\n    name=\"example-security-group\",\n    description=\"Example security group for virtual machine instance\",\n    vpc_id=example.id)\n# Create a cloud init template (optional)\nexample_cloud_init_template = thalassa.CloudInitTemplate(\"example\",\n    name=\"example-cloud-init-template\",\n    content=\"\"\"#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl\nruncmd:\n  - systemctl enable nginx\n  - systemctl start nginx\n\"\"\")\nblock = thalassa.get_volume_type(name=\"Block\")\nubuntu = thalassa.get_machine_image(name=\"ubuntu-22-04-01\")\n# Create a virtual machine instance with Thalassa default values\nexample_virtual_machine_instance = thalassa.VirtualMachineInstance(\"example\",\n    name=\"example-instance\",\n    subnet_id=example_subnet.id,\n    machine_type=\"pgp-small\",\n    machine_image=ubuntu.name,\n    availability_zone=\"nl-01a\",\n    root_volume_size_gb=20,\n    root_volume_type=block.id,\n    cloud_init_template_id=example_cloud_init_template.id)\npulumi.export(\"instanceId\", example_virtual_machine_instance.id)\npulumi.export(\"instanceName\", example_virtual_machine_instance.name)\n# Create a load balancer for the virtual machine instance\nexample_loadbalancer = thalassa.Loadbalancer(\"example\",\n    name=\"example-lb\",\n    region=\"nl-01\",\n    description=\"Example load balancer for virtual machine instance\",\n    subnet_id=example_subnet.id)\n# Create a load balancer target group\nexample_target_group = thalassa.TargetGroup(\"example\",\n    name=\"example-lb-target-group\",\n    description=\"Example load balancer target group for virtual machine instance\",\n    vpc_id=example.id,\n    protocol=\"tcp\",\n    port=22)\n# Create a load balancer listener\nexample_loadbalancer_listener = thalassa.LoadbalancerListener(\"example\",\n    name=\"example-lb-listener\",\n    description=\"Example load balancer listener for virtual machine instance\",\n    loadbalancer_id=example_loadbalancer.id,\n    protocol=\"tcp\",\n    port=22,\n    target_group_id=example_target_group.id)\nexample_target_group_attachment = thalassa.TargetGroupAttachment(\"example\",\n    target_group_id=example_target_group.id,\n    vmi_id=example_virtual_machine_instance.id)\npulumi.export(\"loadBalancerIp\", example_loadbalancer.ip_address)\npulumi.export(\"loadBalancerPort\", example_loadbalancer_listener.port)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC for the virtual machine instance\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Description = \"Example VPC for virtual machine instance\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n        },\n    });\n\n    // Create a subnet for the virtual machine instance\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for virtual machine instance\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    // Create a security group for the virtual machine instance\n    var exampleSecurityGroup = new Thalassa.SecurityGroup(\"example\", new()\n    {\n        Name = \"example-security-group\",\n        Description = \"Example security group for virtual machine instance\",\n        VpcId = example.Id,\n    });\n\n    // Create a cloud init template (optional)\n    var exampleCloudInitTemplate = new Thalassa.CloudInitTemplate(\"example\", new()\n    {\n        Name = \"example-cloud-init-template\",\n        Content = @\"#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl\nruncmd:\n  - systemctl enable nginx\n  - systemctl start nginx\n\",\n    });\n\n    var block = Thalassa.GetVolumeType.Invoke(new()\n    {\n        Name = \"Block\",\n    });\n\n    var ubuntu = Thalassa.GetMachineImage.Invoke(new()\n    {\n        Name = \"ubuntu-22-04-01\",\n    });\n\n    // Create a virtual machine instance with Thalassa default values\n    var exampleVirtualMachineInstance = new Thalassa.VirtualMachineInstance(\"example\", new()\n    {\n        Name = \"example-instance\",\n        SubnetId = exampleSubnet.Id,\n        MachineType = \"pgp-small\",\n        MachineImage = ubuntu.Apply(getMachineImageResult =\u003e getMachineImageResult.Name),\n        AvailabilityZone = \"nl-01a\",\n        RootVolumeSizeGb = 20,\n        RootVolumeType = block.Apply(getVolumeTypeResult =\u003e getVolumeTypeResult.Id),\n        CloudInitTemplateId = exampleCloudInitTemplate.Id,\n    });\n\n    // Create a load balancer for the virtual machine instance\n    var exampleLoadbalancer = new Thalassa.Loadbalancer(\"example\", new()\n    {\n        Name = \"example-lb\",\n        Region = \"nl-01\",\n        Description = \"Example load balancer for virtual machine instance\",\n        SubnetId = exampleSubnet.Id,\n    });\n\n    // Create a load balancer target group\n    var exampleTargetGroup = new Thalassa.TargetGroup(\"example\", new()\n    {\n        Name = \"example-lb-target-group\",\n        Description = \"Example load balancer target group for virtual machine instance\",\n        VpcId = example.Id,\n        Protocol = \"tcp\",\n        Port = 22,\n    });\n\n    // Create a load balancer listener\n    var exampleLoadbalancerListener = new Thalassa.LoadbalancerListener(\"example\", new()\n    {\n        Name = \"example-lb-listener\",\n        Description = \"Example load balancer listener for virtual machine instance\",\n        LoadbalancerId = exampleLoadbalancer.Id,\n        Protocol = \"tcp\",\n        Port = 22,\n        TargetGroupId = exampleTargetGroup.Id,\n    });\n\n    var exampleTargetGroupAttachment = new Thalassa.TargetGroupAttachment(\"example\", new()\n    {\n        TargetGroupId = exampleTargetGroup.Id,\n        VmiId = exampleVirtualMachineInstance.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"instanceId\"] = exampleVirtualMachineInstance.Id,\n        [\"instanceName\"] = exampleVirtualMachineInstance.Name,\n        [\"loadBalancerIp\"] = exampleLoadbalancer.IpAddress,\n        [\"loadBalancerPort\"] = exampleLoadbalancerListener.Port,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC for the virtual machine instance\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:        pulumi.String(\"example-vpc\"),\n\t\t\tDescription: pulumi.String(\"Example VPC for virtual machine instance\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet for the virtual machine instance\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for virtual machine instance\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a security group for the virtual machine instance\n\t\t_, err = thalassa.NewSecurityGroup(ctx, \"example\", \u0026thalassa.SecurityGroupArgs{\n\t\t\tName:        pulumi.String(\"example-security-group\"),\n\t\t\tDescription: pulumi.String(\"Example security group for virtual machine instance\"),\n\t\t\tVpcId:       example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a cloud init template (optional)\n\t\texampleCloudInitTemplate, err := thalassa.NewCloudInitTemplate(ctx, \"example\", \u0026thalassa.CloudInitTemplateArgs{\n\t\t\tName: pulumi.String(\"example-cloud-init-template\"),\n\t\t\tContent: pulumi.String(`#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl\nruncmd:\n  - systemctl enable nginx\n  - systemctl start nginx\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tblock, err := thalassa.GetVolumeType(ctx, \u0026thalassa.GetVolumeTypeArgs{\n\t\t\tName: \"Block\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tubuntu, err := thalassa.GetMachineImage(ctx, \u0026thalassa.GetMachineImageArgs{\n\t\t\tName: \"ubuntu-22-04-01\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a virtual machine instance with Thalassa default values\n\t\texampleVirtualMachineInstance, err := thalassa.NewVirtualMachineInstance(ctx, \"example\", \u0026thalassa.VirtualMachineInstanceArgs{\n\t\t\tName:                pulumi.String(\"example-instance\"),\n\t\t\tSubnetId:            exampleSubnet.ID(),\n\t\t\tMachineType:         pulumi.String(\"pgp-small\"),\n\t\t\tMachineImage:        pulumi.String(ubuntu.Name),\n\t\t\tAvailabilityZone:    pulumi.String(\"nl-01a\"),\n\t\t\tRootVolumeSizeGb:    pulumi.Int(20),\n\t\t\tRootVolumeType:      pulumi.String(block.Id),\n\t\t\tCloudInitTemplateId: exampleCloudInitTemplate.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"instanceId\", exampleVirtualMachineInstance.ID())\n\t\tctx.Export(\"instanceName\", exampleVirtualMachineInstance.Name)\n\t\t// Create a load balancer for the virtual machine instance\n\t\texampleLoadbalancer, err := thalassa.NewLoadbalancer(ctx, \"example\", \u0026thalassa.LoadbalancerArgs{\n\t\t\tName:        pulumi.String(\"example-lb\"),\n\t\t\tRegion:      pulumi.String(\"nl-01\"),\n\t\t\tDescription: pulumi.String(\"Example load balancer for virtual machine instance\"),\n\t\t\tSubnetId:    exampleSubnet.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a load balancer target group\n\t\texampleTargetGroup, err := thalassa.NewTargetGroup(ctx, \"example\", \u0026thalassa.TargetGroupArgs{\n\t\t\tName:        pulumi.String(\"example-lb-target-group\"),\n\t\t\tDescription: pulumi.String(\"Example load balancer target group for virtual machine instance\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tProtocol:    pulumi.String(\"tcp\"),\n\t\t\tPort:        pulumi.Int(22),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a load balancer listener\n\t\texampleLoadbalancerListener, err := thalassa.NewLoadbalancerListener(ctx, \"example\", \u0026thalassa.LoadbalancerListenerArgs{\n\t\t\tName:           pulumi.String(\"example-lb-listener\"),\n\t\t\tDescription:    pulumi.String(\"Example load balancer listener for virtual machine instance\"),\n\t\t\tLoadbalancerId: exampleLoadbalancer.ID(),\n\t\t\tProtocol:       pulumi.String(\"tcp\"),\n\t\t\tPort:           pulumi.Int(22),\n\t\t\tTargetGroupId:  exampleTargetGroup.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = thalassa.NewTargetGroupAttachment(ctx, \"example\", \u0026thalassa.TargetGroupAttachmentArgs{\n\t\t\tTargetGroupId: exampleTargetGroup.ID(),\n\t\t\tVmiId:         exampleVirtualMachineInstance.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"loadBalancerIp\", exampleLoadbalancer.IpAddress)\n\t\tctx.Export(\"loadBalancerPort\", exampleLoadbalancerListener.Port)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport com.pulumi.thalassa.SecurityGroup;\nimport com.pulumi.thalassa.SecurityGroupArgs;\nimport com.pulumi.thalassa.CloudInitTemplate;\nimport com.pulumi.thalassa.CloudInitTemplateArgs;\nimport com.pulumi.thalassa.ThalassaFunctions;\nimport com.pulumi.thalassa.inputs.GetVolumeTypeArgs;\nimport com.pulumi.thalassa.inputs.GetMachineImageArgs;\nimport com.pulumi.thalassa.VirtualMachineInstance;\nimport com.pulumi.thalassa.VirtualMachineInstanceArgs;\nimport com.pulumi.thalassa.Loadbalancer;\nimport com.pulumi.thalassa.LoadbalancerArgs;\nimport com.pulumi.thalassa.TargetGroup;\nimport com.pulumi.thalassa.TargetGroupArgs;\nimport com.pulumi.thalassa.LoadbalancerListener;\nimport com.pulumi.thalassa.LoadbalancerListenerArgs;\nimport com.pulumi.thalassa.TargetGroupAttachment;\nimport com.pulumi.thalassa.TargetGroupAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC for the virtual machine instance\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .description(\"Example VPC for virtual machine instance\")\n            .region(\"nl-01\")\n            .cidrs(\"10.0.0.0/16\")\n            .build());\n\n        // Create a subnet for the virtual machine instance\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for virtual machine instance\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        // Create a security group for the virtual machine instance\n        var exampleSecurityGroup = new SecurityGroup(\"exampleSecurityGroup\", SecurityGroupArgs.builder()\n            .name(\"example-security-group\")\n            .description(\"Example security group for virtual machine instance\")\n            .vpcId(example.id())\n            .build());\n\n        // Create a cloud init template (optional)\n        var exampleCloudInitTemplate = new CloudInitTemplate(\"exampleCloudInitTemplate\", CloudInitTemplateArgs.builder()\n            .name(\"example-cloud-init-template\")\n            .content(\"\"\"\n#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nginx\n  - curl\nruncmd:\n  - systemctl enable nginx\n  - systemctl start nginx\n            \"\"\")\n            .build());\n\n        final var block = ThalassaFunctions.getVolumeType(GetVolumeTypeArgs.builder()\n            .name(\"Block\")\n            .build());\n\n        final var ubuntu = ThalassaFunctions.getMachineImage(GetMachineImageArgs.builder()\n            .name(\"ubuntu-22-04-01\")\n            .build());\n\n        // Create a virtual machine instance with Thalassa default values\n        var exampleVirtualMachineInstance = new VirtualMachineInstance(\"exampleVirtualMachineInstance\", VirtualMachineInstanceArgs.builder()\n            .name(\"example-instance\")\n            .subnetId(exampleSubnet.id())\n            .machineType(\"pgp-small\")\n            .machineImage(ubuntu.name())\n            .availabilityZone(\"nl-01a\")\n            .rootVolumeSizeGb(20)\n            .rootVolumeType(block.id())\n            .cloudInitTemplateId(exampleCloudInitTemplate.id())\n            .build());\n\n        ctx.export(\"instanceId\", exampleVirtualMachineInstance.id());\n        ctx.export(\"instanceName\", exampleVirtualMachineInstance.name());\n        // Create a load balancer for the virtual machine instance\n        var exampleLoadbalancer = new Loadbalancer(\"exampleLoadbalancer\", LoadbalancerArgs.builder()\n            .name(\"example-lb\")\n            .region(\"nl-01\")\n            .description(\"Example load balancer for virtual machine instance\")\n            .subnetId(exampleSubnet.id())\n            .build());\n\n        // Create a load balancer target group\n        var exampleTargetGroup = new TargetGroup(\"exampleTargetGroup\", TargetGroupArgs.builder()\n            .name(\"example-lb-target-group\")\n            .description(\"Example load balancer target group for virtual machine instance\")\n            .vpcId(example.id())\n            .protocol(\"tcp\")\n            .port(22)\n            .build());\n\n        // Create a load balancer listener\n        var exampleLoadbalancerListener = new LoadbalancerListener(\"exampleLoadbalancerListener\", LoadbalancerListenerArgs.builder()\n            .name(\"example-lb-listener\")\n            .description(\"Example load balancer listener for virtual machine instance\")\n            .loadbalancerId(exampleLoadbalancer.id())\n            .protocol(\"tcp\")\n            .port(22)\n            .targetGroupId(exampleTargetGroup.id())\n            .build());\n\n        var exampleTargetGroupAttachment = new TargetGroupAttachment(\"exampleTargetGroupAttachment\", TargetGroupAttachmentArgs.builder()\n            .targetGroupId(exampleTargetGroup.id())\n            .vmiId(exampleVirtualMachineInstance.id())\n            .build());\n\n        ctx.export(\"loadBalancerIp\", exampleLoadbalancer.ipAddress());\n        ctx.export(\"loadBalancerPort\", exampleLoadbalancerListener.port());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC for the virtual machine instance\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      description: Example VPC for virtual machine instance\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n  # Create a subnet for the virtual machine instance\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for virtual machine instance\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\n  # Create a security group for the virtual machine instance\n  exampleSecurityGroup:\n    type: thalassa:SecurityGroup\n    name: example\n    properties:\n      name: example-security-group\n      description: Example security group for virtual machine instance\n      vpcId: ${example.id}\n  # Create a cloud init template (optional)\n  exampleCloudInitTemplate:\n    type: thalassa:CloudInitTemplate\n    name: example\n    properties:\n      name: example-cloud-init-template\n      content: |\n        #cloud-config\n        package_update: true\n        package_upgrade: true\n        packages:\n          - nginx\n          - curl\n        runcmd:\n          - systemctl enable nginx\n          - systemctl start nginx\n  # Create a virtual machine instance with Thalassa default values\n  exampleVirtualMachineInstance:\n    type: thalassa:VirtualMachineInstance\n    name: example\n    properties:\n      name: example-instance\n      subnetId: ${exampleSubnet.id}\n      machineType: pgp-small\n      machineImage: ${ubuntu.name}\n      availabilityZone: nl-01a\n      rootVolumeSizeGb: 20\n      rootVolumeType: ${block.id}\n      cloudInitTemplateId: ${exampleCloudInitTemplate.id}\n  # Create a load balancer for the virtual machine instance\n  exampleLoadbalancer:\n    type: thalassa:Loadbalancer\n    name: example\n    properties:\n      name: example-lb\n      region: nl-01\n      description: Example load balancer for virtual machine instance\n      subnetId: ${exampleSubnet.id}\n  # Create a load balancer listener\n  exampleLoadbalancerListener:\n    type: thalassa:LoadbalancerListener\n    name: example\n    properties:\n      name: example-lb-listener\n      description: Example load balancer listener for virtual machine instance\n      loadbalancerId: ${exampleLoadbalancer.id}\n      protocol: tcp\n      port: 22\n      targetGroupId: ${exampleTargetGroup.id}\n  # Create a load balancer target group\n  exampleTargetGroup:\n    type: thalassa:TargetGroup\n    name: example\n    properties:\n      name: example-lb-target-group\n      description: Example load balancer target group for virtual machine instance\n      vpcId: ${example.id}\n      protocol: tcp\n      port: 22\n  exampleTargetGroupAttachment:\n    type: thalassa:TargetGroupAttachment\n    name: example\n    properties:\n      targetGroupId: ${exampleTargetGroup.id}\n      vmiId: ${exampleVirtualMachineInstance.id}\nvariables:\n  block:\n    fn::invoke:\n      function: thalassa:getVolumeType\n      arguments:\n        name: Block\n  ubuntu:\n    fn::invoke:\n      function: thalassa:getMachineImage\n      arguments:\n        name: ubuntu-22-04-01\noutputs:\n  # Output the virtual machine instance details\n  instanceId: ${exampleVirtualMachineInstance.id}\n  instanceName: ${exampleVirtualMachineInstance.name}\n  # Output the load balancer details\n  loadBalancerIp: ${exampleLoadbalancer.ipAddress}\n  loadBalancerPort: ${exampleLoadbalancerListener.port}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the virtual machine instance\n"
                },
                "attachedVolumeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Attached volume ids of the virtual machine instance\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone of the virtual machine instance\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "Cloud init of the virtual machine instance\n"
                },
                "cloudInitTemplateId": {
                    "type": "string",
                    "description": "Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection of the virtual machine instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the virtual machine instance\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of the virtual machine instance\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the virtual machine instance\n"
                },
                "machineImage": {
                    "type": "string",
                    "description": "Machine image of the virtual machine instance\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "Machine type of the virtual machine instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Machine Instance\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "rootVolumeId": {
                    "type": "string",
                    "description": "Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.\n"
                },
                "rootVolumeSizeGb": {
                    "type": "integer",
                    "description": "Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.\n"
                },
                "rootVolumeType": {
                    "type": "string",
                    "description": "Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.\n"
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the Virtual Machine Instance\n"
                },
                "slug": {
                    "type": "string",
                    "description": "Slug of the Virtual Machine Instance\n"
                },
                "state": {
                    "type": "string",
                    "description": "Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the virtual machine instance\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the Virtual Machine Instance\n"
                }
            },
            "required": [
                "attachedVolumeIds",
                "ipAddresses",
                "machineImage",
                "machineType",
                "name",
                "rootVolumeId",
                "slug",
                "state",
                "status",
                "subnetId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the virtual machine instance\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "Availability zone of the virtual machine instance\n"
                },
                "cloudInit": {
                    "type": "string",
                    "description": "Cloud init of the virtual machine instance\n"
                },
                "cloudInitTemplateId": {
                    "type": "string",
                    "description": "Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.\n",
                    "willReplaceOnChanges": true
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Delete protection of the virtual machine instance\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the virtual machine instance\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the virtual machine instance\n"
                },
                "machineImage": {
                    "type": "string",
                    "description": "Machine image of the virtual machine instance\n",
                    "willReplaceOnChanges": true
                },
                "machineType": {
                    "type": "string",
                    "description": "Machine type of the virtual machine instance\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Machine Instance\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "rootVolumeId": {
                    "type": "string",
                    "description": "Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.\n"
                },
                "rootVolumeSizeGb": {
                    "type": "integer",
                    "description": "Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.\n"
                },
                "rootVolumeType": {
                    "type": "string",
                    "description": "Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.\n"
                },
                "securityGroupAttachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List identities of security group that will be attached to the Virtual Machine Instance\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "Subnet of the Virtual Machine Instance\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "machineImage",
                "machineType",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VirtualMachineInstance resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the virtual machine instance\n"
                    },
                    "attachedVolumeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Attached volume ids of the virtual machine instance\n"
                    },
                    "availabilityZone": {
                        "type": "string",
                        "description": "Availability zone of the virtual machine instance\n"
                    },
                    "cloudInit": {
                        "type": "string",
                        "description": "Cloud init of the virtual machine instance\n"
                    },
                    "cloudInitTemplateId": {
                        "type": "string",
                        "description": "Cloud init template id of the virtual machine instance. If provided, the cloud init will be set to the content of the template.\n",
                        "willReplaceOnChanges": true
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Delete protection of the virtual machine instance\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the virtual machine instance\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP addresses of the virtual machine instance\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the virtual machine instance\n"
                    },
                    "machineImage": {
                        "type": "string",
                        "description": "Machine image of the virtual machine instance\n",
                        "willReplaceOnChanges": true
                    },
                    "machineType": {
                        "type": "string",
                        "description": "Machine type of the virtual machine instance\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Virtual Machine Instance\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "rootVolumeId": {
                        "type": "string",
                        "description": "Root volume id of the virtual machine instance. Must be provided if root*volume*type is not set.\n"
                    },
                    "rootVolumeSizeGb": {
                        "type": "integer",
                        "description": "Root volume size of the virtual machine instance. Must be provided if root*volume*id is not set.\n"
                    },
                    "rootVolumeType": {
                        "type": "string",
                        "description": "Root volume type of the virtual machine instance. Must be provided if root*volume*id is not set.\n"
                    },
                    "securityGroupAttachments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List identities of security group that will be attached to the Virtual Machine Instance\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the Virtual Machine Instance\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Desired state of the virtual machine instance. Can be 'running', 'stopped', 'deleted'\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the virtual machine instance\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet of the Virtual Machine Instance\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "thalassa:index/vpc:Vpc": {
            "description": "Create an vpc\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as thalassa from \"@pulumi/thalassa\";\n\n// Create a VPC with all optional attributes\nconst example = new thalassa.Vpc(\"example\", {\n    name: \"example-vpc\",\n    region: \"nl-01\",\n    cidrs: [\n        \"10.0.0.0/16\",\n        \"10.2.0.0/16\",\n        \"10.3.0.0/16\",\n    ],\n    description: \"Example VPC for documentation with all optional attributes\",\n    labels: {\n        environment: \"production\",\n        project: \"example-project\",\n        owner: \"team-a\",\n    },\n});\n// Create a subnet within the VPC\nconst exampleSubnet = new thalassa.Subnet(\"example\", {\n    name: \"example-subnet\",\n    description: \"Example subnet for documentation\",\n    vpcId: example.id,\n    cidr: \"10.0.1.0/24\",\n});\nexport const vpcId = example.id;\nexport const subnetId = exampleSubnet.id;\n```\n```python\nimport pulumi\nimport pulumi_thalassa as thalassa\n\n# Create a VPC with all optional attributes\nexample = thalassa.Vpc(\"example\",\n    name=\"example-vpc\",\n    region=\"nl-01\",\n    cidrs=[\n        \"10.0.0.0/16\",\n        \"10.2.0.0/16\",\n        \"10.3.0.0/16\",\n    ],\n    description=\"Example VPC for documentation with all optional attributes\",\n    labels={\n        \"environment\": \"production\",\n        \"project\": \"example-project\",\n        \"owner\": \"team-a\",\n    })\n# Create a subnet within the VPC\nexample_subnet = thalassa.Subnet(\"example\",\n    name=\"example-subnet\",\n    description=\"Example subnet for documentation\",\n    vpc_id=example.id,\n    cidr=\"10.0.1.0/24\")\npulumi.export(\"vpcId\", example.id)\npulumi.export(\"subnetId\", example_subnet.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Thalassa = Pulumi.Thalassa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a VPC with all optional attributes\n    var example = new Thalassa.Vpc(\"example\", new()\n    {\n        Name = \"example-vpc\",\n        Region = \"nl-01\",\n        Cidrs = new[]\n        {\n            \"10.0.0.0/16\",\n            \"10.2.0.0/16\",\n            \"10.3.0.0/16\",\n        },\n        Description = \"Example VPC for documentation with all optional attributes\",\n        Labels = \n        {\n            { \"environment\", \"production\" },\n            { \"project\", \"example-project\" },\n            { \"owner\", \"team-a\" },\n        },\n    });\n\n    // Create a subnet within the VPC\n    var exampleSubnet = new Thalassa.Subnet(\"example\", new()\n    {\n        Name = \"example-subnet\",\n        Description = \"Example subnet for documentation\",\n        VpcId = example.Id,\n        Cidr = \"10.0.1.0/24\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vpcId\"] = example.Id,\n        [\"subnetId\"] = exampleSubnet.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/sandervb2/pulumi-thalassa/sdk/go/thalassa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a VPC with all optional attributes\n\t\texample, err := thalassa.NewVpc(ctx, \"example\", \u0026thalassa.VpcArgs{\n\t\t\tName:   pulumi.String(\"example-vpc\"),\n\t\t\tRegion: pulumi.String(\"nl-01\"),\n\t\t\tCidrs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.0/16\"),\n\t\t\t\tpulumi.String(\"10.2.0.0/16\"),\n\t\t\t\tpulumi.String(\"10.3.0.0/16\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Example VPC for documentation with all optional attributes\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"production\"),\n\t\t\t\t\"project\":     pulumi.String(\"example-project\"),\n\t\t\t\t\"owner\":       pulumi.String(\"team-a\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a subnet within the VPC\n\t\texampleSubnet, err := thalassa.NewSubnet(ctx, \"example\", \u0026thalassa.SubnetArgs{\n\t\t\tName:        pulumi.String(\"example-subnet\"),\n\t\t\tDescription: pulumi.String(\"Example subnet for documentation\"),\n\t\t\tVpcId:       example.ID(),\n\t\t\tCidr:        pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vpcId\", example.ID())\n\t\tctx.Export(\"subnetId\", exampleSubnet.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.thalassa.Vpc;\nimport com.pulumi.thalassa.VpcArgs;\nimport com.pulumi.thalassa.Subnet;\nimport com.pulumi.thalassa.SubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a VPC with all optional attributes\n        var example = new Vpc(\"example\", VpcArgs.builder()\n            .name(\"example-vpc\")\n            .region(\"nl-01\")\n            .cidrs(            \n                \"10.0.0.0/16\",\n                \"10.2.0.0/16\",\n                \"10.3.0.0/16\")\n            .description(\"Example VPC for documentation with all optional attributes\")\n            .labels(Map.ofEntries(\n                Map.entry(\"environment\", \"production\"),\n                Map.entry(\"project\", \"example-project\"),\n                Map.entry(\"owner\", \"team-a\")\n            ))\n            .build());\n\n        // Create a subnet within the VPC\n        var exampleSubnet = new Subnet(\"exampleSubnet\", SubnetArgs.builder()\n            .name(\"example-subnet\")\n            .description(\"Example subnet for documentation\")\n            .vpcId(example.id())\n            .cidr(\"10.0.1.0/24\")\n            .build());\n\n        ctx.export(\"vpcId\", example.id());\n        ctx.export(\"subnetId\", exampleSubnet.id());\n    }\n}\n```\n```yaml\nresources:\n  # Create a VPC with all optional attributes\n  example:\n    type: thalassa:Vpc\n    properties:\n      name: example-vpc\n      region: nl-01\n      cidrs:\n        - 10.0.0.0/16\n        - 10.2.0.0/16\n        - 10.3.0.0/16\n      description: Example VPC for documentation with all optional attributes\n      labels:\n        environment: production\n        project: example-project\n        owner: team-a\n  # Create a subnet within the VPC\n  exampleSubnet:\n    type: thalassa:Subnet\n    name: example\n    properties:\n      name: example-subnet\n      description: Example subnet for documentation\n      vpcId: ${example.id}\n      cidr: 10.0.1.0/24\noutputs:\n  # Output the VPC and subnet IDs\n  vpcId: ${example.id}\n  subnetId: ${exampleSubnet.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Vpc\n"
                },
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CIDRs for the Vpc\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the vpc\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Vpc\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Vpc\n"
                },
                "organisationId": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the Vpc. Provide the identity of the region. Can only be set on creation.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "Slug of the Vpc\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Vpc\n"
                }
            },
            "required": [
                "cidrs",
                "name",
                "region",
                "slug",
                "status"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Vpc\n"
                },
                "cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CIDRs for the Vpc\n"
                },
                "description": {
                    "type": "string",
                    "description": "A human readable description about the vpc\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Vpc\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Vpc\n",
                    "willReplaceOnChanges": true
                },
                "organisationId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region of the Vpc. Provide the identity of the region. Can only be set on creation.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cidrs",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Vpc\n"
                    },
                    "cidrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of CIDRs for the Vpc\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the vpc\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Vpc\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Vpc\n",
                        "willReplaceOnChanges": true
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the Vpc. Provide the identity of the region. Can only be set on creation.\n",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the Vpc\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Vpc\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pulumi:providers:thalassa/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/provider"
                    }
                },
                "type": "pulumi:providers:thalassa/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getDbaasDbBackupschedule:getDbaasDbBackupschedule": {
            "inputs": {
                "description": "A collection of arguments for invoking getDbaasDbBackupschedule.\n",
                "properties": {
                    "dbClusterId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "dbClusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDbaasDbBackupschedule.\n",
                "properties": {
                    "backupTarget": {
                        "type": "string"
                    },
                    "dbClusterId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "retentionPolicy": {
                        "type": "string"
                    },
                    "schedule": {
                        "type": "string"
                    },
                    "suspended": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "backupTarget",
                    "dbClusterId",
                    "id",
                    "name",
                    "retentionPolicy",
                    "schedule",
                    "suspended"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getDbaasDbCluster:getDbaasDbCluster": {
            "description": "Get an DB Cluster\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDbaasDbCluster.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the DB Cluster\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the DB Cluster\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDbaasDbCluster.\n",
                "properties": {
                    "allocatedStorage": {
                        "description": "Amount of storage allocated to the cluster in GB\n",
                        "type": "integer"
                    },
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the DB Cluster\n",
                        "type": "object"
                    },
                    "autoMinorVersionUpgrade": {
                        "description": "Flag indicating if the cluster should automatically upgrade to the latest minor version\n",
                        "type": "boolean"
                    },
                    "databaseInstanceType": {
                        "description": "Database instance type of the DB Cluster\n",
                        "type": "string"
                    },
                    "databaseName": {
                        "description": "Name of the database on the cluster\n",
                        "type": "string"
                    },
                    "deleteProtection": {
                        "description": "Flag indicating if the cluster should be protected from deletion\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "Description of the DB Cluster\n",
                        "type": "string"
                    },
                    "endpointIpv4": {
                        "description": "IPv4 address of the cluster endpoint\n",
                        "type": "string"
                    },
                    "endpointIpv6": {
                        "description": "IPv6 address of the cluster endpoint\n",
                        "type": "string"
                    },
                    "engine": {
                        "description": "Database engine of the cluster\n",
                        "type": "string"
                    },
                    "engineVersion": {
                        "description": "Version of the database engine\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Identity of the DB Cluster\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the DB Cluster\n",
                        "type": "object"
                    },
                    "name": {
                        "description": "Name of the DB Cluster\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "parameters": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of parameter name to database engine specific parameter value\n",
                        "type": "object"
                    },
                    "port": {
                        "description": "Port of the cluster endpoint\n",
                        "type": "integer"
                    },
                    "replicas": {
                        "description": "Number of instances in the cluster\n",
                        "type": "integer"
                    },
                    "securityGroups": {
                        "description": "List of security groups associated with the cluster\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "slug": {
                        "description": "Slug of the DB Cluster\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the cluster\n",
                        "type": "string"
                    },
                    "subnetId": {
                        "description": "Subnet of the DB Cluster\n",
                        "type": "string"
                    },
                    "volumeTypeClass": {
                        "description": "Storage type used to determine the size of the cluster storage\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allocatedStorage",
                    "annotations",
                    "autoMinorVersionUpgrade",
                    "databaseInstanceType",
                    "databaseName",
                    "deleteProtection",
                    "description",
                    "endpointIpv4",
                    "endpointIpv6",
                    "engine",
                    "engineVersion",
                    "id",
                    "labels",
                    "name",
                    "parameters",
                    "port",
                    "replicas",
                    "securityGroups",
                    "slug",
                    "status",
                    "subnetId",
                    "volumeTypeClass"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getDbaasPgDatabase:getDbaasPgDatabase": {
            "inputs": {
                "description": "A collection of arguments for invoking getDbaasPgDatabase.\n",
                "properties": {
                    "dbClusterId": {
                        "type": "string",
                        "description": "The ID of the database cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "dbClusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDbaasPgDatabase.\n",
                "properties": {
                    "connectionLimit": {
                        "description": "The connection limit of the database\n",
                        "type": "integer"
                    },
                    "dbClusterId": {
                        "description": "The ID of the database cluster\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the database\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "ownerRoleId": {
                        "description": "The ID of the owner role\n",
                        "type": "string"
                    }
                },
                "required": [
                    "connectionLimit",
                    "dbClusterId",
                    "id",
                    "name",
                    "ownerRoleId"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getDbaasPgRoles:getDbaasPgRoles": {
            "inputs": {
                "description": "A collection of arguments for invoking getDbaasPgRoles.\n",
                "properties": {
                    "dbClusterId": {
                        "type": "string",
                        "description": "The ID of the database cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "dbClusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDbaasPgRoles.\n",
                "properties": {
                    "connectionLimit": {
                        "description": "The connection limit of the role\n",
                        "type": "integer"
                    },
                    "createDb": {
                        "description": "Whether the role can create databases\n",
                        "type": "boolean"
                    },
                    "createRole": {
                        "description": "Whether the role can create roles\n",
                        "type": "boolean"
                    },
                    "dbClusterId": {
                        "description": "The ID of the database cluster\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "login": {
                        "description": "Whether the role can login\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The name of the role\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "connectionLimit",
                    "createDb",
                    "createRole",
                    "dbClusterId",
                    "id",
                    "login",
                    "name"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getIamRole:getIamRole": {
            "description": "Get an organisation role\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamRole.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the role\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Organisation Role\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the Organisation Role\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamRole.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Organisation Role\n",
                        "type": "object"
                    },
                    "createdAt": {
                        "description": "Creation timestamp of the Organisation Role\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "A human readable description about the role\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Identity of the Organisation Role\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Organisation Role\n",
                        "type": "object"
                    },
                    "name": {
                        "description": "Name of the Organisation Role\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "roleIsReadOnly": {
                        "description": "Whether the role is read-only and cannot be modified.\n",
                        "type": "boolean"
                    },
                    "slug": {
                        "description": "Slug of the Organisation Role\n",
                        "type": "string"
                    },
                    "system": {
                        "description": "Whether the role is a system role\n",
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "description": "Last update timestamp of the Organisation Role\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "createdAt",
                    "id",
                    "labels",
                    "roleIsReadOnly",
                    "system",
                    "updatedAt"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getIamTeam:getIamTeam": {
            "description": "Get a team\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamTeam.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the team\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Team\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the Team\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamTeam.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Team\n",
                        "type": "object"
                    },
                    "createdAt": {
                        "description": "Creation timestamp of the Team\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "A human readable description about the team\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Identity of the Team\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Team\n",
                        "type": "object"
                    },
                    "name": {
                        "description": "Name of the Team\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "slug": {
                        "description": "Slug of the Team\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "Last update timestamp of the Team\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "createdAt",
                    "id",
                    "labels",
                    "updatedAt"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getKubernetesCluster:getKubernetesCluster": {
            "description": "Get an Kubernetes cluster\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesCluster.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Kubernetes version.\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "description": "Organisation of the Kubernetes Cluster\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "organisationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesCluster.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Kubernetes Cluster\n",
                        "type": "object"
                    },
                    "apiServerAcls": {
                        "description": "API server ACLs for the Kubernetes Cluster\n",
                        "items": {
                            "$ref": "#/types/thalassa:index/getKubernetesClusterApiServerAcl:getKubernetesClusterApiServerAcl"
                        },
                        "type": "array"
                    },
                    "auditLogProfile": {
                        "description": "Audit log profile of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "autoUpgradePolicy": {
                        "description": "Auto upgrade policy of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "clusterType": {
                        "description": "Cluster type of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "clusterVersion": {
                        "description": "Cluster version of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "defaultNetworkPolicy": {
                        "description": "Default network policy of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "deleteProtection": {
                        "description": "Delete protection of the Kubernetes Cluster\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "A human readable description about the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "kubernetesApiServerCaCertificate": {
                        "description": "Kubernetes API server CA certificate of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "kubernetesApiServerEndpoint": {
                        "description": "Kubernetes API server endpoint of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Kubernetes Cluster\n",
                        "type": "object"
                    },
                    "maintenanceDay": {
                        "description": "Day of the week when the cluster will be upgraded (0-6, where 0 is Sunday)\n",
                        "type": "integer"
                    },
                    "maintenanceStartAt": {
                        "description": "Time of day when the cluster will be upgraded in minutes from midnight\n",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the Kubernetes version.\n",
                        "type": "string"
                    },
                    "networkingCni": {
                        "description": "CNI of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "networkingPodCidr": {
                        "description": "Pod CIDR of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "networkingServiceCidr": {
                        "description": "Service CIDR of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "description": "Organisation of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "podSecurityStandardsProfile": {
                        "description": "Pod security standards profile of the Kubernetes Cluster\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "Region of the Kubernetes Cluster. Required for hosted-control-plane clusters.\n",
                        "type": "string"
                    },
                    "slug": {
                        "description": "The slug of the Kubernetes version.\n",
                        "type": "string"
                    },
                    "subnetId": {
                        "description": "Subnet of the Kubernetes Cluster.\n",
                        "type": "string"
                    },
                    "vpcId": {
                        "description": "VPC of the Kubernetes Cluster.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "apiServerAcls",
                    "auditLogProfile",
                    "autoUpgradePolicy",
                    "clusterType",
                    "clusterVersion",
                    "defaultNetworkPolicy",
                    "deleteProtection",
                    "description",
                    "id",
                    "kubernetesApiServerCaCertificate",
                    "kubernetesApiServerEndpoint",
                    "labels",
                    "maintenanceDay",
                    "maintenanceStartAt",
                    "name",
                    "networkingCni",
                    "networkingPodCidr",
                    "networkingServiceCidr",
                    "organisationId",
                    "podSecurityStandardsProfile",
                    "region",
                    "slug",
                    "subnetId",
                    "vpcId"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getKubernetesVersion:getKubernetesVersion": {
            "description": "Get an Kubernetes version\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesVersion.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Kubernetes version.\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the Kubernetes version.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesVersion.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The annotations of the Kubernetes version.\n",
                        "type": "object"
                    },
                    "ciliumVersion": {
                        "description": "The cilium version.\n",
                        "type": "string"
                    },
                    "cloudControllerManagerVersion": {
                        "description": "The cloud controller manager version.\n",
                        "type": "string"
                    },
                    "cniPluginsVersion": {
                        "description": "The CNI plugins version.\n",
                        "type": "string"
                    },
                    "containerdVersion": {
                        "description": "The containerd version.\n",
                        "type": "string"
                    },
                    "crictlVersion": {
                        "description": "The crictl version.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "istioVersion": {
                        "description": "The istio version.\n",
                        "type": "string"
                    },
                    "kubernetesVersion": {
                        "description": "The Kubernetes version\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the Kubernetes version.\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "runcVersion": {
                        "description": "The runc version.\n",
                        "type": "string"
                    },
                    "slug": {
                        "description": "The slug of the Kubernetes version.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "ciliumVersion",
                    "cloudControllerManagerVersion",
                    "cniPluginsVersion",
                    "containerdVersion",
                    "crictlVersion",
                    "istioVersion",
                    "kubernetesVersion",
                    "runcVersion"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getMachineImage:getMachineImage": {
            "description": "Get an machine image\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMachineImage.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the machine image\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the machine image\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMachineImage.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the machine image\n",
                        "type": "object"
                    },
                    "description": {
                        "description": "Description of the machine image\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Identity of the machine image\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the machine image\n",
                        "type": "object"
                    },
                    "name": {
                        "description": "Name of the machine image\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "slug": {
                        "description": "Slug of the machine image\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "description",
                    "id",
                    "labels",
                    "name"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getMachineType:getMachineType": {
            "description": "Get an machine type\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMachineType.\n",
                "properties": {
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMachineType.\n",
                "properties": {
                    "cpuCores": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "ramMb": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "required": [
                    "cpuCores",
                    "description",
                    "id",
                    "name",
                    "ramMb"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getObjectstorageBucket:getObjectstorageBucket": {
            "description": "Get an object storage bucket\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectstorageBucket.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the bucket\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the bucket\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjectstorageBucket.\n",
                "properties": {
                    "endpoint": {
                        "description": "The endpoint URL for the bucket\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Identity of the bucket\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the bucket\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "policy": {
                        "description": "The bucket policy as a JSON string\n",
                        "type": "string"
                    },
                    "public": {
                        "description": "Whether the bucket is publicly accessible\n",
                        "type": "boolean"
                    },
                    "region": {
                        "description": "Region of the bucket\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the bucket\n",
                        "type": "string"
                    }
                },
                "required": [
                    "endpoint",
                    "id",
                    "name",
                    "policy",
                    "public",
                    "status"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getOrganisation:getOrganisation": {
            "description": "Get an organisation\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganisation.\n",
                "properties": {
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganisation.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "description",
                    "id",
                    "labels",
                    "name"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getRegion:getRegion": {
            "description": "Get an region\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "description",
                    "id",
                    "labels",
                    "name",
                    "organisationId"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getRegions:getRegions": {
            "description": "Get a list of regions\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegions.\n",
                "properties": {
                    "organisationId": {
                        "type": "string",
                        "description": "The organisation to get the regions for. If not provided, the current organisation will be used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegions.\n",
                "properties": {
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "description": "The organisation to get the regions for. If not provided, the current organisation will be used.\n",
                        "type": "string"
                    },
                    "regions": {
                        "items": {
                            "$ref": "#/types/thalassa:index/getRegionsRegion:getRegionsRegion"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "regions"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getSecurityGroup:getSecurityGroup": {
            "description": "A security group is a collection of rules that control the traffic to and from a virtual machine instance or other cloud resource within a VPC.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecurityGroup.\n",
                "properties": {
                    "identity": {
                        "type": "string",
                        "description": "Identity of the security group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the security group\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "vpcIdentity": {
                        "type": "string",
                        "description": "Identity of the VPC that the security group belongs to. Required when searching by name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecurityGroup.\n",
                "properties": {
                    "allowSameGroupTraffic": {
                        "description": "Flag that indicates if the security group allows traffic between instances in the same security group\n",
                        "type": "boolean"
                    },
                    "createdAt": {
                        "description": "Creation timestamp of the security group\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the security group\n",
                        "type": "string"
                    },
                    "egressRules": {
                        "description": "List of egress rules for the security group\n",
                        "items": {
                            "$ref": "#/types/thalassa:index/getSecurityGroupEgressRule:getSecurityGroupEgressRule"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "identity": {
                        "description": "Identity of the security group\n",
                        "type": "string"
                    },
                    "ingressRules": {
                        "description": "List of ingress rules for the security group\n",
                        "items": {
                            "$ref": "#/types/thalassa:index/getSecurityGroupIngressRule:getSecurityGroupIngressRule"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the security group\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the security group\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "Last update timestamp of the security group\n",
                        "type": "string"
                    },
                    "vpcIdentity": {
                        "description": "Identity of the VPC that the security group belongs to. Required when searching by name.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowSameGroupTraffic",
                    "createdAt",
                    "description",
                    "egressRules",
                    "ingressRules",
                    "status",
                    "updatedAt",
                    "id"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getSubnet:getSubnet": {
            "description": "Get a subnet by name\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSubnet.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "vpcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSubnet.\n",
                "properties": {
                    "cidr": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "string"
                    }
                },
                "required": [
                    "cidr",
                    "id",
                    "name",
                    "slug",
                    "vpcId"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getVolumeType:getVolumeType": {
            "description": "Get an volume type by name. Volume Types are used to create block volumes. The matching name is case insensitive.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVolumeType.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the volume type.\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVolumeType.\n",
                "properties": {
                    "allowResize": {
                        "description": "Whether the volume type allows resizing. If false, the volume size cannot be changed after creation.\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description of the volume type.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the volume type.\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "storageType": {
                        "description": "The storage type of the volume type. For example: 'block'.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowResize",
                    "description",
                    "id",
                    "name",
                    "storageType"
                ],
                "type": "object"
            }
        },
        "thalassa:index/getVpc:getVpc": {
            "description": "Get an vpc\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpc.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A human readable description about the vpc\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Vpc\n"
                    },
                    "organisationId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the Vpc. Provide the identity of the region. Can only be set on creation.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "Slug of the Vpc\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpc.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Vpc\n",
                        "type": "object"
                    },
                    "cidrs": {
                        "description": "List of CIDRs for the Vpc\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "A human readable description about the vpc\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Identity of the Vpc\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Vpc\n",
                        "type": "object"
                    },
                    "name": {
                        "description": "Name of the Vpc\n",
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "region": {
                        "description": "Region of the Vpc. Provide the identity of the region. Can only be set on creation.\n",
                        "type": "string"
                    },
                    "slug": {
                        "description": "Slug of the Vpc\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the Vpc\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "cidrs",
                    "id",
                    "labels",
                    "status"
                ],
                "type": "object"
            }
        }
    }
}